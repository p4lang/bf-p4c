FROM barefootnetworks/model:tofino_master

MAINTAINER bfn-docker <bfn-docker@barefootnetworks.com>
ENV DEBIAN_FRONTEND noninteractive

ENV P4C_DEPS autoconf \
             automake \
             bison \
             build-essential \
             flex \
             g++-6 \
             libboost-dev \
             libboost-graph-dev \
             libboost-iostreams-dev \
             libfl-dev \
             libgc-dev \
             libgmp-dev \
             libssl-dev \
             libtool \
             python-dev \
             python-pip


ENV P4C_RUNTIME_DEPS cpp \
                     cmake \
                     ethtool \
                     libboost-iostreams1.58.0 \
                     libgc1c2 \
                     libgmp10 \
                     libgmpxx4ldbl \
                     libnl-route-3-dev \
                     libssl1.0.0 \
                     pkg-config \
                     psmisc \
                     python-ipaddr \
                     python-scapy \
                     python-setuptools \
                     python-yaml \
                     sudo \
                     tcpdump

RUN add-apt-repository ppa:ubuntu-toolchain-r/test && \
    apt-get update && \
    apt-get install -y $P4C_DEPS $P4C_RUNTIME_DEPS && \
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 10 && \
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 20 && \
    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 10 && \
    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-6 20

# Default to using 2 make jobs, which is a good default for CI. If you're
# building locally or you know there are more cores available, you may want to
# override this.
ARG MAKEFLAGS=-j2

# Use 'test' if you wish to keep the build artifacts
ARG IMAGE_TYPE=release

# testing dependencies
RUN apt-get install -y net-tools

RUN pip install ply jsl jsonschema pexpect crc16
COPY . /bfn/bf-p4c-compilers/
COPY scripts/ptf_hugepage_setup.sh /bfn/ptf_hugepage_setup.sh
COPY scripts/docker_entry_point.sh /bfn/docker_entry_point.sh
WORKDIR /bfn/bf-p4c-compilers
ENV LDFLAGS="-Wl,-s"
RUN /usr/local/bin/ccache --zero-stats && \
    ./bootstrap_bfn_compilers.sh -DCMAKE_BUILD_TYPE=RELEASE \
                                 -DENABLE_JBAY=OFF -DENABLE_P4C_GRAPHS=OFF \
                                 -DENABLE_BMV2=OFF -DENABLE_P4TEST=OFF \
                                 -DENABLE_EBPF=OFF -DENABLE_STF2PTF=OFF \
                                 && \
    cd build && \
    make && \
    make install && \
    /usr/local/bin/ccache -p --show-stats && \
    apt-get autoremove --purge -y && \
    rm -rf ~/.cache/* ~/.ccache/* /var/cache/apt/* /var/lib/apt/lists/* && \
    rm -rf bf-asm/walle/build/* && \
    find . -name '*.o' -type f -delete && \
    find . -name '*.a' -type f -delete

WORKDIR /bfn/
RUN (test "$IMAGE_TYPE" = "release" && rm -rf bf-p4c-compilers) || \
    (test "$IMAGE_TYPE" = "test")

# cleanup space on the image
RUN apt-get clean -y && apt-get autoclean -y

# setup huge pages
ENTRYPOINT ["/bfn/docker_entry_point.sh"]
