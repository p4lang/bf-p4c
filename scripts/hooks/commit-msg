#!/usr/bin/env python

import sys
import subprocess
import re


class Decorator:
  def get_branch(self):
        name = subprocess.Popen("git symbolic-ref -q HEAD", shell=True,
                                stdout=subprocess.PIPE).stdout.read().decode()
        return '/'.join(name.rstrip('\n').split('/')[2:])

  def get_fix(self, branch):
        l = branch.split('/')
        m = re.match("(brig|p4c|compiler|drv)-(\d+)", l[-1], re.IGNORECASE)
        if m is not None:
          return m.group(1), m.group(2)
        return None, None

  def __init__(self):
        self.branch = self.get_branch()
        self.project, self.fix = self.get_fix(self.branch)

  def decorate(self, m):
        if self.fix is None:
          return m

        summary = m.split('\n')[0]
        stanza = "%s-%s #assign #start-work %s" % \
              (self.project.upper(), self.fix, summary)
        have_stanza = False
        have_message = False
        n = ""
        for l in m.split('\n'):
          n += "%s\n" % l
          if l.startswith('#'): continue  # Ignore comment lines.
          have_message |= l.strip() != ""
          have_stanza |= stanza in l
        if have_message and not have_stanza:
          n += '\n' + stanza + '\n'
        return n

msg = None
with open(sys.argv[1], 'r+') as file:
  msg = file.read()
  d = Decorator()
  new_msg = d.decorate(msg)
  file.seek(0)
  file.write(new_msg)
  file.truncate()
