#!/usr/bin/env python
from __future__ import print_function
import sys, os, subprocess, re, shlex

repo = os.getcwd()
p4cdir = os.path.join(repo, 'p4c')
bfasdir = os.path.join(repo, 'bf-asm')

class Linter:
    def __init__(self, basedir, verbose = False):
        self._basedir = basedir
        self._fileSet = re.compile(r'.*\.[cpp,cc,c,h,hpp,ypp,l]')
        self._bfas = re.compile(r'^bf-asm/.*')
        self._verbose = verbose

    def runCmd(self, cmd, basedir = repo):
        """
        Run a command, capture its output and return it in a tuple with
        the command return code (return code, out).
        """
        if self._verbose:
            print(' '.join(cmd))

        args = shlex.split(" ".join(cmd))
        try:
            p = subprocess.Popen(args, stdout=subprocess.PIPE, cwd=basedir)
        except:
            import traceback
            print("error invoking {}".format(" ".join(cmd)), file=sys.stderr)
            print(traceback.format_exc(), file=sys.stderr)
            return (1, None)

        (out, err) = p.communicate() # now wait
        return (p.returncode, out.decode())

    def getFiles(self):
        (rc, allFiles) = self.runCmd(('git','diff','--cached','--name-only'))
        # print 'All:', allFiles
        lintFiles = [f for f in allFiles.strip().split('\n') if self._fileSet.match(f)]

        files = []
        if self._basedir == bfasdir:
            files = [ os.path.join(repo, f) for f in lintFiles if self._bfas.match(f) ]
        else:
            files = [ os.path.join('extensions', f) for f in lintFiles if not self._bfas.match(f) ]
        # print 'Filtered:', files
        return files

    def run(self):
        files = self.getFiles()
        if len(files) > 0:
            linter=[os.path.join(p4cdir, 'tools', 'cpplint.py'),
                    '--quiet', '--root', self._basedir ]
            args = linter + files
            if self._verbose:
                print(args)
            (rc, out) = self.runCmd(args, self._basedir)
            print(out)
            return rc
        return 0

p4clint = Linter(p4cdir)
bfaslint = Linter(bfasdir)
rc =  p4clint.run()
# assembler is not ready to run cpplint!!
# rc += bfaslint.run()
sys.exit(rc)
