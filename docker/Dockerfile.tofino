# and 'jarvis' for jarvis image
ARG MODEL_TAG=tofino_master

FROM barefootnetworks/model:${MODEL_TAG}

MAINTAINER bfn-docker <bfn-docker@barefootnetworks.com>
ENV DEBIAN_FRONTEND noninteractive

ENV P4C_DEPS autoconf \
             automake \
             bison \
             build-essential \
	     curl \
             flex \
             g++-6 \
             libboost1.67-dev \
             libfl-dev \
             libgc-dev \
             libgmp-dev \
             libssl-dev \
             libtool \
             python-dev \
             python-pip \
             python3-pip \
	     unzip


ENV P4C_RUNTIME_DEPS cpp \
                     cmake \
                     ethtool \
                     libgc1c2 \
                     libgmp10 \
                     libgmpxx4ldbl \
                     libnl-genl-3-dev \
                     libnl-route-3-dev \
                     libssl1.0.0 \
                     pkg-config \
                     psmisc \
                     python-ipaddr \
                     python-scapy \
                     python-setuptools \
                     python-yaml \
                     sudo \
                     tcpdump \
                     libgoogle-perftools-dev \
                     libxml-simple-perl \
                     doxygen \
                     aspell

ENV PYTHON3_DEPS Cython \
                 distro \
                 ipaddr \
                 jsl \
                 jsonschema \
                 packaging \
                 pexpect \
                 ply==3.9 \
                 prettytable \
                 pyinstaller \
                 pyroute2 \
                 pyyaml \
                 scapy \
                 texttable \
                 xlsxwriter \
                 ctypesgen

# Packages for jarvis image
ENV DEV_PKGS vim \
             gdb \
             telnet \
             distcc

# Packages for release image
ENV REL_PKGS wget

# Clean up default instance of libboost1.58 from base ubuntu image
RUN apt-get --purge remove -y libboost*-dev

RUN add-apt-repository ppa:ubuntu-toolchain-r/test && \
    add-apt-repository ppa:mhier/libboost-latest && \
    apt-get update && \
    apt-get install -y $P4C_DEPS $P4C_RUNTIME_DEPS && \
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 10 && \
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 20 && \
    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 10 && \
    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-6 20

# Default to using 2 make jobs, which is a good default for CI. If you're
# building locally or you know there are more cores available, you may want to
# override this.
ARG MAKEFLAGS=-j2
ARG BFN_P4C_GIT_SHA="UNKNOWN"
# Use 'jarvis' to build a jarvis image
#     'release' to build a release image
#     'glass' to build a base image for glass
ARG BUILD_FOR=tofino

RUN (test "$BUILD_FOR" = "tofino" && echo "Building for tofino") || \
    (test "$BUILD_FOR" = "jarvis" && apt-get install -y $DEV_PKGS) || \
    (test "$BUILD_FOR" = "release" && apt-get install -y $REL_PKGS) || \
    (test "$BUILD_FOR" = "glass" && echo "Building for glass")

WORKDIR /tmp
RUN (test "$BUILD_FOR" = "release" && \
     wget http://downloads.sourceforge.net/project/boost/boost/1.67.0/boost_1_67_0.tar.bz2 && \
     tar xvjf boost_1_67_0.tar.bz2 && \
     cd boost_1_67_0 && \
     ./bootstrap.sh --prefix=/usr/local && \
     ./b2 -$MAKEFLAGS --build-type=minimal variant=release && \
     ./b2 install -$MAKEFLAGS --build-type=minimal variant=release && \
     cd /tmp && rm -rf boost_1_67_0*) || \
    (test "$BUILD_FOR" = "tofino" && echo "Building for tofino") || \
    (test "$BUILD_FOR" = "jarvis" && echo "Building for jarvis") || \
    (test "$BUILD_FOR" = "glass" && echo "Building for glass")

WORKDIR /tmp
RUN (curl -L https://artifacts.barefootnetworks.com/repository/generic/third-party/z3-4.8.7-x64-ubuntu-16.04.zip -o z3-4.8.7-x64-ubuntu-16.04.zip && \
     unzip z3-4.8.7-x64-ubuntu-16.04.zip && \
     cd z3-4.8.7-x64-ubuntu-16.04 && \
     cp bin/libz3.a /usr/local/lib/ && \
     cp bin/libz3.so /usr/local/lib/ && \
     cp bin/z3 /usr/local/bin/ && \
     cp include/*.h /usr/local/include/ && \
     cd /tmp && rm -rf z3-*)

# Use 'release' if you don't wish to keep the build artifacts
ARG IMAGE_TYPE=test
# Use 'true' if you wish to build glass for p4v or p4i
ARG BUILD_GLASS=false
# Use 'true' if you wish to generate ref outputs for p4i
ARG GEN_REF_OUTPUTS=false

# testing dependencies
RUN apt-get install -y net-tools

RUN pip install jsl pexpect crc16 crcmod simplejson tenjin ipaddress packaging pyinstaller prettytable ctypesgen
# Install ply 3.9 for compatibility with p4c-tofino
RUN pip install ply==3.9
# Install jsonschema 2.6 for compatibility with pyinstaller
RUN pip install jsonschema==2.6
# Install python3 packages
RUN pip3 install --upgrade pip && pip3 install $PYTHON3_DEPS
# Force /usr/bin to be before /usr/local/bin because bf-driver
# installs a version of python3 in /usr/local and that version is not
# picking up modules installed with pip3
ENV PATH="/usr/bin:${PATH}"

COPY scripts/ptf_hugepage_setup.sh /bfn/ptf_hugepage_setup.sh
COPY docker/docker_entry_point.sh /bfn/docker_entry_point.sh
COPY p4-tests/p4testutils/veth_setup.sh /bfn/veth_setup.sh

# Workaround as conditional COPY not supported in Dockerfile
COPY . /bfn/bf-p4c-compilers/
RUN (test "$BUILD_FOR" = "tofino" && echo "Building for tofino") || \
    (test "$BUILD_FOR" = "jarvis" && rm -rf /bfn/bf-p4c-compilers/) || \
    (test "$BUILD_FOR" = "release" && echo "Building for release") || \
    (test "$BUILD_FOR" = "glass" && echo "Building for glass")

WORKDIR /bfn/bf-p4c-compilers
ENV LDFLAGS="-Wl,-s"
RUN (test "$BUILD_FOR" = "tofino" && /usr/local/bin/ccache --zero-stats && \
    ./bootstrap_bfn_compilers.sh -DCMAKE_BUILD_TYPE=RelWithDebInfo \
                                 -DINSTALL_LIBDYNHASH=OFF \
                                 -DENABLE_P4C_GRAPHS=OFF \
                                 -DENABLE_BMV2=OFF -DENABLE_P4TEST=OFF \
                                 -DENABLE_EBPF=OFF -DENABLE_STF2PTF=OFF \
                                 && \
    cd build && \
    make && \
    make install) || \
    (test "$BUILD_FOR" = "jarvis") || \
    (test "$BUILD_FOR" = "release" && /usr/local/bin/ccache --zero-stats && \
                                   ./scripts/package_p4c_for_tofino.sh --build-dir build) || \
    (test "$BUILD_FOR" = "glass" && /usr/local/bin/ccache --zero-stats && \
    ./bootstrap_bfn_compilers.sh -DCMAKE_BUILD_TYPE=RELEASE \
                                 -DINSTALL_LIBDYNHASH=OFF \
                                 -DENABLE_P4C_GRAPHS=OFF \
                                 -DENABLE_BMV2=OFF -DENABLE_P4TEST=OFF \
                                 -DENABLE_EBPF=OFF -DENABLE_STF2PTF=OFF \
                                 -DENABLE_STATIC_LIBS=ON \
                                 -DENABLE_BAREFOOT_INTERNAL=OFF \
                                 -DENABLE_GTESTS=OFF)

WORKDIR /bfn/bf-p4c-compilers
RUN ((test "$BUILD_FOR" = "tofino" || test "$BUILD_FOR" = "release" || \
     test "$BUILD_FOR" = "glass") && \
     /usr/local/bin/ccache -p --show-stats && \
    apt-get autoremove --purge -y && \
    rm -rf ~/.cache/* ~/.ccache/* /var/cache/apt/* /var/lib/apt/lists/* && \
    rm -rf bf-asm/walle/build/* && \
    find . -name '*.o' -type f -delete && \
    find . -name '*.a' -type f -delete) || \
    (test "$BUILD_FOR" = "jarvis")

# make and install glass if BUILD_GLASS=true
WORKDIR /bfn/bf-p4c-compilers/glass/p4-hlir/
RUN (test "$BUILD_GLASS" = "true" && \
     pip install -r requirements.txt && \
     python setup.py install) || \
    (test "$BUILD_GLASS" = "false")

WORKDIR /bfn/bf-p4c-compilers/glass
RUN (test "$BUILD_GLASS" = "true" && \
     python setup.py install) || \
    (test "$BUILD_GLASS" = "false")

# Generate reference outputs for p4i if GEN_REF_OUTPUTS=true
WORKDIR /bfn/bf-p4c-compilers/scripts/gen_reference_outputs
RUN (test "$GEN_REF_OUTPUTS" = "true" && \
     set +e && \
     python -u gen_ref_outputs.py) || \
    (test "$GEN_REF_OUTPUTS" = "false")

# Delete git history
WORKDIR /bfn/bf-p4c-compilers
RUN rm -rf .git

WORKDIR /bfn/
RUN (test "$IMAGE_TYPE" = "release" && rm -rf bf-p4c-compilers) || \
    (test "$IMAGE_TYPE" = "test")

# cleanup space on the image
RUN apt-get clean -y && apt-get autoclean -y

# setup huge pages
ENTRYPOINT ["/bfn/docker_entry_point.sh"]
