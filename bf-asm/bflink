#!/bin/sh

# Copyright (c) 2015-2017 Barefoot Networks, Inc.

# All Rights Reserved.

# NOTICE: All information contained herein is, and remains the
# property of Barefoot Networks, Inc. and its suppliers, if any. The
# intellectual and technical concepts contained herein are proprietary
# to Barefoot Networks, Inc. and its suppliers and may be covered by
# U.S. and Foreign Patents, patents in process, and are protected by
# trade secret or copyright law. Dissemination of this information or
# reproduction of this material is strictly forbidden unless prior
# written permission is obtained from Barefoot Networks, Inc.

# No warranty, explicit or implicit is provided, unless granted under
# a written agreement with Barefoot Networks, Inc.


WALLE=""
CHIP="tofino"
OUT="tofino.bin"
objs=""
object_files=""
base_program=""
debug_info=false
tmpdir=""
pipe_args=""

tempfile() {
    file=$(basename $1 $2)
    orig=file
    ctr=1
    while [ -r $tmpdir/$file ]; do
        file=$ctr-$file
        ctr=$((ctr + 1))
    done
    echo $file
}

while [ $# -gt 0 ]; do
    case $1 in
    -b)
        base_program="$2"
        shift ; shift;;
    -g)
        debug_info=true
        shift;;
    -o)
        OUT="$2"
        shift ; shift ;;
    --walle|-w)
        WALLE="$2"
        shift ; shift ;;
    --target|-t)
        CHIP="$2"
        shift ; shift ;;
    --singlepipe|-s)
        pipe_args="--top memories.pipe --top regs.pipe"
        shift ;;
    --allpipes|-a)
        pipe_args=""
        shift ;;
    *.json.Z)
        if [ -z "$tmpdir" ]; then
            tmpdir=$(mktemp -d)
        fi
        file=$(tempfile $1 .Z)
        gunzip -c $1 >$tmpdir/$file
        objs="$objs $tmpdir/$file"
        object_files="$object_files $1"
        shift ;;
    *.json.gz)
        if [ -z "$tmpdir" ]; then
            tmpdir=$(mktemp -d)
        fi
        file=$(tempfile $1 .gz)
        gunzip -c $1 >$tmpdir/$file
        objs="$objs $tmpdir/$file"
        object_files="$object_files $1"
        shift ;;
    *.json.bz)
        if [ -z "$tmpdir" ]; then
            tmpdir=$(mktemp -d)
        fi
        file=$(tempfile $1 .bz)
        bzcat $1 >$tmpdir/$file
        objs="$objs $tmpdir/$file"
        object_files="$object_files $1"
        shift ;;
    *.json.bz2)
        if [ -z "$tmpdir" ]; then
            tmpdir=$(mktemp -d)
        fi
        file=$(tempfile $1 .bz2)
        bzcat $1 >$tmpdir/$file
        objs="$objs $tmpdir/$file"
        object_files="$object_files $1"
        shift ;;
    *.json)
        objs="$objs $1"
        object_files="$object_files $1"
        shift ;;
    *)
        echo >&2 "Unknown argument $1"
        shift ;;
    esac
done

if [ ! -x "$WALLE" ]; then
    if [ -e "$WALLE" ]; then
        echo "$WALLE must be executable"
    else
        echo "4: $WALLE"
        echo >&2 "Can't find walle"
    fi
    exit 1
fi

$WALLE --target $CHIP -o $OUT $objs $pipe_args

# cleanup
output_dir=$(dirname $OUT)
if [ -z "$output_dir" ]; then
    output_dir="./"
fi
for f in $object_files ; do
    if [ -e $f ]; then rm -f $f ; fi
done
if [ ! -z "$base_program" ] ; then
    pp=$output_dir/${base_program}.p4i
    if ! $debug_info && test -e $pp ; then rm -f $pp; fi
fi
if ! $debug_info && test -e $output_dir/bfas.config.log ; then
    rm -f $output_dir/bfas.config.log
fi
# if we uncompressed, remove the directory
if [ -d "$tmpdir" ]; then
    rm -rf $tmpdir
fi
