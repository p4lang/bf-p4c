#!/bin/sh

TIMEOUT=30
TIME_COMMAND="" # don't time commands
verbose=false
debug=false

die() {
    if [ $# -gt 0 ]; then
        echo >&2 "$@"
    fi
    exit 1
}

run() {
    if $verbose; then
        echo "$@"
    fi
    $TIME_COMMAND timeout $TIMEOUT "$@"
    status=$?
    if [ $status -eq 124 ]; then
        echo >&2 $1 TIMEOUT
    elif [ $status -gt 0 ]; then
        echo >&2 $1 FAILED
    fi
    return $status
}

findbin() {
    dir=$(pwd -P)
    while [ "$dir" != "/" ]; do
        if [ -d "$dir/$1" ]; then
            x=""
            for f in $(find $(readlink -f "$dir/$1") -name $2 -type f); do
                if [ -z "$x" -o "$f" -nt "$x" ]; then
                    x="$f"
                fi
            done
            if [ -x "$x" ]; then
                echo $x
                return
            fi
        fi
        dir=$(dirname $dir)
    done
    echo $2
}

srcdir=${1%/}
execdir=$(dirname $0)
if [ ! -d "$srcdir" ]; then
    die "Usage: $0 <srcdir> <test-source>"
fi
shift

tofinodir=${execdir#$srcdir/}
if [ "$tofinodir" = "$execdir" -a "$srcdir" != "." ]; then
    die "$tofinodir is not under $srcdir"
fi

P4C=./p4c-tofino

while [ $# -gt 1 ]; do
    case $1 in
    -h|-help|--help)
        echo >&2 "p4c-tofino test runner options"
        echo >&2 "   -v             verbose -- print commands before running them"
        echo >&2 "   -gdb           run p4c-tofino under gdb"
        echo >&2 "   -time          time commands as they run"
        echo >&2 "   -to <sec>      timeout programs after <sec> seconds (default 30)"
        echo >&2 "other arguments passed to p4c-tofino:"
        $P4C --help
        exit 0
        ;;
    -db|-gdb)
        debug=true
        ;;
    -to)
        TIMEOUT=$2
        shift
        ;;
    -time)
        TIME_COMMAND="time"
        ;;
    -v) if $verbose || $debug; then
            P4C_ARGS="$P4C_ARGS $1"
        fi
        verbose=true
        ;;
    *) P4C_ARGS="$P4C_ARGS $1"
        ;;
    esac
    shift
done

if [ ! -r $1 ]; then
    die "Can't read $1"
fi
file=$1

if [ "${file#$srcdir/}" = "$file" -a "$srcdir" != "." ]; then
    die "$file is not under $srcdir"
fi

testdir=tofino/$(dirname ${file#$srcdir/})
name=$(basename $file .p4)

P4C_ARGS="$P4C_ARGS -D__TARGET_TOFINO__"
if [ $(expr "$file" : ".*v1_2") -gt 0 ]; then
    P4C_ARGS="$P4C_ARGS --p4v 1.2"
else
    P4C_ARGS="$P4C_ARGS -I$execdir/v1_samples/p4_lib"
fi

if [ ! -x $P4C ]; then
    die "Can't find $P4C"
fi

if $debug; then
    exec gdb --args $P4C $P4C_ARGS $file -o $testdir/$name.tfa
fi

if [ $(expr "$file" : ".*_errors") -gt 0 ]; then
    if run $P4C $P4C_ARGS $file -o $testdir/$name.tfa; then
        echo >&2 "$P4C did not give an error when expected"
        exit 1
    fi
    exit 0
fi

rm -f $testdir/$name.tfa
run $P4C $P4C_ARGS $file -o $testdir/$name.tfa || die

if [ ! -r $testdir/$name.tfa ]; then
    echo >&2 "$P4C did not give an error but did not generate output either"
    exit 1
fi

if [ -r ${file%.p4}.stf ]; then
    TFAS=$(findbin tofino-asm tfas)
    TFLN=$(findbin tofino-asm tflink)
    STF=$(findbin model simple_test_harness)

    test=`pwd`/${file%.p4}.stf
    cd $testdir
    mkdir -p $name.out

    rm -f $name.out/*.cfg.json
    run $TFAS -vvvvl $name.out/tfas.config.log $name.tfa || die
    run $TFLN $name.out/*.cfg.json -o $name.out/tofino.bin || die
    run $STF -l $name.out $test || die
fi
