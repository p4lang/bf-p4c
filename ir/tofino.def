#emit
// Types needed by the back-end IR
#include "backends/tofino/ir/resources.h"
#end

class Tofino_Pipe {
#noconstructor
#emit
    struct thread_t {
        const Tofino_Parser     *parser;
        const MAU_TableSeq      *mau;
        const Tofino_Deparser   *deparser;
        bool operator==(const thread_t &a) const {
            return parser == a.parser && mau == a.mau && deparser == a.deparser; }
    } thread[2] = { { nullptr, nullptr, nullptr } };  // INGRESS and EGRESS
#end
#apply
    equality{ return thread[0] == a.thread[0] && thread[1] == a.thread[1]; }
    visitchildren{
        if (auto *th = dynamic_cast<ThreadVisitor *>(&v)) {
            v.visit(thread[th->thread].parser);
            v.visit(thread[th->thread].mau);
            v.visit(thread[th->thread].deparser);
        } else {
            for (auto &th : thread) {
                v.visit(th.parser);
                v.visit(th.mau);
                v.visit(th.deparser); } } }
}
