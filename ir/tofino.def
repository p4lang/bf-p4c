#emit
enum gress_t { INGRESS, EGRESS };
inline std::ostream &operator<<(std::ostream &out, gress_t gress) {
    return out << (gress ? "egress" : "ingress"); }
#end

#emit_impl
#include "tofino/ir/thread_visitor.h"
#end

class Tofino::Pipe {
    Metadata    standard_metadata; // not visited
#noconstructor
#emit
    struct thread_t {
        const Tofino::Parser    *parser;
        const MAU::TableSeq     *mau;
        const Tofino::Deparser  *deparser;
        bool operator==(const thread_t &a) const {
            return parser == a.parser && mau == a.mau && deparser == a.deparser; }
    } thread[2] = { { nullptr, nullptr, nullptr } };  // INGRESS and EGRESS
#end
#apply
    operator== { return standard_metadata == a.standard_metadata &&
                        thread[0] == a.thread[0] && thread[1] == a.thread[1]; }
    visit_children {
        if (auto *th = dynamic_cast<ThreadVisitor *>(&v)) {
            v.visit(thread[th->thread].parser);
            v.visit(thread[th->thread].mau);
            v.visit(thread[th->thread].deparser);
        } else {
            for (auto &th : thread) {
                v.visit(th.parser);
                v.visit(th.mau);
                v.visit(th.deparser); } } }
}
