#!/bin/bash

fast=false;
verbose=false

shopt -s nullglob
set -o pipefail

TESTDIR=$(cd $(dirname $0); pwd -P)

TRY_GLSC="
    #$HOME/p4c-tofino/build/lib.linux-x86_64-2.7/p4c_tofino/shell.py
    $HOME/p4c-tofino/shell.py
    $HOME/p4c-tofino/p4c_tofino/shell.py
    $PWD/../p4c-tofino/shell.py
    $PWD/../p4c-tofino/p4c_tofino/shell.py
    $PWD/../../p4c-tofino/shell.py
    $PWD/../../p4c-tofino/p4c_tofino/shell.py
    $TESTDIR/../../p4c-tofino/shell.py
    $TESTDIR/../../p4c-tofino/p4c_tofino/shell.py
"

TRY_STF="
    $HOME/model/tests/simple_test_harness/simple_test_harness
    $HOME/model/*/tests/simple_test_harness/simple_test_harness
    $PWD/../model/tests/simple_test_harness/simple_test_harness
    $PWD/../model/*/tests/simple_test_harness/simple_test_harness
    $PWD/../../model/tests/simple_test_harness/simple_test_harness
    $PWD/../../model/*/tests/simple_test_harness/simple_test_harness
    $TESTDIR/../../model/tests/simple_test_harness/simple_test_harness
    $TESTDIR/../../model/*/tests/simple_test_harness/simple_test_harness
"

TIME=false
PARALLEL=1
if [[ $MAKEFLAGS =~ ^-j\ *[0-9]+$ ]]; then PARALLEL=${MAKEFLAGS#-j}; fi

while expr "$1" : - >/dev/null; do
    case $1 in
    -f) fast=true
        ;;
    -stage*|-work*)
        TRY_GLSC="$HOME/p4c-tofino$1/p4c_tofino/shell.py"
        ;;
    -t)
        TIME=true
        ;;
    -j)
        shift
        if [[ $1 =~ ^[0-9]+$ ]]; then
            PARALLEL=$1
        else
            echo 2>& "invalid number -j $1"
        fi
        ;;
    -j[1-9]|-j[1-9][0-9])
        PARALLEL=${1#-j}
        ;;
    -v)
        verbose=true
        ;;
    -*)
        echo >&2 "unknown argumnet $1"
        ;;
    esac
    shift
done

#glsc_args="--placement-order ingress_before_egress --libpd --placement secret"
glsc_args="--placement-order ingress_before_egress --no-bin"

trap 'exit' 2

if [ $# -eq 0 ]; then
    set *.p4
fi

count=$#

rm -rf faillog.txt
FAILLOG=$(pwd -P)/faillog.txt

echo -n "Test run started at " >$FAILLOG
date >> $FAILLOG

if [ ! -x "$GLSC" ]; then
    for f in $TRY_GLSC; do
        if [ -x $f ]; then
            GLSC=$f
            break
        fi
    done
fi

for f in $TRY_STF; do
    if [ -x "$f" -a "$f" -nt "$STF" ]; then
        STF="$f"
    fi
done

if [ -x "$GLSC" ]; then
    echo "Using $GLSC"
else
    echo >&2 "Can't find p4c-tofino executable"
    GLSC=false
fi

if [ -x "$STF" ]; then
    echo "Using $STF"
fi

function findbin () {
    if [ -x "$PWD/$1" ]; then
        echo $PWD/$1
    elif [ -x "$PWD/../$1" ]; then
        echo $PWD/../$1
    elif [ -x "$TESTDIR/../$1" ]; then
        echo $TESTDIR/../$1
    elif type $1 >/dev/null 2>&1; then
        echo $1
    else
        echo >&2 "Can't find $1 executable"
        echo false
    fi
}

function not() { if "$@"; then return 1; else return 0; fi }

if [ ! -x "$TFAS" ]; then
    TFAS=$(findbin tfas)
fi
if [ ! -x "$TFLINK" ]; then
    TFLINK=$(findbin tflink)
fi
if [ ! -x "$REFLOW" ]; then
    REFLOW=$(findbin reflow)
fi
if [ ! -x "$JSON_DIFF" ]; then
    JSON_DIFF=$(findbin json_diff)
fi
if [ -z "$DIFF" ]; then
    #DIFF="zdiff -u"
    DIFF=$JSON_DIFF
fi

if [ -r $TESTDIR/ctxt_json_ignore ]; then
    CTXT_DIFFARGS="-l handle -l start_offset -l entry_number -i @$TESTDIR/ctxt_json_ignore"
else
    CTXT_DIFFARGS="-al handle -i table_type"
fi

TIMEOUT_COMMAND=$(which gtimeout || which timeout)
run() {
    if $verbose; then
        echo "$@" >/dev/tty
    fi
    if [ -z "$TIMEOUT" ]; then
        $TIME_COMMAND "$@"
    else
        $TIME_COMMAND $TIMEOUT_COMMAND --foreground $TIMEOUT "$@"
    fi
    status=$?
    if [ $status -eq 124 ]; then
        echo >&2 $1 TIMEOUT
    elif [ $status -gt 128 ]; then
        echo >&2 $1 CRASH with signal $(expr $status - 128)
    elif [ $status -gt 0 ]; then
        echo >&2 $1 FAILED
    fi
    return $status
}


function test_p4() {
    p4file="$1"
    pushd $(dirname $p4file) >/dev/null
    name=$(basename $p4file .p4)
    mkdir -p $name.out
    expect_fail=$(sed -n "/^$name.p4/s/[^ ]* *//p" expected_failures.txt 2>/dev/null | head -1)
    cd $name.out
    ok=true
    rv=0
    fail_type=""
    #echo "about to run $name.p4, expecting ${expect_fail:-no} failure"
    msg="$p4file"

    start=`date +%s`
    if $fast && [ -r $name.tfa ]; then
        true
    else 
        rm -f $name.tfa
        if run $GLSC -o . --verbose 2 -vl 2 -S -G $glsc_args ../$name.p4 </dev/null >glsc.log 2>&1; then
            if [ out.tfa -nt $name.tfa ]; then
                rm -f $name.tfa
                ln -s out.tfa $name.tfa
            fi
            if [ ! -r $name.tfa ]; then
                msg="$msg p4 compile failed to produce asm"
                fail_type="compile"
                rv=1
                ok=false
            fi
        else
            msg="$msg p4 compile failed"
            fail_type="compile"
            rv=1
            ok=false
        fi
        if not $ok && ( [ $count -eq 1 ] || [ "$expect_fail" != "compile" ] ); then
            flock $FAILLOG -c "echo '$p4file:' >>$FAILLOG; sed 's/^/ /' glsc.log >>$FAILLOG"
        fi
    fi
    glsc_cfg=.
    if $ok; then
        rm -f $name.out/*.json
        if [ -d cfg ]; then
            glsc_cfg=cfg
        fi
    fi
    for f in $glsc_cfg/*.json; do
        if $REFLOW $f | gzip -9 > $f.gz; then
            rm $f
        fi
    done
    tfas_succeeded=false
    if $ok && run $TFAS -Mvvvvl tfas.config.log $name.tfa >tfas.log 2>&1; then
        tfas_succeeded=true
        for f in $name.out/*.cfg.json; do
            if $REFLOW $f | gzip -9 > $f.gz; then
                rm $f
            fi
        done
        for f in $name.out/*.cfg.json.gz; do
            if zcmp -s $f $glsc_cfg/$(basename $f); then
                continue
            elif [ "$f" = "$name.out/regs.pipe.cfg.json.gz" ]; then
                $JSON_DIFF -i mau $f $glsc_cfg/$(basename $f) || echo "***json_diff died"
                continue
            fi
            $DIFF $f $glsc_cfg/$(basename $f)
        done > json_diff.txt
        glsc_ctxt=${name}_context_llir.json
        if [ -d context ]; then
            glsc_ctxt=context/mau.context.json
        fi
        if [ -r $name.out/tbl-cfg ]; then
            { $JSON_DIFF $CTXT_DIFFARGS $name.out/tbl-cfg $glsc_ctxt || echo "***json_diff died"; } >> json_diff.txt
        fi
        cnt=$(grep -Ev '^\+\+\+|^---|"int_inj"' json_diff.txt | grep -Ec '^\+|^-')
        if [ $cnt -gt 0 ]; then
            msg="$msg mismatch"
            fail_type="mismatch"
            rv=1
            if [ $count -eq 1 ] || [ "$expect_fail" != "mismatch" ]; then
                flock $FAILLOG -c "echo '$p4file:' >>$FAILLOG; cat json_diff.txt >>$FAILLOG"
            fi
            ok=false
        else
            msg="$msg pass"
            let pass++
        fi
    elif $ok; then
        msg="$msg tfas failed"
        fail_type="tfas"
        rv=1
        if [ $count -eq 1 ] || [ "$expect_fail" != "tfas" ]; then
            flock $FAILLOG -c "echo '$p4file:' >>$FAILLOG; sed -e 's/^/ /' -e '/\n/!a\' tfas.log >>$FAILLOG"
        fi
        ok=false
    fi
    if [ "$expect_fail" != "" ]; then
        if $ok; then
            msg="$msg (UNEXPECTED PASS -- expected $expect_fail failure)"
            rv=3
        elif [ "$expect_fail" != "$fail_type" ]; then
            msg="$msg (expected $expect_fail failure)"
            if [ "$fail_type" = "mismatch" -o "$expect_fail" = "compile" ]; then
                rv=2
            fi
        else
            msg="$msg (expected)"
            rv=2
        fi
    fi
    if $TIME; then
        let elapsed=`date +%s`-start
        let min=elapsed/60
        let sec=elapsed%60
        if [ $sec -lt 10 ]; then
            sec=0$sec
        fi
        msg="$msg ($min:$sec)"
    fi
    echo "$msg"
    popd >/dev/null
    return $rv
}

function test_stf() {
    msg="$1"
    pushd $(dirname $1) >/dev/null
    name=$(basename $1 .stf)
    rv=0
    if [ ! -x $STF ]; then
        echo "$msg simple_test_framework not available"
        rv=4
    elif [ -d $name.out ]; then
        cd $name.out
        start=`date +%s`
        linked=false
        if [ -r $name.out/tofino.bin ]; then
            linked=true
            for f in $name.out/*.cfg.json*; do
                if [ $f -nt $name.out/tofino.bin ]; then
                    linked=false
                    break
                fi
            done
        fi
        if $linked || run $TFLINK -o $name.out/tofino.bin $name.out/*.cfg.json* >/dev/null 2>&1; then
            export TOFINO_BIN=$name.out/tofino.bin
            export TABLE_CONFIG=$name.out/tbl-cfg
            if run "$STF" ../$name.stf >stf.txt 2>&1; then
                msg="$msg pass"
            else
                msg="$msg fail"
                rv=1
                flock $FAILLOG -c "echo '$1:' >>$FAILLOG; sed -e 's/^/  /' stf.txt >>$FAILLOG"
            fi
        else
            msg="$msg failed"
            rv=1
        fi
        if $TIME; then
            let elapsed=`date +%s`-start
            let min=elapsed/60
            let sec=elapsed%60
            if [ $sec -lt 10 ]; then
                sec=0$sec
            fi
            msg="$msg ($min:$sec)"
        fi
        echo "$msg"
    else
        echo "$msg not built"
        rv=4
    fi
    popd >/dev/null
    return $rv
}

pass=0
fail=0
skip=0
expected_fail=0
unexpected_pass=0
running=0

function wait_1() {
    wait -n
    case $? in
    0)  let pass++
        ;;
    1)  let fail++
        ;;
    2)  let fail++
        let expected_fail++
        ;;
    3)  let pass++
        let unexpected_pass++
        ;;
    4)  let skip++
        ;;
    esac
    let running--
}

if $verbose; then echo "running $PARALLEL threads"; fi

for file in "$@"; do
    if (( running >= PARALLEL )); then
        wait_1
    fi
    if [ "${file##*.}" == "p4" ]; then
        let running++
        test_p4 $file &
    elif [ "${file##*.}" == "stf" ]; then
        let running++
        test_stf $file &
    else
        echo "unrecognized file type $file"
    fi
done

while (( running > 0 )); do
    wait_1
done

if [ $pass -ne 1 ]; then
    pmsg="$pass tests passed"
else
    pmsg="1 test passed"
fi
if [ $fail -ne 1 ]; then
    fmsg="$fail tests failed"
else
    fmsg="1 test failed"
fi

if [ $unexpected_pass -gt 1 ]; then
    uxp=" ($unexpected_pass tests unexpectedly pass)"
elif [ $unexpected_pass -gt 0 ]; then
    uxp=" ($unexpected_pass test unexpectedly passes)"
else
    uxp=""
fi

echo "$pmsg, $fmsg ($expected_fail expected)$uxp"
echo "$pmsg, $fmsg ($expected_fail expected)$uxp" >>$FAILLOG

if [ $fail -ne $expected_fail ]; then
    exit 1
fi
