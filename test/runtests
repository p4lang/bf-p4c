#!/bin/bash

fast=false;

shopt -s nullglob

TESTDIR=$(cd $(dirname $0); pwd -P)

TRY_GLSC="
    #$HOME/p4c-tofino/build/lib.linux-x86_64-2.7/p4c_tofino/shell.py
    $HOME/p4c-tofino/shell.py
    $HOME/p4c-tofino/p4c_tofino/shell.py
    $PWD/../p4c-tofino/shell.py
    $PWD/../p4c-tofino/p4c_tofino/shell.py
    $PWD/../../p4c-tofino/shell.py
    $PWD/../../p4c-tofino/p4c_tofino/shell.py
    $TESTDIR/../../p4c-tofino/shell.py
    $TESTDIR/../../p4c-tofino/p4c_tofino/shell.py
"

TIME=false

while expr "$1" : - >/dev/null; do
    case $1 in
    -f) fast=true
        ;;
    -stage*|-work*)
        TRY_GLSC="$HOME/p4c-tofino$1/p4c_tofino/shell.py"
        ;;
    -t)
        TIME=true
        ;;
    -*)
        echo >&2 "unknown argumnet $1"
        ;;
    esac
    shift
done

#glsc_args="--placement-order ingress_before_egress --libpd --placement secret"
glsc_args="--placement-order ingress_before_egress --libpd --no-bin"

trap 'exit' 2

if [ $# -eq 0 ]; then
    set *.p4
fi

count=$#

rm -rf faillog.txt
FAILLOG=$(pwd -P)/faillog.txt

if [ ! -x "$GLSC" ]; then
    for f in $TRY_GLSC; do
        if [ -x $f ]; then
            GLSC=$f
            break
        fi
    done
fi

if [ -x "$GLSC" ]; then
    echo "Using $GLSC"
else
    echo >&2 "Can't find p4c-tofino executable"
    GLSC=false
fi

function findbin () {
    if [ -x "$PWD/../$1" ]; then
        echo $PWD/../$1
    elif [ -x "$TESTDIR/../$1" ]; then
        echo $TESTDIR/../$1
    elif type $1 >/dev/null 2>&1; then
        echo $1
    else
        echo >&2 "Can't find $1 executable"
        echo false
    fi
}

function not() { if "$@"; then return 1; else return 0; fi }

if [ ! -x "$TFAS" ]; then
    TFAS=$(findbin tfas)
fi
if [ ! -x "$REFLOW" ]; then
    REFLOW=$(findbin reflow)
fi
if [ ! -x "$JSON_DIFF" ]; then
    JSON_DIFF=$(findbin json_diff)
fi
if [ -z "$DIFF" ]; then
    DIFF="diff -u"
fi

if [ -r $TESTDIR/ctxt_json_ignore ]; then
    CTXT_DIFFARGS="-l handle -i @$TESTDIR/ctxt_json_ignore"
else
    CTXT_DIFFARGS="-al handle -i table_type"
fi

pass=0
fail=0
expected_fail=0

for p4file in "$@"; do
    pushd $(dirname $p4file) >/dev/null
    name=$(basename $p4file .p4)
    mkdir -p $name.out
    expect_fail=$(sed -n "/^$name.p4/s/[^ ]* *//p" expected_failures.txt 2>/dev/null)
    cd $name.out
    ok=true
    fail_type=""
    #echo "about to run $name.p4, expecting ${expect_fail:-no} failure"
    echo -n $p4file
    start=`date +%s`
    if $fast && [ -r $name.tfa ]; then
        need_reflow=false
    else 
        rm -f $name.tfa
        if $GLSC -o . --verbose 2 -vl 2 -S -G $glsc_args ../$name.p4 </dev/null >glsc.log 2>&1; then
            need_reflow=true
            if [ out.tfa -nt $name.tfa ]; then
                rm -f $name.tfa
                ln -s out.tfa $name.tfa
            fi
            if [ ! -r $name.tfa ]; then
                echo -n " p4 compile failed to produce asm"
                fail_type="compile"
                let fail++
                ok=false
            fi
        else
            echo -n " p4 compile failed"
            fail_type="compile"
            let fail++
            ok=false
        fi
        if not $ok && ( [ $count -eq 1 ] || [ "$expect_fail" != "compile" ] ); then
            echo "$p4file:" >> $FAILLOG
            sed 's/^/ /' glsc.log >> $FAILLOG
        fi
    fi
    glsc_cfg=.
    if $ok; then
        rm -f $name.out/*.json
        if [ -d cfg ]; then
            glsc_cfg=cfg
        fi
    fi
    if $ok && $TFAS -vvvvl tfas.config.log $name.tfa >tfas.log 2>&1; then
        for f in $name.out/*.cfg.json; do
            if [ "$f" = "$name.out/regs.pipe.cfg.json" ]; then
                $JSON_DIFF -i mau $f $glsc_cfg/$(basename $f)
                continue
            fi
            if $REFLOW $f >tmp.json 2>/dev/null; then
                mv tmp.json $f
            fi
            if $need_reflow && $REFLOW $glsc_cfg/$(basename $f) >tmp.json 2>/dev/null; then
                mv tmp.json $glsc_cfg/$(basename $f)
            fi
            $DIFF $f $glsc_cfg/$(basename $f)
        done > json_diff.txt
        glsc_ctxt=${name}_context_llir.json
        if [ -d context ]; then
            glsc_ctxt=context/mau.context.json
        fi
        if [ -r $name.out/tbl-cfg ]; then
            $JSON_DIFF $CTXT_DIFFARGS $name.out/tbl-cfg $glsc_ctxt >> json_diff.txt
        fi
        cnt=$(grep -Ev '^\+\+\+|^---|"int_inj"' json_diff.txt | grep -Ec '^\+|^-')
        if [ $cnt -gt 0 ]; then
            echo -n " mismatch"
            fail_type="mismatch"
            let fail++
            if [ $count -eq 1 ] || [ "$expect_fail" != "mismatch" ]; then
                echo "$p4file:" >> $FAILLOG
                cat json_diff.txt >> $FAILLOG
            fi
            ok=false
        else
            echo -n " pass"
            let pass++
        fi
    elif $ok; then
        echo -n " tfas failed"
        fail_type="tfas"
        let fail++
        if [ $count -eq 1 ] || [ "$expect_fail" != "tfas" ]; then
	    echo "$p4file:" >> $FAILLOG
	    sed -e 's/^/ /' -e '/\n/!a\' tfas.log >> $FAILLOG
	fi
        ok=false
        if $need_reflow; then
            # we ran the compiler and tfas failed, so reflow the compiler outputs
            # so that later -f runs will work
            for f in $glsc_cfg/*.json; do
                if $REFLOW $f >tmp.json 2>/dev/null; then
                    mv tmp.json $f
                fi
            done
        fi
    fi
    if [ "$expect_fail" != "" ]; then
        if $ok; then
            echo -n " (UNEXPECTED PASS -- expected $expect_fail failure)"
        elif [ "$expect_fail" != "$fail_type" ]; then
            echo -n " (expected $expect_fail failure)"
        else
            echo -n " (expected)"
            let expected_fail++
        fi
    fi
    if $TIME; then
        let elapsed=`date +%s`-start
        let min=elapsed/60
        let sec=elapsed%60
        if [ $sec -lt 10 ]; then
            sec=0$sec
        fi
        echo " ($min:$sec)"
    else
        echo
    fi
    popd >/dev/null
done

echo "$pass tests passed, $fail tests failed ($expected_fail expected)"

if [ $fail -ne $expected_fail ]; then
    exit 1
fi
