#include <tna.p4>
       
/*** THIS IS FILE IS AUTOMATICALLY GENERATED BY A PYTHON SCRIPT ***/

control Deconfliction(in bit<3> priority0, in bit<4> group0, in bit<1> drop0,in bit<3> priority1, in bit<4> group1, in bit<1> drop1,in bit<3> priority2, in bit<4> group2, in bit<1> drop2,in bit<3> priority3, in bit<4> group3, in bit<1> drop3,in bit<3> priority4, in bit<4> group4, in bit<1> drop4,in bit<3> priority5, in bit<4> group5, in bit<1> drop5,in bit<3> priority6, in bit<4> group6, in bit<1> drop6,in bit<3> priority7, in bit<4> group7, in bit<1> drop7,
             inout bit<3> priority, inout bit<4> group, out bit<3> drop_ctl)
{
  action DontDrop() { drop_ctl = 0; }
  action Drop() { drop_ctl = 1; }
  action Deconflict0() { priority = priority0; group = group0; }
  action Deconflict1() { priority = priority1; group = group1; }
  action Deconflict2() { priority = priority2; group = group2; }
  action Deconflict3() { priority = priority3; group = group3; }
  action Deconflict4() { priority = priority4; group = group4; }
  action Deconflict5() { priority = priority5; group = group5; }
  action Deconflict6() { priority = priority6; group = group6; }
  action Deconflict7() { priority = priority7; group = group7; }

  @hidden table drop {
    actions = { @defaultonly DontDrop; Drop; }
    const default_action = DontDrop();
    key = {
      drop0 : ternary;
      drop1 : ternary;
      drop2 : ternary;
      drop3 : ternary;
      drop4 : ternary;
      drop5 : ternary;
      drop6 : ternary;
      drop7 : ternary;

    }
    const entries = {
      (1,_,_,_,_,_,_,_): Drop();
      (_,1,_,_,_,_,_,_): Drop();
      (_,_,1,_,_,_,_,_): Drop();
      (_,_,_,1,_,_,_,_): Drop();
      (_,_,_,_,1,_,_,_): Drop();
      (_,_,_,_,_,1,_,_): Drop();
      (_,_,_,_,_,_,1,_): Drop();
      (_,_,_,_,_,_,_,1): Drop();

    }
  }




  @hidden table deconflict {
    actions = {
      @defaultonly NoAction; Deconflict0; Deconflict1; Deconflict2; Deconflict3; Deconflict4; Deconflict5; Deconflict6; Deconflict7;
    }
    const default_action = NoAction();
    key = {
      priority0 : ternary;
      priority1 : ternary;
      priority2 : ternary;
      priority3 : ternary;
      priority4 : ternary;
      priority5 : ternary;
      priority6 : ternary;
      priority7 : ternary;



      priority : range;

    }
    const entries = {
      (0,_,_,_,_,_,_,_,0 .. 7): Deconflict0();
      (_,0,_,_,_,_,_,_,0 .. 7): Deconflict1();
      (_,_,0,_,_,_,_,_,0 .. 7): Deconflict2();
      (_,_,_,0,_,_,_,_,0 .. 7): Deconflict3();
      (_,_,_,_,0,_,_,_,0 .. 7): Deconflict4();
      (_,_,_,_,_,0,_,_,0 .. 7): Deconflict5();
      (_,_,_,_,_,_,0,_,0 .. 7): Deconflict6();
      (_,_,_,_,_,_,_,0,0 .. 7): Deconflict7();
      (1,_,_,_,_,_,_,_,1 .. 7): Deconflict0();
      (_,1,_,_,_,_,_,_,1 .. 7): Deconflict1();
      (_,_,1,_,_,_,_,_,1 .. 7): Deconflict2();
      (_,_,_,1,_,_,_,_,1 .. 7): Deconflict3();
      (_,_,_,_,1,_,_,_,1 .. 7): Deconflict4();
      (_,_,_,_,_,1,_,_,1 .. 7): Deconflict5();
      (_,_,_,_,_,_,1,_,1 .. 7): Deconflict6();
      (_,_,_,_,_,_,_,1,1 .. 7): Deconflict7();
      (2,_,_,_,_,_,_,_,2 .. 7): Deconflict0();
      (_,2,_,_,_,_,_,_,2 .. 7): Deconflict1();
      (_,_,2,_,_,_,_,_,2 .. 7): Deconflict2();
      (_,_,_,2,_,_,_,_,2 .. 7): Deconflict3();
      (_,_,_,_,2,_,_,_,2 .. 7): Deconflict4();
      (_,_,_,_,_,2,_,_,2 .. 7): Deconflict5();
      (_,_,_,_,_,_,2,_,2 .. 7): Deconflict6();
      (_,_,_,_,_,_,_,2,2 .. 7): Deconflict7();
      (3,_,_,_,_,_,_,_,3 .. 7): Deconflict0();
      (_,3,_,_,_,_,_,_,3 .. 7): Deconflict1();
      (_,_,3,_,_,_,_,_,3 .. 7): Deconflict2();
      (_,_,_,3,_,_,_,_,3 .. 7): Deconflict3();
      (_,_,_,_,3,_,_,_,3 .. 7): Deconflict4();
      (_,_,_,_,_,3,_,_,3 .. 7): Deconflict5();
      (_,_,_,_,_,_,3,_,3 .. 7): Deconflict6();
      (_,_,_,_,_,_,_,3,3 .. 7): Deconflict7();
      (4,_,_,_,_,_,_,_,4 .. 7): Deconflict0();
      (_,4,_,_,_,_,_,_,4 .. 7): Deconflict1();
      (_,_,4,_,_,_,_,_,4 .. 7): Deconflict2();
      (_,_,_,4,_,_,_,_,4 .. 7): Deconflict3();
      (_,_,_,_,4,_,_,_,4 .. 7): Deconflict4();
      (_,_,_,_,_,4,_,_,4 .. 7): Deconflict5();
      (_,_,_,_,_,_,4,_,4 .. 7): Deconflict6();
      (_,_,_,_,_,_,_,4,4 .. 7): Deconflict7();
      (5,_,_,_,_,_,_,_,5 .. 7): Deconflict0();
      (_,5,_,_,_,_,_,_,5 .. 7): Deconflict1();
      (_,_,5,_,_,_,_,_,5 .. 7): Deconflict2();
      (_,_,_,5,_,_,_,_,5 .. 7): Deconflict3();
      (_,_,_,_,5,_,_,_,5 .. 7): Deconflict4();
      (_,_,_,_,_,5,_,_,5 .. 7): Deconflict5();
      (_,_,_,_,_,_,5,_,5 .. 7): Deconflict6();
      (_,_,_,_,_,_,_,5,5 .. 7): Deconflict7();
      (6,_,_,_,_,_,_,_,6 .. 7): Deconflict0();
      (_,6,_,_,_,_,_,_,6 .. 7): Deconflict1();
      (_,_,6,_,_,_,_,_,6 .. 7): Deconflict2();
      (_,_,_,6,_,_,_,_,6 .. 7): Deconflict3();
      (_,_,_,_,6,_,_,_,6 .. 7): Deconflict4();
      (_,_,_,_,_,6,_,_,6 .. 7): Deconflict5();
      (_,_,_,_,_,_,6,_,6 .. 7): Deconflict6();
      (_,_,_,_,_,_,_,6,6 .. 7): Deconflict7();
      (7,_,_,_,_,_,_,_,7 .. 7): Deconflict0();
      (_,7,_,_,_,_,_,_,7 .. 7): Deconflict1();
      (_,_,7,_,_,_,_,_,7 .. 7): Deconflict2();
      (_,_,_,7,_,_,_,_,7 .. 7): Deconflict3();
      (_,_,_,_,7,_,_,_,7 .. 7): Deconflict4();
      (_,_,_,_,_,7,_,_,7 .. 7): Deconflict5();
      (_,_,_,_,_,_,7,_,7 .. 7): Deconflict6();
      (_,_,_,_,_,_,_,7,7 .. 7): Deconflict7();

    }
  }

  apply {
    deconflict.apply();
    drop.apply();
  }
}
# 9 "/mnt/Main.p4" 2

header realData_h {
  bit<3> pri0;
  bit<4> group0;
  bit<1> drop0;
  bit<3> pri1;
  bit<4> group1;
  bit<1> drop1;
  bit<3> pri2;
  bit<4> group2;
  bit<1> drop2;
  bit<3> pri3;
  bit<4> group3;
  bit<1> drop3;
  bit<3> pri4;
  bit<4> group4;
  bit<1> drop4;
  bit<3> pri5;
  bit<4> group5;
  bit<1> drop5;
  bit<3> pri6;
  bit<4> group6;
  bit<1> drop6;
  bit<3> pri7;
  bit<4> group7;
  bit<1> drop7;
}

struct myHeaders {
    realData_h ctr;
}

struct portMetadata_t {
    bit<8> skipKey;
}

struct metadata {
    portMetadata_t portMetadata;
}

struct emetadata {}

parser IngressParser(packet_in pkt,
    out myHeaders hdr,
    out metadata meta,
    /* Intrinsic */
    out ingress_intrinsic_metadata_t ig_intr_md)
{
    state start {
        pkt.extract(ig_intr_md);
        meta.portMetadata = port_metadata_unpack<portMetadata_t>(pkt);
        pkt.extract(hdr.ctr);
        transition accept;
    }
}

control Ingress(
    inout myHeaders hdr,
    inout metadata meta,
    in ingress_intrinsic_metadata_t ig_intr_md,
    in ingress_intrinsic_metadata_from_parser_t ig_prsr_md,
    inout ingress_intrinsic_metadata_for_deparser_t ig_dprsr_md,
    inout ingress_intrinsic_metadata_for_tm_t ig_tm_md)
{
    Deconfliction() deconflict;
    apply {
        deconflict.apply(hdr.ctr.pri0,hdr.ctr.group0,hdr.ctr.drop0,hdr.ctr.pri1,hdr.ctr.group1,hdr.ctr.drop1,
                         hdr.ctr.pri2,hdr.ctr.group2,hdr.ctr.drop2,hdr.ctr.pri3,hdr.ctr.group3,hdr.ctr.drop3,
                         hdr.ctr.pri4,hdr.ctr.group4,hdr.ctr.drop4,hdr.ctr.pri5,hdr.ctr.group5,hdr.ctr.drop5,
                         hdr.ctr.pri6,hdr.ctr.group6,hdr.ctr.drop6,hdr.ctr.pri7,hdr.ctr.group7,hdr.ctr.drop7,
                         hdr.ctr.pri0,hdr.ctr.group0,ig_dprsr_md.drop_ctl);
    }
}

control IngressDeparser(
    packet_out pkt,
    inout myHeaders headers,
    in metadata meta,
    in ingress_intrinsic_metadata_for_deparser_t ingressDeparserMetadata
) {
    apply {
        pkt.emit(headers);
    }
}

struct my_egress_headers_t {
}

    /********  G L O B A L   E G R E S S   M E T A D A T A  *********/

struct my_egress_metadata_t {
}

    /***********************  P A R S E R  **************************/

parser EgressParser(packet_in pkt,
    /* User */
    out my_egress_headers_t hdr,
    out my_egress_metadata_t meta,
    /* Intrinsic */
    out egress_intrinsic_metadata_t eg_intr_md)
{
    /* This is a mandatory state, required by Tofino Architecture */
    state start {
        pkt.extract(eg_intr_md);
        transition accept;
    }
}

    /***************** M A T C H - A C T I O N  *********************/

control Egress(
    /* User */
    inout my_egress_headers_t hdr,
    inout my_egress_metadata_t meta,
    /* Intrinsic */
    in egress_intrinsic_metadata_t eg_intr_md,
    in egress_intrinsic_metadata_from_parser_t eg_prsr_md,
    inout egress_intrinsic_metadata_for_deparser_t eg_dprsr_md,
    inout egress_intrinsic_metadata_for_output_port_t eg_oport_md)
{
    apply {
    }
}

    /*********************  D E P A R S E R  ************************/

control EgressDeparser(packet_out pkt,
    /* User */
    inout my_egress_headers_t hdr,
    in my_egress_metadata_t meta,
    /* Intrinsic */
    in egress_intrinsic_metadata_for_deparser_t eg_dprsr_md)
{
    apply {
        pkt.emit(hdr);
    }
}


/************ F I N A L   P A C K A G E ******************************/
Pipeline(
    IngressParser(),
    Ingress(),
    IngressDeparser(),
    EgressParser(),
    Egress(),
    EgressDeparser()
) pipe;

Switch(pipe) main;
