# PTF test for smoke_large_tbls
# p4testgen seed: 217422285

import pd_base_tests
from ptf.mask import Mask
from ptf.testutils import send_packet
from ptf.testutils import verify_packet
from ptf.testutils import verify_no_other_packets
from ptf.thriftutils import hex_to_byte
from ptf.thriftutils import hex_to_i16
from ptf.thriftutils import hex_to_i32

from res_pd_rpc.ttypes import DevTarget_t

from smoke_large_tbls.p4_pd_rpc.ttypes import *

class AbstractTest(pd_base_tests.ThriftInterfaceDataPlane):
    def __init__(self):
        pd_base_tests.ThriftInterfaceDataPlane.__init__(self, ['smoke_large_tbls'])
    
    def setUp(self):
        pd_base_tests.ThriftInterfaceDataPlane.setUp(self)
        self.sess_hdl = self.conn_mgr.client_init()
        self.dev_id = 0;
        self.dev_tgt = DevTarget_t(self.dev_id, hex_to_i16(0xffff))
        self.match_entries = { 'atcam_indirect_tbl': [], 'atcam_tbl': [],
                               'idle_stats_tbl': [], }
        self.profile_members = { 'atcam_action_profile': [], }
    
    def resetTable(self, table_name, reset_default):
        for entry in self.match_entries[table_name]:
            getattr(self.client, table_name + '_table_delete')(
                self.sess_hdl, self.dev_id, entry)
        
        if reset_default:
            # Only reset the default entry if the API for doing so exists.
            # (No API is generated for unused tables.)
            method_name = table_name + '_table_reset_default_entry'
            if hasattr(self.client, method_name):
                method = getattr(self.client, method_name)
                if callable(method):
                    method(self.sess_hdl, self.dev_tgt)
    
    def resetActionProfile(self, action_profile_name):
        for entry in self.profile_members[action_profile_name]:
            getattr(self.client, action_profile_name + '_del_member')(
                self.sess_hdl, self.dev_id, entry)
    
    def tearDown(self):
        # Reset tables.
        self.resetTable('atcam_indirect_tbl', True)
        self.resetTable('atcam_tbl', True)
        self.resetTable('idle_stats_tbl', True)
        
        # Reset action profiles.
        self.resetActionProfile('atcam_action_profile')
        
        # End session.
        self.conn_mgr.client_cleanup(self.sess_hdl)
        pd_base_tests.ThriftInterfaceDataPlane.tearDown(self)
    
    def setupCtrlPlane(self):
        pass
    
    def sendPacket(self):
        pass
    
    def verifyPackets(self):
        pass
    
    def runTestImpl(self):
        self.setupCtrlPlane()
        self.conn_mgr.complete_operations(self.sess_hdl)
        self.sendPacket()
        self.verifyPackets()
        verify_no_other_packets(self, self.dev_id, timeout=2)

class Test1(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x5a9d7381409e
            srcAddr = 0x1827cd6ced6f
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0x532
            etherType = 0xd093
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x5a\x9d\x73\x81\x40\x9e',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x18\x27\xcd\x6c\xed\x6f',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0532),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0xd093),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x03),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x04),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x39),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0xdc5c),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x3e90),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x1713),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0x5e),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0xa4),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x2946),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x5eaa12b2),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x107db1df),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x723a),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x1bbe),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x32e34b52),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x44151e12),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x00),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x01),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x00),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xe554),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xc93d),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x13d3),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xb276),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xdefb),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x8aa7),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x5a\x9d\x73\x81\x40\x9e\x18\x27\xcd\x6c\xed\x6f\x81\x00\x25\x32\xd0\x93\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test2(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x5a9d7381409e
            srcAddr = 0x1827cd6ced6f
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0x532
            etherType = 0xd093
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0532),
            ipv4_srcAddr = hex_to_i32(0x107db1df),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x5a\x9d\x73\x81\x40\x9e',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x18\x27\xcd\x6c\xed\x6f',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0532),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0xd093),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x03),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x04),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x39),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0xdc5c),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x3e90),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x1713),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0x5e),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0xa4),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x2946),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x5eaa12b2),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x107db1df),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x723a),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x1bbe),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x32e34b52),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x44151e12),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x00),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x01),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x00),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xe554),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xc93d),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x13d3),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xb276),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xdefb),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x8aa7),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x5a\x9d\x73\x81\x40\x9e\x18\x27\xcd\x6c\xed\x6f\x81\x00\x25\x32\xd0\x93\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test3(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x3eb1ac096423
            srcAddr = 0x7cddcc3e9315
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x629
            etherType = 0x32ac
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 9:
        ethernet =
            dstAddr = 0x3eb1ac096423
            srcAddr = 0x7cddcc3e9315
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x629
            etherType = 0x32ac
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0629),
            ipv4_srcAddr = hex_to_i32(0xf5d8dd43),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0629),
            ipv4_dstAddr = hex_to_i32(0xdbd6fce6),
            ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0009),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x3e\xb1\xac\x09\x64\x23',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x7c\xdd\xcc\x3e\x93\x15',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0629),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x32ac),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0a),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x0e),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x18),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0xc73f),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0xb47f),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x13a2),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0x20),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0xbd),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x4254),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0xdbd6fce6),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0xf5d8dd43),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x151b),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x4a02),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x412d4b7d),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x2baf25d3),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x01),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x3a),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xe2e2),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x19a2),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x7594),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xaf2f),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x6624),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x1ce6),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x3e\xb1\xac\x09\x64\x23\x7c\xdd\xcc\x3e\x93\x15\x81\x00\xc6\x29\x32\xac\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 9
        exp_pkt = b'\x3e\xb1\xac\x09\x64\x23\x7c\xdd\xcc\x3e\x93\x15\x81\x00\xc6\x29\x32\xac\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test4(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0xff1b6714b241
            srcAddr = 0x73f6d3610b4c
            etherType = 0x8100
        vlan_tag =
            pri = 0b101
            cfi = 0b0
            vlan_id = 0x83e
            etherType = 0x8b63
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x083e),
            ipv4_srcAddr = hex_to_i32(0xd4322047),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x083e),
            ipv4_dstAddr = hex_to_i32(0x25e7b416),
            ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xff\x1b\x67\x14\xb2\x41',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x73\xf6\xd3\x61\x0b\x4c',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x05),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x083e),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x8b63),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0f),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x01),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x7e),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0x6d90),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x5eb8),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x058b),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0x41),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0x1d),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x9519),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x25e7b416),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0xd4322047),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x7627),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x4c37),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x156d9581),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x1ff9ac07),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0e),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x01),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x3d),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xe9e8),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x47a7),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xc306),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x4665),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xf55b),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xe4a6),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\xff\x1b\x67\x14\xb2\x41\x73\xf6\xd3\x61\x0b\x4c\x81\x00\xa8\x3e\x8b\x63\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test5(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x17e2efc857d1
            srcAddr = 0x1228ce7df84b
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0xa96
            etherType = 0x0dca
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x17e2efc857d1
            srcAddr = 0x1228ce7df84b
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0xa96
            etherType = 0x0dca
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0a96),
            ipv4_dstAddr = hex_to_i32(0x73b55f9f),
            ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x17\xe2\xef\xc8\x57\xd1',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x12\x28\xce\x7d\xf8\x4b',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0a96),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0dca),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0f),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x09),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x28),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0x0a72),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x1be8),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x03),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x0ac9),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0x3e),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0xd7),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x7466),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x73b55f9f),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x1c1d87ae),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x51e1),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x7cb9),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xbce1a2cd),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x87ed5139),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0a),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x00),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xefe8),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xfa8a),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x5737),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x20e7),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x16e6),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x949c),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x17\xe2\xef\xc8\x57\xd1\x12\x28\xce\x7d\xf8\x4b\x81\x00\xea\x96\x0d\xca\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x17\xe2\xef\xc8\x57\xd1\x12\x28\xce\x7d\xf8\x4b\x81\x00\xea\x96\x0d\xca\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test6(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x0800158cc44c
            srcAddr = 0xd1b1997dddb6
            etherType = 0x8100
        vlan_tag =
            pri = 0b101
            cfi = 0b0
            vlan_id = 0xd06
            etherType = 0x821a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0d06),
            ipv4_dstAddr = hex_to_i32(0x40f5e6b2),
            ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x08\x00\x15\x8c\xc4\x4c',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xd1\xb1\x99\x7d\xdd\xb6',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x05),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0d06),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x821a),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x09),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x0d),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x74),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0x18c4),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x7676),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x02d7),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0x45),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0x03),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0xea27),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x40f5e6b2),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0xe2e155dc),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x1e00),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x4b40),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x05413f3d),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xc374a844),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x02),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x10),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xab6c),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x6807),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x0c7f),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xbceb),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xbc12),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x6f3a),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x08\x00\x15\x8c\xc4\x4c\xd1\xb1\x99\x7d\xdd\xb6\x81\x00\xad\x06\x82\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test7(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x41e6a9fb1f0c
            srcAddr = 0x9719879de580
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0x4bf
            etherType = 0x3acc
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x04bf),
            ipv4_dstAddr = hex_to_i32(0xdb6d0fc6),
            ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x41\xe6\xa9\xfb\x1f\x0c',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x97\x19\x87\x9d\xe5\x80',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x04bf),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x3acc),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x06),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x03),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x22),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0x5a4d),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x5842),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x11b0),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0xb7),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0x49),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x4574),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0xdb6d0fc6),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x063dc9c5),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x0ddd),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x738a),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x6fbedfa2),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x8692bc40),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x00),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x15),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x6de0),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x79d6),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xb54a),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xb5cc),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xecab),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x5a92),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x41\xe6\xa9\xfb\x1f\x0c\x97\x19\x87\x9d\xe5\x80\x81\x00\x64\xbf\x3a\xcc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test8(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x41e6a9fb1f0c
            srcAddr = 0x9719879de580
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0x4bf
            etherType = 0x3acc
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x04bf),
            ipv4_srcAddr = hex_to_i32(0x063dc9c5),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x04bf),
            ipv4_dstAddr = hex_to_i32(0xdb6d0fc6),
            ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x41\xe6\xa9\xfb\x1f\x0c',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x97\x19\x87\x9d\xe5\x80',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x04bf),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x3acc),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x06),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x03),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x22),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0x5a4d),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x5842),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x11b0),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0xb7),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0x49),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x4574),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0xdb6d0fc6),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x063dc9c5),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x0ddd),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x738a),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x6fbedfa2),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x8692bc40),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x00),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x15),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x6de0),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x79d6),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xb54a),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xb5cc),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xecab),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x5a92),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x41\xe6\xa9\xfb\x1f\x0c\x97\x19\x87\x9d\xe5\x80\x81\x00\x64\xbf\x3a\xcc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test9(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x7f6c4766ff09
            srcAddr = 0x392d5c7b72fa
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0x9a8
            etherType = 0xcfe3
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 7:
        ethernet =
            dstAddr = 0x7f6c4766ff09
            srcAddr = 0x392d5c7b72fa
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0x9a8
            etherType = 0xcfe3
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x09a8),
            ipv4_srcAddr = hex_to_i32(0x417fd1a8),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x09a8),
            ipv4_dstAddr = hex_to_i32(0x28c9fb67),
            ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0007),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x7f\x6c\x47\x66\xff\x09',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x39\x2d\x5c\x7b\x72\xfa',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x09a8),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0xcfe3),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x08),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x0b),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x95),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0x6cd8),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0xb1d0),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x03),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x1ec8),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0x3f),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0xaf),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0xc6da),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x28c9fb67),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x417fd1a8),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0xb8f0),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x2371),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x3096c343),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xe993557f),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x08),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x05),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x15),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x5bcf),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xc08c),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x19d9),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xfdd7),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x3e4e),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xb3cc),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x014c),), 0))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x7f\x6c\x47\x66\xff\x09\x39\x2d\x5c\x7b\x72\xfa\x81\x00\x29\xa8\xcf\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 7
        exp_pkt = b'\x7f\x6c\x47\x66\xff\x09\x39\x2d\x5c\x7b\x72\xfa\x81\x00\x29\xa8\xcf\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test10(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x136e8ecfde21
            srcAddr = 0x3cb26f92fc01
            etherType = 0x8100
        vlan_tag =
            pri = 0b000
            cfi = 0b0
            vlan_id = 0xa41
            etherType = 0x7735
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0a41),
            ipv4_srcAddr = hex_to_i32(0x99712e48),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0a41),
            ipv4_dstAddr = hex_to_i32(0xfc96879a),
            ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x13\x6e\x8e\xcf\xde\x21',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x3c\xb2\x6f\x92\xfc\x01',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x00),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0a41),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x7735),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x08),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x0a),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x1e),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0x0e3f),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0xcd2d),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x01fc),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0x04),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0xa0),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x8ee5),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0xfc96879a),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x99712e48),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x8011),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xfd1b),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x598ff621),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xa82d95ea),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x18),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xaee2),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x0b0f),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xb3fd),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xf562),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xbd76),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xc5c4),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0162),), 0))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x13\x6e\x8e\xcf\xde\x21\x3c\xb2\x6f\x92\xfc\x01\x81\x00\x0a\x41\x77\x35\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test11(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x521d63fdd265
            srcAddr = 0x23cf3660771a
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0x4ad
            etherType = 0x978a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x04ad),
            ipv4_dstAddr = hex_to_i32(0x6d6c6fe4),
            ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x52\x1d\x63\xfd\xd2\x65',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x23\xcf\x36\x60\x77\x1a',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x04ad),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x978a),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x03),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x0c),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x88),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0x260c),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x7ae5),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x1db6),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0x07),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0xe2),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0xd758),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x6d6c6fe4),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x939936fc),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0xd816),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xe399),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xc3b47557),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x42bb9bc5),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0e),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x12),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x7445),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xe5c0),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xf0d3),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x85c5),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x77c9),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xa6e2),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0157),), 0))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x52\x1d\x63\xfd\xd2\x65\x23\xcf\x36\x60\x77\x1a\x81\x00\x44\xad\x97\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test12(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x8864aee643fe
            srcAddr = 0xbd98129d1718
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0x59b
            etherType = 0xebf6
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 6:
        ethernet =
            dstAddr = 0x8864aee643fe
            srcAddr = 0xbd98129d1718
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0x59b
            etherType = 0xebf6
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x059b),
            ipv4_dstAddr = hex_to_i32(0x0fe03d48),
            ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0006),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x88\x64\xae\xe6\x43\xfe',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xbd\x98\x12\x9d\x17\x18',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x059b),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0xebf6),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0c),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x0d),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0xf8),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0x3876),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x6088),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x1205),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0xf8),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0x0b),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x9b8c),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x0fe03d48),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x7d29798d),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x83ff),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x29fa),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x9ae8c650),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xc30f916f),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x07),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x07),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xbc5d),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xee26),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xbeea),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x3a4f),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xe04f),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xe8ae),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0155),), 0))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x88\x64\xae\xe6\x43\xfe\xbd\x98\x12\x9d\x17\x18\x81\x00\xe5\x9b\xeb\xf6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 6
        exp_pkt = b'\x88\x64\xae\xe6\x43\xfe\xbd\x98\x12\x9d\x17\x18\x81\x00\xe5\x9b\xeb\xf6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test13(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0xaf723d3651dc
            srcAddr = 0x5dfbc632f4ab
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0x46d
            etherType = 0x7f04
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x046d),
            ipv4_srcAddr = hex_to_i32(0x9f38ec96),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x046d),
            ipv4_dstAddr = hex_to_i32(0xa67b8614),
            ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xaf\x72\x3d\x36\x51\xdc',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x5d\xfb\xc6\x32\xf4\xab',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x046d),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x7f04),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x04),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x05),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x1b),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0x8b17),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0xdf09),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x05),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x1a08),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0x9d),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0x93),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x568f),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0xa67b8614),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x9f38ec96),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x8747),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xb3fb),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x6bdcfb52),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x1c8a00e5),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x03),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x37),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xae54),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x13ad),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x58f9),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xd916),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x2db6),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xff89),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\xaf\x72\x3d\x36\x51\xdc\x5d\xfb\xc6\x32\xf4\xab\x81\x00\x64\x6d\x7f\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test14(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0xf999cbf7ea6b
            srcAddr = 0xc736acdd5e97
            etherType = 0x8100
        vlan_tag =
            pri = 0b000
            cfi = 0b0
            vlan_id = 0xdd0
            etherType = 0xff7f
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 9:
        ethernet =
            dstAddr = 0xf999cbf7ea6b
            srcAddr = 0xc736acdd5e97
            etherType = 0x8100
        vlan_tag =
            pri = 0b000
            cfi = 0b0
            vlan_id = 0xdd0
            etherType = 0xff7f
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0dd0),
            ipv4_srcAddr = hex_to_i32(0x3845f26e),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0dd0),
            ipv4_dstAddr = hex_to_i32(0x97c7e6d8),
            ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xf9\x99\xcb\xf7\xea\x6b',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xc7\x36\xac\xdd\x5e\x97',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x00),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0dd0),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0xff7f),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x09),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x0d),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0xa9),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0x4505),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0xa667),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x12f8),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0x1f),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0xaa),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0xc587),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x97c7e6d8),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x3845f26e),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x2d99),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xe47d),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x33dee337),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xb46cd77d),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0d),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x3a),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x9d99),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xc4fe),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xe9af),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x42c1),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x5804),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x1c7a),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0009),), 0))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\xf9\x99\xcb\xf7\xea\x6b\xc7\x36\xac\xdd\x5e\x97\x81\x00\x0d\xd0\xff\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 9
        exp_pkt = b'\xf9\x99\xcb\xf7\xea\x6b\xc7\x36\xac\xdd\x5e\x97\x81\x00\x0d\xd0\xff\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test15(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x3582cb6c5fee
            srcAddr = 0x56701a4b4a3a
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0xde8
            etherType = 0x51f4
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x3582cb6c5fee
            srcAddr = 0x56701a4b4a3a
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0xde8
            etherType = 0x51f4
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0de8),
            ipv4_dstAddr = hex_to_i32(0xe0854648),
            ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x35\x82\xcb\x6c\x5f\xee',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x56\x70\x1a\x4b\x4a\x3a',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0de8),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x51f4),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0e),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x0c),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0xd3),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0x1767),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x78af),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x1578),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0x7a),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0x48),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0xa3a6),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0xe0854648),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x4c8e6664),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0xa6ca),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x9b5a),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x693e49e9),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xf54227d3),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0c),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x03),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x1f),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x18d1),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x4f6c),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xaf57),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xf7b6),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xc7c7),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xa55f),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),), 0))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x35\x82\xcb\x6c\x5f\xee\x56\x70\x1a\x4b\x4a\x3a\x81\x00\xcd\xe8\x51\xf4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x35\x82\xcb\x6c\x5f\xee\x56\x70\x1a\x4b\x4a\x3a\x81\x00\xcd\xe8\x51\xf4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test16(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x0af44499b249
            srcAddr = 0x0b7e417c40c8
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0xaa1
            etherType = 0x11dc
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0aa1),
            ipv4_dstAddr = hex_to_i32(0x51ce2ab2),
            ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x0a\xf4\x44\x99\xb2\x49',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x0b\x7e\x41\x7c\x40\xc8',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0aa1),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x11dc),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x03),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x05),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x4f),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0x295c),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x8a0c),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x14c4),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0xf0),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0x0f),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x004d),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x51ce2ab2),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0xf8172ec0),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0xe2d6),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x6bd1),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x3d89091d),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xddd557d5),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x06),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x29),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xb389),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x90b3),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x8971),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x9718),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xeca6),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x36a0),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x0a\xf4\x44\x99\xb2\x49\x0b\x7e\x41\x7c\x40\xc8\x81\x00\xca\xa1\x11\xdc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test17(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x2b0f2487276c
            srcAddr = 0x4f9ad3995394
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0x7ad
            etherType = 0xd931
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 0:
        ethernet =
            dstAddr = 0x2b0f2487276c
            srcAddr = 0x4f9ad3995394
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0x7ad
            etherType = 0xd931
    """
    
    def setupCtrlPlane(self):
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x2b\x0f\x24\x87\x27\x6c',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x4f\x9a\xd3\x99\x53\x94',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x07ad),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0xd931),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0d),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x0f),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0xba),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0x0208),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0xd28c),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x1148),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0x92),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0x9b),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x28c1),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x5d6170df),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x10b7d031),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x89f7),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x38dd),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x0afbd5be),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x8542a4e6),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x01),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x24),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x4024),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x99a1),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x4cb3),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xc802),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x9576),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x4007),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0000),), 0))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x2b\x0f\x24\x87\x27\x6c\x4f\x9a\xd3\x99\x53\x94\x81\x00\x67\xad\xd9\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 0
        exp_pkt = b'\x2b\x0f\x24\x87\x27\x6c\x4f\x9a\xd3\x99\x53\x94\x81\x00\x67\xad\xd9\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test18(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0x7a1e3e027e69
            srcAddr = 0x082a11fa409e
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0x494
            etherType = 0x0c65
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x7a\x1e\x3e\x02\x7e\x69',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x08\x2a\x11\xfa\x40\x9e',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0494),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0c65),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x08),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x0c),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x71),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0xe006),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x0c57),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x0717),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0x58),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0xe7),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x1853),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x4cbdd3a6),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x651a3f13),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x4b39),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x3fc4),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xcda1d376),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x31021272),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x01),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x32),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x28fa),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xec8a),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xb819),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xc1b8),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xfd7d),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xffb2),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\x7a\x1e\x3e\x02\x7e\x69\x08\x2a\x11\xfa\x40\x9e\x81\x00\x64\x94\x0c\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test19(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x99c98a13f3cc
            srcAddr = 0x993fa909bca7
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0x8aa
            etherType = 0xaf6f
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x08aa),
            ipv4_srcAddr = hex_to_i32(0x4dfba97d),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x99\xc9\x8a\x13\xf3\xcc',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x99\x3f\xa9\x09\xbc\xa7',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x08aa),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0xaf6f),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x02),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x01),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x38),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0x514e),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0xdb5c),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x05),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x07cf),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0xf4),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0x16),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0xe52a),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x84ea18cf),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x4dfba97d),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x0d76),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xae26),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x17e67a6c),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xe15ef302),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x02),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x04),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xf7f7),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xfc67),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xf997),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xe428),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x59e8),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x877f),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x99\xc9\x8a\x13\xf3\xcc\x99\x3f\xa9\x09\xbc\xa7\x81\x00\x88\xaa\xaf\x6f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test20(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0x54337226f482
            srcAddr = 0x4ae4bfa41fd9
            etherType = 0x8100
        vlan_tag =
            pri = 0b000
            cfi = 0b0
            vlan_id = 0xe46
            etherType = 0x6269
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x54337226f482
            srcAddr = 0x4ae4bfa41fd9
            etherType = 0x8100
        vlan_tag =
            pri = 0b000
            cfi = 0b0
            vlan_id = 0xe46
            etherType = 0x6269
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0e46),
            ipv4_srcAddr = hex_to_i32(0x30a652ac),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x54\x33\x72\x26\xf4\x82',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x4a\xe4\xbf\xa4\x1f\xd9',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x00),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0e46),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x6269),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x00),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x03),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x22),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0x6ef4),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x2408),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x0ed7),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0x2c),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0x14),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x7e7b),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0xb512bdba),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x30a652ac),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0xa77f),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xb3c7),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x96d33696),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x122aa87e),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x02),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x1e),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x57cb),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x6a41),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xa23d),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x7bee),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x8d00),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x4159),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),), 0))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\x54\x33\x72\x26\xf4\x82\x4a\xe4\xbf\xa4\x1f\xd9\x81\x00\x0e\x46\x62\x69\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x54\x33\x72\x26\xf4\x82\x4a\xe4\xbf\xa4\x1f\xd9\x81\x00\x0e\x46\x62\x69\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test21(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x24b8684351e7
            srcAddr = 0xc24adc10478c
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x54d
            etherType = 0xfe7b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x054d),
            ipv4_srcAddr = hex_to_i32(0x36004751),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x24\xb8\x68\x43\x51\xe7\xc2\x4a\xdc\x10\x47\x8c\x81\x00\xc5\x4d\xfe\x7b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test22(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x24b8684351e7
            srcAddr = 0xc24adc10478c
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x54d
            etherType = 0xfe7b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        pass
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x24\xb8\x68\x43\x51\xe7\xc2\x4a\xdc\x10\x47\x8c\x81\x00\xc5\x4d\xfe\x7b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test23(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xe6b11d5f9d0e
            srcAddr = 0x2c8cd927b5e7
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x179
            etherType = 0x51bc
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0179),
            ipv4_srcAddr = hex_to_i32(0x43e1c79b),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0179),
            ipv4_dstAddr = hex_to_i32(0xe0834868),
            ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xe6\xb1\x1d\x5f\x9d\x0e\x2c\x8c\xd9\x27\xb5\xe7\x81\x00\xc1\x79\x51\xbc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test24(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xe6b11d5f9d0e
            srcAddr = 0x2c8cd927b5e7
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x179
            etherType = 0x51bc
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0179),
            ipv4_dstAddr = hex_to_i32(0xe0834868),
            ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xe6\xb1\x1d\x5f\x9d\x0e\x2c\x8c\xd9\x27\xb5\xe7\x81\x00\xc1\x79\x51\xbc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test25(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x2402adf0882a
            srcAddr = 0x9268c42809d2
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0x6a7
            etherType = 0xbc20
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x06a7),
            ipv4_srcAddr = hex_to_i32(0x8d07af95),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x06a7),
            ipv4_dstAddr = hex_to_i32(0x023c9819),
            ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x24\x02\xad\xf0\x88\x2a\x92\x68\xc4\x28\x09\xd2\x81\x00\x26\xa7\xbc\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test26(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x527d087b58b7
            srcAddr = 0x2c20dc9f4852
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0x617
            etherType = 0x6101
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 10:
        ethernet =
            dstAddr = 0x527d087b58b7
            srcAddr = 0x2c20dc9f4852
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0x617
            etherType = 0x6101
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0617),
            ipv4_srcAddr = hex_to_i32(0xaa7cbb06),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0617),
            ipv4_dstAddr = hex_to_i32(0x85187cb4),
            ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x000a),)))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x52\x7d\x08\x7b\x58\xb7\x2c\x20\xdc\x9f\x48\x52\x81\x00\x46\x17\x61\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 10
        exp_pkt = b'\x52\x7d\x08\x7b\x58\xb7\x2c\x20\xdc\x9f\x48\x52\x81\x00\x46\x17\x61\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test27(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x72a0523431dd
            srcAddr = 0xa4f12c25664d
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0x8f7
            etherType = 0x9088
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 0:
        ethernet =
            dstAddr = 0x72a0523431dd
            srcAddr = 0xa4f12c25664d
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0x8f7
            etherType = 0x9088
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x08f7),
            ipv4_dstAddr = hex_to_i32(0x677b7593),
            ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0000),)))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x72\xa0\x52\x34\x31\xdd\xa4\xf1\x2c\x25\x66\x4d\x81\x00\x88\xf7\x90\x88\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 0
        exp_pkt = b'\x72\xa0\x52\x34\x31\xdd\xa4\xf1\x2c\x25\x66\x4d\x81\x00\x88\xf7\x90\x88\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test28(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x84e87b2c7376
            srcAddr = 0xe50afe8f8e9e
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0xba6
            etherType = 0xf06f
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0ba6),
            ipv4_dstAddr = hex_to_i32(0x2db9b059),
            ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x84\xe8\x7b\x2c\x73\x76\xe5\x0a\xfe\x8f\x8e\x9e\x81\x00\x6b\xa6\xf0\x6f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test29(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0xdb6ff85416f1
            srcAddr = 0x3460c4524438
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0xec1
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0x2
            diffserv = 0xbe
            totalLen = 0xb73a
            identification = 0x0db9
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0xc0
            protocol = 0x06
            hdrChecksum = 0xdece
            srcAddr = 0xec26526e
            dstAddr = 0xc4bd10d3
        tcp =
            srcPort = 0x4e99
            dstPort = 0x9d35
            seqNo = 0xb87b1bc1
            ackNo = 0xf312d5dd
            dataOffset = 0xf
            res = 0b100
            ecn = 0b010
            ctrl = 0b100111
            window = 0x4d3d
            checksum = 0xe11c
            urgentPtr = 0x710a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xdb6ff85416f1
            srcAddr = 0x3460c4524438
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0xec1
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0x2
            diffserv = 0xbe
            totalLen = 0xb73a
            identification = 0x0db9
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0xc0
            protocol = 0x06
            hdrChecksum = 0x0421
            srcAddr = 0xec26526e
            dstAddr = 0xc4bd10d3
        tcp =
            srcPort = 0x4e99
            dstPort = 0x9d35
            seqNo = 0xb87b1bc1
            ackNo = 0xf312d5dd
            dataOffset = 0xf
            res = 0b100
            ecn = 0b010
            ctrl = 0b100111
            window = 0x4d3d
            checksum = 0xe11c
            urgentPtr = 0x710a
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0ec1),
            ipv4_dstAddr = hex_to_i32(0xc4bd10d3),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xdb\x6f\xf8\x54\x16\xf1',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x34\x60\xc4\x52\x44\x38',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0ec1),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x00),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x02),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xbe),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xb73a),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x0db9),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x03),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xc0),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xdece),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xc4bd10d3),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xec26526e),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x4e99),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x9d35),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0xb87b1bc1),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0xf312d5dd),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x27),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x4d3d),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0xe11c),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x710a),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x1211),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x88d9),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x9194),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x015f),), 0))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\xdb\x6f\xf8\x54\x16\xf1\x34\x60\xc4\x52\x44\x38\x81\x00\x6e\xc1\x08\x00\x02\xbe\xb7\x3a\x0d\xb9\x60\x00\xc0\x06\xde\xce\xec\x26\x52\x6e\xc4\xbd\x10\xd3\x4e\x99\x9d\x35\xb8\x7b\x1b\xc1\xf3\x12\xd5\xdd\xf8\xa7\x4d\x3d\xe1\x1c\x71\x0a\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xdb\x6f\xf8\x54\x16\xf1\x34\x60\xc4\x52\x44\x38\x81\x00\x6e\xc1\x08\x00\x02\xbe\xb7\x3a\x0d\xb9\x60\x00\xc0\x06\x04\x21\xec\x26\x52\x6e\xc4\xbd\x10\xd3\x4e\x99\x9d\x35\xb8\x7b\x1b\xc1\xf3\x12\xd5\xdd\xf8\xa7\x4d\x3d\xe1\x1c\x71\x0a\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test30(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x1ed3d7cfec19
            srcAddr = 0x0d688a036b98
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0xeba
            etherType = 0x0800
        ipv4 =
            version = 0xb
            ihl = 0xc
            diffserv = 0x9c
            totalLen = 0x24a5
            identification = 0x8296
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0x43
            protocol = 0x06
            hdrChecksum = 0xb9ba
            srcAddr = 0x3b9bb5ad
            dstAddr = 0x76c10f0c
        tcp =
            srcPort = 0xa128
            dstPort = 0x592e
            seqNo = 0x9bda96b7
            ackNo = 0x52098f95
            dataOffset = 0x4
            res = 0b100
            ecn = 0b010
            ctrl = 0b100100
            window = 0x988d
            checksum = 0x24f3
            urgentPtr = 0x3234
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0eba),
            ipv4_dstAddr = hex_to_i32(0x76c10f0c),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x1e\xd3\xd7\xcf\xec\x19',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x0d\x68\x8a\x03\x6b\x98',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0eba),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0b),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0c),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x9c),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x24a5),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x8296),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x03),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x43),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xb9ba),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x76c10f0c),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x3b9bb5ad),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xa128),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x592e),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x9bda96b7),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x52098f95),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x04),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x24),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x988d),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x24f3),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x3234),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x09f2),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xd06b),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x87ea),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x000d),), 0))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x1e\xd3\xd7\xcf\xec\x19\x0d\x68\x8a\x03\x6b\x98\x81\x00\x8e\xba\x08\x00\xbc\x9c\x24\xa5\x82\x96\x60\x00\x43\x06\xb9\xba\x3b\x9b\xb5\xad\x76\xc1\x0f\x0c\xa1\x28\x59\x2e\x9b\xda\x96\xb7\x52\x09\x8f\x95\x48\xa4\x98\x8d\x24\xf3\x32\x34\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test31(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0x13d1f75fa153
            srcAddr = 0x18b6bf119266
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0xf01
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0xb
            diffserv = 0xbb
            totalLen = 0x156e
            identification = 0x8542
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0x00
            protocol = 0x06
            hdrChecksum = 0x0254
            srcAddr = 0x550b62d0
            dstAddr = 0x913af500
        tcp =
            srcPort = 0x1b74
            dstPort = 0x693c
            seqNo = 0x5ec91380
            ackNo = 0x95ead6cc
            dataOffset = 0xf
            res = 0b111
            ecn = 0b001
            ctrl = 0b001000
            window = 0x2cc6
            checksum = 0x073e
            urgentPtr = 0x31d0
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 8:
        ethernet =
            dstAddr = 0x13d1f75fa153
            srcAddr = 0x18b6bf119266
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0xf01
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0xb
            diffserv = 0xbb
            totalLen = 0x156e
            identification = 0x7d1a
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0x00
            protocol = 0x06
            hdrChecksum = 0xc39e
            srcAddr = 0x550b62d0
            dstAddr = 0x913af500
        tcp =
            srcPort = 0x1b74
            dstPort = 0x693c
            seqNo = 0x5ec91380
            ackNo = 0x95ead6cc
            dataOffset = 0xf
            res = 0b111
            ecn = 0b001
            ctrl = 0b001000
            window = 0x2cc6
            checksum = 0x073e
            urgentPtr = 0x31d0
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x7d1a),
                action_egress_port = hex_to_i16(0x0008),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0f01),
            ipv4_srcAddr = hex_to_i32(0x550b62d0),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0f01),
            ipv4_dstAddr = hex_to_i32(0x913af500),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01e6),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x13\xd1\xf7\x5f\xa1\x53',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x18\xb6\xbf\x11\x92\x66',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0f01),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x04),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0b),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xbb),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x156e),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x8542),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x00),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x0254),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x913af500),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x550b62d0),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x1b74),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x693c),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x5ec91380),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x95ead6cc),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x08),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x2cc6),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x073e),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x31d0),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xc682),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xdf85),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x7544),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01b2),), 0))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\x13\xd1\xf7\x5f\xa1\x53\x18\xb6\xbf\x11\x92\x66\x81\x00\x8f\x01\x08\x00\x4b\xbb\x15\x6e\x85\x42\x20\x00\x00\x06\x02\x54\x55\x0b\x62\xd0\x91\x3a\xf5\x00\x1b\x74\x69\x3c\x5e\xc9\x13\x80\x95\xea\xd6\xcc\xfe\x48\x2c\xc6\x07\x3e\x31\xd0\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 8
        exp_pkt = b'\x13\xd1\xf7\x5f\xa1\x53\x18\xb6\xbf\x11\x92\x66\x81\x00\x8f\x01\x08\x00\x4b\xbb\x15\x6e\x7d\x1a\x20\x00\x00\x06\xc3\x9e\x55\x0b\x62\xd0\x91\x3a\xf5\x00\x1b\x74\x69\x3c\x5e\xc9\x13\x80\x95\xea\xd6\xcc\xfe\x48\x2c\xc6\x07\x3e\x31\xd0\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test32(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x6cff90f68d89
            srcAddr = 0xe1c6c289420b
            etherType = 0x8100
        vlan_tag =
            pri = 0b101
            cfi = 0b0
            vlan_id = 0x45b
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0x7
            diffserv = 0x82
            totalLen = 0xa47e
            identification = 0xc5a7
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0xa0
            protocol = 0x06
            hdrChecksum = 0x022c
            srcAddr = 0xbc5abaff
            dstAddr = 0xb0bc755d
        tcp =
            srcPort = 0x0677
            dstPort = 0xf3e0
            seqNo = 0x13d7651d
            ackNo = 0x193211e7
            dataOffset = 0x1
            res = 0b000
            ecn = 0b111
            ctrl = 0b101110
            window = 0xcb5b
            checksum = 0x6075
            urgentPtr = 0xdf7f
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x6fc6),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x045b),
            ipv4_srcAddr = hex_to_i32(0xbc5abaff),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x045b),
            ipv4_dstAddr = hex_to_i32(0xb0bc755d),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x00c2),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x6c\xff\x90\xf6\x8d\x89',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xe1\xc6\xc2\x89\x42\x0b',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x05),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x045b),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x04),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x07),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x82),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xa47e),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xc5a7),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xa0),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x022c),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xb0bc755d),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xbc5abaff),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x0677),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0xf3e0),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x13d7651d),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x193211e7),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x01),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x2e),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0xcb5b),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x6075),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0xdf7f),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xaa10),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x3927),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x075e),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x00cc),), 0))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x6c\xff\x90\xf6\x8d\x89\xe1\xc6\xc2\x89\x42\x0b\x81\x00\xa4\x5b\x08\x00\x47\x82\xa4\x7e\xc5\xa7\xe0\x00\xa0\x06\x02\x2c\xbc\x5a\xba\xff\xb0\xbc\x75\x5d\x06\x77\xf3\xe0\x13\xd7\x65\x1d\x19\x32\x11\xe7\x11\xee\xcb\x5b\x60\x75\xdf\x7f\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test33(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0xaa3157373b3e
            srcAddr = 0x5fb54572fde7
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0x78b
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0xd
            diffserv = 0x01
            totalLen = 0xad67
            identification = 0x1588
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0x54
            protocol = 0x06
            hdrChecksum = 0x3b2c
            srcAddr = 0xf2a1d77a
            dstAddr = 0x179c5925
        tcp =
            srcPort = 0xf490
            dstPort = 0xf219
            seqNo = 0x546099bc
            ackNo = 0x1992332c
            dataOffset = 0xb
            res = 0b100
            ecn = 0b111
            ctrl = 0b000111
            window = 0x7778
            checksum = 0xd8fa
            urgentPtr = 0x1492
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x078b),
            ipv4_srcAddr = hex_to_i32(0xf2a1d77a),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x078b),
            ipv4_dstAddr = hex_to_i32(0x179c5925),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xaa\x31\x57\x37\x3b\x3e',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x5f\xb5\x45\x72\xfd\xe7',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x078b),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x00),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0d),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x01),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xad67),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x1588),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x04),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x54),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x3b2c),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x179c5925),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xf2a1d77a),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xf490),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0xf219),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x546099bc),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x1992332c),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0b),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x07),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x7778),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0xd8fa),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x1492),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x63cb),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x2989),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x035d),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01a8),), 0))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\xaa\x31\x57\x37\x3b\x3e\x5f\xb5\x45\x72\xfd\xe7\x81\x00\x87\x8b\x08\x00\x0d\x01\xad\x67\x15\x88\x80\x00\x54\x06\x3b\x2c\xf2\xa1\xd7\x7a\x17\x9c\x59\x25\xf4\x90\xf2\x19\x54\x60\x99\xbc\x19\x92\x33\x2c\xb9\xc7\x77\x78\xd8\xfa\x14\x92\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test34(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xb3078b364a17
            srcAddr = 0xd950d5fe62b7
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0x6ac
            etherType = 0x0800
        ipv4 =
            version = 0xe
            ihl = 0x7
            diffserv = 0xd2
            totalLen = 0x9dec
            identification = 0xb52a
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0xe9
            protocol = 0x06
            hdrChecksum = 0x61d1
            srcAddr = 0x837d956d
            dstAddr = 0x5cc87c8a
        tcp =
            srcPort = 0x5773
            dstPort = 0xca20
            seqNo = 0x115bf7e4
            ackNo = 0x65663aae
            dataOffset = 0x1
            res = 0b010
            ecn = 0b111
            ctrl = 0b000101
            window = 0xb0ab
            checksum = 0xc684
            urgentPtr = 0x6cab
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 15:
        ethernet =
            dstAddr = 0xb3078b364a17
            srcAddr = 0xd950d5fe62b7
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0x6ac
            etherType = 0x0800
        ipv4 =
            version = 0xe
            ihl = 0x7
            diffserv = 0xd2
            totalLen = 0x9dec
            identification = 0xb52a
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0xe9
            protocol = 0x06
            hdrChecksum = 0x29d0
            srcAddr = 0x837d956d
            dstAddr = 0x5cc87c8a
        tcp =
            srcPort = 0x5773
            dstPort = 0xca20
            seqNo = 0x115bf7e4
            ackNo = 0x65663aae
            dataOffset = 0x1
            res = 0b010
            ecn = 0b111
            ctrl = 0b000101
            window = 0xb0ab
            checksum = 0xc684
            urgentPtr = 0x6cab
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x06ac),
            ipv4_srcAddr = hex_to_i32(0x837d956d),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x06ac),
            ipv4_dstAddr = hex_to_i32(0x5cc87c8a),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x000f),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xb3\x07\x8b\x36\x4a\x17',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xd9\x50\xd5\xfe\x62\xb7',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x06ac),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0e),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x07),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xd2),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x9dec),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xb52a),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xe9),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x61d1),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x5cc87c8a),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x837d956d),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x5773),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0xca20),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x115bf7e4),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x65663aae),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x01),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x05),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0xb0ab),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0xc684),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x6cab),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x932e),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x0496),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xa14e),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x00a5),), 0))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xb3\x07\x8b\x36\x4a\x17\xd9\x50\xd5\xfe\x62\xb7\x81\x00\xe6\xac\x08\x00\xe7\xd2\x9d\xec\xb5\x2a\xc0\x00\xe9\x06\x61\xd1\x83\x7d\x95\x6d\x5c\xc8\x7c\x8a\x57\x73\xca\x20\x11\x5b\xf7\xe4\x65\x66\x3a\xae\x15\xc5\xb0\xab\xc6\x84\x6c\xab\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 15
        exp_pkt = b'\xb3\x07\x8b\x36\x4a\x17\xd9\x50\xd5\xfe\x62\xb7\x81\x00\xe6\xac\x08\x00\xe7\xd2\x9d\xec\xb5\x2a\xc0\x00\xe9\x06\x29\xd0\x83\x7d\x95\x6d\x5c\xc8\x7c\x8a\x57\x73\xca\x20\x11\x5b\xf7\xe4\x65\x66\x3a\xae\x15\xc5\xb0\xab\xc6\x84\x6c\xab\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test35(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x4391e35c7901
            srcAddr = 0x06e67b27fef3
            etherType = 0x8100
        vlan_tag =
            pri = 0b000
            cfi = 0b0
            vlan_id = 0x8a7
            etherType = 0x0800
        ipv4 =
            version = 0x9
            ihl = 0x9
            diffserv = 0x65
            totalLen = 0x6bb6
            identification = 0x4109
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0x90
            protocol = 0x06
            hdrChecksum = 0xb49a
            srcAddr = 0xf6f79b1f
            dstAddr = 0xd4c9cce6
        tcp =
            srcPort = 0x14c7
            dstPort = 0xdd13
            seqNo = 0xebb4472f
            ackNo = 0x14db98fd
            dataOffset = 0x1
            res = 0b001
            ecn = 0b111
            ctrl = 0b001111
            window = 0x6e9a
            checksum = 0xb4f9
            urgentPtr = 0xd5ec
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x08a7),
            ipv4_dstAddr = hex_to_i32(0xd4c9cce6),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x43\x91\xe3\x5c\x79\x01',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x06\xe6\x7b\x27\xfe\xf3',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x00),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x08a7),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x09),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x09),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x65),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x6bb6),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x4109),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x90),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xb49a),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xd4c9cce6),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xf6f79b1f),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x14c7),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0xdd13),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0xebb4472f),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x14db98fd),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x01),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x01),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x0f),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x6e9a),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0xb4f9),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0xd5ec),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x0fe4),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x19a9),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x7934),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x43\x91\xe3\x5c\x79\x01\x06\xe6\x7b\x27\xfe\xf3\x81\x00\x08\xa7\x08\x00\x99\x65\x6b\xb6\x41\x09\x20\x00\x90\x06\xb4\x9a\xf6\xf7\x9b\x1f\xd4\xc9\xcc\xe6\x14\xc7\xdd\x13\xeb\xb4\x47\x2f\x14\xdb\x98\xfd\x13\xcf\x6e\x9a\xb4\xf9\xd5\xec\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test36(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x8ac3d6188ef7
            srcAddr = 0x9e8345ef7b17
            etherType = 0x8100
        vlan_tag =
            pri = 0b000
            cfi = 0b0
            vlan_id = 0xb6a
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0x1
            diffserv = 0xb8
            totalLen = 0xc891
            identification = 0xfd49
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0xcf
            protocol = 0x06
            hdrChecksum = 0x954b
            srcAddr = 0x324dabfe
            dstAddr = 0x3cfa1fa6
        tcp =
            srcPort = 0x31e2
            dstPort = 0xf74b
            seqNo = 0x780825a1
            ackNo = 0x3d13a9a6
            dataOffset = 0x7
            res = 0b110
            ecn = 0b111
            ctrl = 0b101100
            window = 0x0ea4
            checksum = 0xa0be
            urgentPtr = 0x8c12
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 0:
        ethernet =
            dstAddr = 0x8ac3d6188ef7
            srcAddr = 0x9e8345ef7b17
            etherType = 0x8100
        vlan_tag =
            pri = 0b000
            cfi = 0b0
            vlan_id = 0xb6a
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0x1
            diffserv = 0xb8
            totalLen = 0xc891
            identification = 0xfd49
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0xcf
            protocol = 0x06
            hdrChecksum = 0x4e78
            srcAddr = 0x324dabfe
            dstAddr = 0x3cfa1fa6
        tcp =
            srcPort = 0x31e2
            dstPort = 0xf74b
            seqNo = 0x780825a1
            ackNo = 0x3d13a9a6
            dataOffset = 0x7
            res = 0b110
            ecn = 0b111
            ctrl = 0b101100
            window = 0x0ea4
            checksum = 0xa0be
            urgentPtr = 0x8c12
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0b6a),
            ipv4_dstAddr = hex_to_i32(0x3cfa1fa6),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x8a\xc3\xd6\x18\x8e\xf7',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x9e\x83\x45\xef\x7b\x17',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x00),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0b6a),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x04),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x01),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xb8),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xc891),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xfd49),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x05),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xcf),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x954b),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x3cfa1fa6),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x324dabfe),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x31e2),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0xf74b),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x780825a1),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x3d13a9a6),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x07),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x2c),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x0ea4),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0xa0be),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x8c12),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x8008),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x8e5a),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x224f),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0000),), 0))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x8a\xc3\xd6\x18\x8e\xf7\x9e\x83\x45\xef\x7b\x17\x81\x00\x0b\x6a\x08\x00\x41\xb8\xc8\x91\xfd\x49\xa0\x00\xcf\x06\x95\x4b\x32\x4d\xab\xfe\x3c\xfa\x1f\xa6\x31\xe2\xf7\x4b\x78\x08\x25\xa1\x3d\x13\xa9\xa6\x7d\xec\x0e\xa4\xa0\xbe\x8c\x12\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 0
        exp_pkt = b'\x8a\xc3\xd6\x18\x8e\xf7\x9e\x83\x45\xef\x7b\x17\x81\x00\x0b\x6a\x08\x00\x41\xb8\xc8\x91\xfd\x49\xa0\x00\xcf\x06\x4e\x78\x32\x4d\xab\xfe\x3c\xfa\x1f\xa6\x31\xe2\xf7\x4b\x78\x08\x25\xa1\x3d\x13\xa9\xa6\x7d\xec\x0e\xa4\xa0\xbe\x8c\x12\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test37(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0x5b47cb8e5ff7
            srcAddr = 0xa6c4b274c450
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x1ae
            etherType = 0x0800
        ipv4 =
            version = 0xe
            ihl = 0x3
            diffserv = 0xcd
            totalLen = 0x61e2
            identification = 0xcee4
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0x05
            protocol = 0x06
            hdrChecksum = 0xbea2
            srcAddr = 0xd1552c93
            dstAddr = 0x4d4d8621
        tcp =
            srcPort = 0xe260
            dstPort = 0x115a
            seqNo = 0x32aaa158
            ackNo = 0x0e4809a9
            dataOffset = 0x0
            res = 0b110
            ecn = 0b100
            ctrl = 0b100001
            window = 0xaa6a
            checksum = 0x08cd
            urgentPtr = 0x7843
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 10:
        ethernet =
            dstAddr = 0x5b47cb8e5ff7
            srcAddr = 0xa6c4b274c450
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x1ae
            etherType = 0x0800
        ipv4 =
            version = 0xe
            ihl = 0x3
            diffserv = 0xcd
            totalLen = 0x61e2
            identification = 0xcee4
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0x05
            protocol = 0x06
            hdrChecksum = 0xb50c
            srcAddr = 0xd1552c93
            dstAddr = 0x4d4d8621
        tcp =
            srcPort = 0xe260
            dstPort = 0x115a
            seqNo = 0x32aaa158
            ackNo = 0x0e4809a9
            dataOffset = 0x0
            res = 0b110
            ecn = 0b100
            ctrl = 0b100001
            window = 0xaa6a
            checksum = 0x08cd
            urgentPtr = 0x7843
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x01ae),
            ipv4_srcAddr = hex_to_i32(0xd1552c93),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x01ae),
            ipv4_dstAddr = hex_to_i32(0x4d4d8621),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x5b\x47\xcb\x8e\x5f\xf7',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xa6\xc4\xb2\x74\xc4\x50',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x01ae),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0e),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x03),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xcd),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x61e2),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xcee4),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x03),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x05),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xbea2),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x4d4d8621),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xd1552c93),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xe260),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x115a),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x32aaa158),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x0e4809a9),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x00),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x21),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0xaa6a),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x08cd),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x7843),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x1a81),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xd450),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x4ad6),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x000a),), 0))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\x5b\x47\xcb\x8e\x5f\xf7\xa6\xc4\xb2\x74\xc4\x50\x81\x00\xc1\xae\x08\x00\xe3\xcd\x61\xe2\xce\xe4\x60\x00\x05\x06\xbe\xa2\xd1\x55\x2c\x93\x4d\x4d\x86\x21\xe2\x60\x11\x5a\x32\xaa\xa1\x58\x0e\x48\x09\xa9\x0d\x21\xaa\x6a\x08\xcd\x78\x43\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 10
        exp_pkt = b'\x5b\x47\xcb\x8e\x5f\xf7\xa6\xc4\xb2\x74\xc4\x50\x81\x00\xc1\xae\x08\x00\xe3\xcd\x61\xe2\xce\xe4\x60\x00\x05\x06\xb5\x0c\xd1\x55\x2c\x93\x4d\x4d\x86\x21\xe2\x60\x11\x5a\x32\xaa\xa1\x58\x0e\x48\x09\xa9\x0d\x21\xaa\x6a\x08\xcd\x78\x43\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test38(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0xa8576c0f64d9
            srcAddr = 0x40a4563b5674
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0x250
            etherType = 0x0800
        ipv4 =
            version = 0x8
            ihl = 0xc
            diffserv = 0x5a
            totalLen = 0xec9c
            identification = 0x69c2
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0xa4
            protocol = 0x06
            hdrChecksum = 0x30ed
            srcAddr = 0x7edec0e6
            dstAddr = 0x66edcff4
        tcp =
            srcPort = 0x494b
            dstPort = 0x55eb
            seqNo = 0xb02cb194
            ackNo = 0x9731679b
            dataOffset = 0x2
            res = 0b111
            ecn = 0b000
            ctrl = 0b110000
            window = 0x75f5
            checksum = 0x24db
            urgentPtr = 0xfc0d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0250),
            ipv4_srcAddr = hex_to_i32(0x7edec0e6),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0250),
            ipv4_dstAddr = hex_to_i32(0x66edcff4),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xa8\x57\x6c\x0f\x64\xd9',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x40\xa4\x56\x3b\x56\x74',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0250),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x08),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0c),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x5a),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xec9c),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x69c2),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xa4),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x30ed),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x66edcff4),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x7edec0e6),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x494b),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x55eb),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0xb02cb194),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x9731679b),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x02),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x30),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x75f5),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x24db),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0xfc0d),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x08ed),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x416d),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x0ce4),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\xa8\x57\x6c\x0f\x64\xd9\x40\xa4\x56\x3b\x56\x74\x81\x00\x82\x50\x08\x00\x8c\x5a\xec\x9c\x69\xc2\x00\x00\xa4\x06\x30\xed\x7e\xde\xc0\xe6\x66\xed\xcf\xf4\x49\x4b\x55\xeb\xb0\x2c\xb1\x94\x97\x31\x67\x9b\x2e\x30\x75\xf5\x24\xdb\xfc\x0d\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test39(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x7b3cd060c4b2
            srcAddr = 0x7a149d0d3301
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0xb15
            etherType = 0x0800
        ipv4 =
            version = 0x1
            ihl = 0x6
            diffserv = 0xb5
            totalLen = 0xa35a
            identification = 0x2ab5
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0x05
            protocol = 0x06
            hdrChecksum = 0x2f11
            srcAddr = 0x7069956f
            dstAddr = 0x1e30e9ab
        tcp =
            srcPort = 0x50ab
            dstPort = 0x67e7
            seqNo = 0x7bce752e
            ackNo = 0x3866514b
            dataOffset = 0xc
            res = 0b010
            ecn = 0b000
            ctrl = 0b110111
            window = 0x0770
            checksum = 0xc7a7
            urgentPtr = 0x515d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x30ed),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0b15),
            ipv4_srcAddr = hex_to_i32(0x7069956f),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0b15),
            ipv4_dstAddr = hex_to_i32(0x1e30e9ab),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x7b\x3c\xd0\x60\xc4\xb2',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x7a\x14\x9d\x0d\x33\x01',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0b15),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x01),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x06),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xb5),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xa35a),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x2ab5),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x04),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x05),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x2f11),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x1e30e9ab),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x7069956f),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x50ab),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x67e7),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x7bce752e),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x3866514b),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0c),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x37),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x0770),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0xc7a7),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x515d),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x9f17),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x1b29),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xd348),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01a7),), 0))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x7b\x3c\xd0\x60\xc4\xb2\x7a\x14\x9d\x0d\x33\x01\x81\x00\x8b\x15\x08\x00\x16\xb5\xa3\x5a\x2a\xb5\x80\x00\x05\x06\x2f\x11\x70\x69\x95\x6f\x1e\x30\xe9\xab\x50\xab\x67\xe7\x7b\xce\x75\x2e\x38\x66\x51\x4b\xc4\x37\x07\x70\xc7\xa7\x51\x5d\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test40(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0xfcee699f6a4b
            srcAddr = 0xc83f71f79ca7
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0xbd1
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0x6
            diffserv = 0x32
            totalLen = 0x30c1
            identification = 0xa093
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0xe6
            protocol = 0x06
            hdrChecksum = 0x00ff
            srcAddr = 0x75a292c2
            dstAddr = 0x6d8461d9
        tcp =
            srcPort = 0x702d
            dstPort = 0x2060
            seqNo = 0xa6a61148
            ackNo = 0x9d5401e7
            dataOffset = 0xc
            res = 0b010
            ecn = 0b110
            ctrl = 0b001011
            window = 0x9afd
            checksum = 0xbd25
            urgentPtr = 0x20cf
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 13:
        ethernet =
            dstAddr = 0xfcee699f6a4b
            srcAddr = 0xc83f71f79ca7
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0xbd1
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0x6
            diffserv = 0x32
            totalLen = 0x30c1
            identification = 0xecb1
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0xe6
            protocol = 0x06
            hdrChecksum = 0xbe90
            srcAddr = 0x75a292c2
            dstAddr = 0x6d8461d9
        tcp =
            srcPort = 0x702d
            dstPort = 0x2060
            seqNo = 0xa6a61148
            ackNo = 0x9d5401e7
            dataOffset = 0xc
            res = 0b010
            ecn = 0b110
            ctrl = 0b001011
            window = 0x9afd
            checksum = 0xbd25
            urgentPtr = 0x20cf
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xecb1),
                action_egress_port = hex_to_i16(0x000d),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0bd1),
            ipv4_srcAddr = hex_to_i32(0x75a292c2),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0bd1),
            ipv4_dstAddr = hex_to_i32(0x6d8461d9),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xfc\xee\x69\x9f\x6a\x4b',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xc8\x3f\x71\xf7\x9c\xa7',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0bd1),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x06),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x06),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x32),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x30c1),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xa093),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xe6),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x00ff),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x6d8461d9),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x75a292c2),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x702d),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x2060),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0xa6a61148),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x9d5401e7),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0c),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x0b),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x9afd),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0xbd25),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x20cf),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xad09),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x5336),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x4970),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0145),), 0))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\xfc\xee\x69\x9f\x6a\x4b\xc8\x3f\x71\xf7\x9c\xa7\x81\x00\x4b\xd1\x08\x00\x66\x32\x30\xc1\xa0\x93\x00\x00\xe6\x06\x00\xff\x75\xa2\x92\xc2\x6d\x84\x61\xd9\x70\x2d\x20\x60\xa6\xa6\x11\x48\x9d\x54\x01\xe7\xc5\x8b\x9a\xfd\xbd\x25\x20\xcf\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 13
        exp_pkt = b'\xfc\xee\x69\x9f\x6a\x4b\xc8\x3f\x71\xf7\x9c\xa7\x81\x00\x4b\xd1\x08\x00\x66\x32\x30\xc1\xec\xb1\x00\x00\xe6\x06\xbe\x90\x75\xa2\x92\xc2\x6d\x84\x61\xd9\x70\x2d\x20\x60\xa6\xa6\x11\x48\x9d\x54\x01\xe7\xc5\x8b\x9a\xfd\xbd\x25\x20\xcf\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test41(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xe2fc393ce8e5
            srcAddr = 0x56d090e65091
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0x913
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0x4
            diffserv = 0x1a
            totalLen = 0x601a
            identification = 0x99b6
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0xb8
            protocol = 0x06
            hdrChecksum = 0xd9ea
            srcAddr = 0xbba235c9
            dstAddr = 0x561772a4
        tcp =
            srcPort = 0x8a83
            dstPort = 0xb832
            seqNo = 0x7b271053
            ackNo = 0x1c15bcce
            dataOffset = 0x8
            res = 0b010
            ecn = 0b000
            ctrl = 0b100111
            window = 0x8125
            checksum = 0x8b6b
            urgentPtr = 0x0229
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xe2fc393ce8e5
            srcAddr = 0x56d090e65091
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0x913
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0x4
            diffserv = 0x1a
            totalLen = 0x601a
            identification = 0x5628
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0xb8
            protocol = 0x06
            hdrChecksum = 0xb374
            srcAddr = 0xbba235c9
            dstAddr = 0x561772a4
        tcp =
            srcPort = 0x8a83
            dstPort = 0xb832
            seqNo = 0x7b271053
            ackNo = 0x1c15bcce
            dataOffset = 0x8
            res = 0b010
            ecn = 0b000
            ctrl = 0b100111
            window = 0x8125
            checksum = 0x8b6b
            urgentPtr = 0x0229
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x5628),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0913),
            ipv4_srcAddr = hex_to_i32(0xbba235c9),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xe2\xfc\x39\x3c\xe8\xe5',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x56\xd0\x90\xe6\x50\x91',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0913),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x02),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x04),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x1a),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x601a),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x99b6),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xb8),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xd9ea),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x561772a4),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xbba235c9),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x8a83),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0xb832),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x7b271053),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x1c15bcce),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x08),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x27),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x8125),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x8b6b),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x0229),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x7a97),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xce6f),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xf969),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0076),), 0))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xe2\xfc\x39\x3c\xe8\xe5\x56\xd0\x90\xe6\x50\x91\x81\x00\x49\x13\x08\x00\x24\x1a\x60\x1a\x99\xb6\x00\x00\xb8\x06\xd9\xea\xbb\xa2\x35\xc9\x56\x17\x72\xa4\x8a\x83\xb8\x32\x7b\x27\x10\x53\x1c\x15\xbc\xce\x84\x27\x81\x25\x8b\x6b\x02\x29\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xe2\xfc\x39\x3c\xe8\xe5\x56\xd0\x90\xe6\x50\x91\x81\x00\x49\x13\x08\x00\x24\x1a\x60\x1a\x56\x28\x00\x00\xb8\x06\xb3\x74\xbb\xa2\x35\xc9\x56\x17\x72\xa4\x8a\x83\xb8\x32\x7b\x27\x10\x53\x1c\x15\xbc\xce\x84\x27\x81\x25\x8b\x6b\x02\x29\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test42(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0xba9293d43ce1
            srcAddr = 0xf55aeb341f6a
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0x170
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0xd
            diffserv = 0xf3
            totalLen = 0xbf9e
            identification = 0xf521
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0x68
            protocol = 0x06
            hdrChecksum = 0x05cf
            srcAddr = 0x9682a579
            dstAddr = 0x1fb0809c
        tcp =
            srcPort = 0x14b9
            dstPort = 0xd4d7
            seqNo = 0x00b31c55
            ackNo = 0xa595ee44
            dataOffset = 0xf
            res = 0b011
            ecn = 0b010
            ctrl = 0b110001
            window = 0x7c75
            checksum = 0xdd26
            urgentPtr = 0xbb12
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x5dad),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0170),
            ipv4_srcAddr = hex_to_i32(0x9682a579),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xba\x92\x93\xd4\x3c\xe1',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xf5\x5a\xeb\x34\x1f\x6a',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0170),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0a),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0d),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xf3),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xbf9e),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xf521),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x68),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x05cf),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x1fb0809c),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x9682a579),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x14b9),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0xd4d7),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x00b31c55),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0xa595ee44),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x31),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x7c75),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0xdd26),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0xbb12),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x20eb),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x90ae),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xef67),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0063),), 0))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\xba\x92\x93\xd4\x3c\xe1\xf5\x5a\xeb\x34\x1f\x6a\x81\x00\x41\x70\x08\x00\xad\xf3\xbf\x9e\xf5\x21\x20\x00\x68\x06\x05\xcf\x96\x82\xa5\x79\x1f\xb0\x80\x9c\x14\xb9\xd4\xd7\x00\xb3\x1c\x55\xa5\x95\xee\x44\xf6\xb1\x7c\x75\xdd\x26\xbb\x12\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test43(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0xd541dd5b3214
            srcAddr = 0xed209a610dc5
            etherType = 0x8100
        vlan_tag =
            pri = 0b101
            cfi = 0b0
            vlan_id = 0x66d
            etherType = 0x0800
        ipv4 =
            version = 0xb
            ihl = 0xf
            diffserv = 0xa9
            totalLen = 0xb03c
            identification = 0xf83f
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0xb9
            protocol = 0x06
            hdrChecksum = 0x317b
            srcAddr = 0xc8c9ba41
            dstAddr = 0x173634ed
        tcp =
            srcPort = 0x2284
            dstPort = 0xfa96
            seqNo = 0x70676918
            ackNo = 0xc8edef55
            dataOffset = 0x4
            res = 0b000
            ecn = 0b000
            ctrl = 0b000001
            window = 0x2476
            checksum = 0x65ed
            urgentPtr = 0xa6ce
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 2:
        ethernet =
            dstAddr = 0xd541dd5b3214
            srcAddr = 0xed209a610dc5
            etherType = 0x8100
        vlan_tag =
            pri = 0b101
            cfi = 0b0
            vlan_id = 0x66d
            etherType = 0x0800
        ipv4 =
            version = 0xb
            ihl = 0xf
            diffserv = 0xa9
            totalLen = 0xb03c
            identification = 0xf83f
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0xb9
            protocol = 0x06
            hdrChecksum = 0x2fa3
            srcAddr = 0xc8c9ba41
            dstAddr = 0x173634ed
        tcp =
            srcPort = 0x2284
            dstPort = 0xfa96
            seqNo = 0x70676918
            ackNo = 0xc8edef55
            dataOffset = 0x4
            res = 0b000
            ecn = 0b000
            ctrl = 0b000001
            window = 0x2476
            checksum = 0x65ed
            urgentPtr = 0xa6ce
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x066d),
            ipv4_srcAddr = hex_to_i32(0xc8c9ba41),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xd5\x41\xdd\x5b\x32\x14',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xed\x20\x9a\x61\x0d\xc5',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x05),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x066d),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0b),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0f),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xa9),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xb03c),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xf83f),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xb9),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x317b),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x173634ed),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xc8c9ba41),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x2284),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0xfa96),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x70676918),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0xc8edef55),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x04),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x01),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x2476),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x65ed),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0xa6ce),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x9dbd),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x0dcf),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xa1e6),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0002),), 0))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\xd5\x41\xdd\x5b\x32\x14\xed\x20\x9a\x61\x0d\xc5\x81\x00\xa6\x6d\x08\x00\xbf\xa9\xb0\x3c\xf8\x3f\xe0\x00\xb9\x06\x31\x7b\xc8\xc9\xba\x41\x17\x36\x34\xed\x22\x84\xfa\x96\x70\x67\x69\x18\xc8\xed\xef\x55\x40\x01\x24\x76\x65\xed\xa6\xce\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 2
        exp_pkt = b'\xd5\x41\xdd\x5b\x32\x14\xed\x20\x9a\x61\x0d\xc5\x81\x00\xa6\x6d\x08\x00\xbf\xa9\xb0\x3c\xf8\x3f\xe0\x00\xb9\x06\x2f\xa3\xc8\xc9\xba\x41\x17\x36\x34\xed\x22\x84\xfa\x96\x70\x67\x69\x18\xc8\xed\xef\x55\x40\x01\x24\x76\x65\xed\xa6\xce\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test44(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0xbbe4ed5ac22f
            srcAddr = 0x8789e2c9474b
            etherType = 0x8100
        vlan_tag =
            pri = 0b000
            cfi = 0b0
            vlan_id = 0x0d8
            etherType = 0x0800
        ipv4 =
            version = 0xb
            ihl = 0xf
            diffserv = 0x84
            totalLen = 0x129a
            identification = 0xead5
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0x29
            protocol = 0x06
            hdrChecksum = 0xb7e8
            srcAddr = 0xb7457b1b
            dstAddr = 0x07c44ace
        tcp =
            srcPort = 0x294f
            dstPort = 0x597f
            seqNo = 0x23f55bf3
            ackNo = 0xe6f56125
            dataOffset = 0x1
            res = 0b011
            ecn = 0b101
            ctrl = 0b010111
            window = 0xb16a
            checksum = 0x6a54
            urgentPtr = 0xc688
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x00d8),
            ipv4_srcAddr = hex_to_i32(0xb7457b1b),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xbb\xe4\xed\x5a\xc2\x2f',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x87\x89\xe2\xc9\x47\x4b',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x00),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x00d8),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0b),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0f),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x84),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x129a),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xead5),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x29),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xb7e8),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x07c44ace),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xb7457b1b),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x294f),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x597f),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x23f55bf3),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0xe6f56125),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x01),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x05),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x17),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0xb16a),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x6a54),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0xc688),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x0635),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xdaeb),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x52aa),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\xbb\xe4\xed\x5a\xc2\x2f\x87\x89\xe2\xc9\x47\x4b\x81\x00\x00\xd8\x08\x00\xbf\x84\x12\x9a\xea\xd5\xc0\x00\x29\x06\xb7\xe8\xb7\x45\x7b\x1b\x07\xc4\x4a\xce\x29\x4f\x59\x7f\x23\xf5\x5b\xf3\xe6\xf5\x61\x25\x17\x57\xb1\x6a\x6a\x54\xc6\x88\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test45(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x4a8042e45b31
            srcAddr = 0xae72a9f97c53
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0xfa7
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0x7
            diffserv = 0x93
            totalLen = 0x2b5b
            identification = 0x50e4
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0xbf
            protocol = 0x06
            hdrChecksum = 0x4daa
            srcAddr = 0x1e7f2b2a
            dstAddr = 0xa2f793e7
        tcp =
            srcPort = 0x0c61
            dstPort = 0xf36b
            seqNo = 0xf3415fcc
            ackNo = 0x3666f021
            dataOffset = 0x5
            res = 0b000
            ecn = 0b000
            ctrl = 0b011100
            window = 0xd635
            checksum = 0xfda1
            urgentPtr = 0x1023
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 4:
        ethernet =
            dstAddr = 0x4a8042e45b31
            srcAddr = 0xae72a9f97c53
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0xfa7
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0x7
            diffserv = 0x93
            totalLen = 0x2b5b
            identification = 0x50e4
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0xbf
            protocol = 0x06
            hdrChecksum = 0x9c9d
            srcAddr = 0x1e7f2b2a
            dstAddr = 0xa2f793e7
        tcp =
            srcPort = 0x0c61
            dstPort = 0xf36b
            seqNo = 0xf3415fcc
            ackNo = 0x3666f021
            dataOffset = 0x5
            res = 0b000
            ecn = 0b000
            ctrl = 0b011100
            window = 0xd635
            checksum = 0xfda1
            urgentPtr = 0x1023
    """
    
    def setupCtrlPlane(self):
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x4a\x80\x42\xe4\x5b\x31',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xae\x72\xa9\xf9\x7c\x53',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0fa7),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x06),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x07),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x93),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x2b5b),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x50e4),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xbf),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x4daa),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xa2f793e7),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x1e7f2b2a),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x0c61),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0xf36b),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0xf3415fcc),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x3666f021),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x05),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x1c),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0xd635),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0xfda1),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x1023),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xece4),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x6f9f),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x8154),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0004),), 0))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x4a\x80\x42\xe4\x5b\x31\xae\x72\xa9\xf9\x7c\x53\x81\x00\xef\xa7\x08\x00\x67\x93\x2b\x5b\x50\xe4\x40\x00\xbf\x06\x4d\xaa\x1e\x7f\x2b\x2a\xa2\xf7\x93\xe7\x0c\x61\xf3\x6b\xf3\x41\x5f\xcc\x36\x66\xf0\x21\x50\x1c\xd6\x35\xfd\xa1\x10\x23\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 4
        exp_pkt = b'\x4a\x80\x42\xe4\x5b\x31\xae\x72\xa9\xf9\x7c\x53\x81\x00\xef\xa7\x08\x00\x67\x93\x2b\x5b\x50\xe4\x40\x00\xbf\x06\x9c\x9d\x1e\x7f\x2b\x2a\xa2\xf7\x93\xe7\x0c\x61\xf3\x6b\xf3\x41\x5f\xcc\x36\x66\xf0\x21\x50\x1c\xd6\x35\xfd\xa1\x10\x23\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test46(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x4c60138aeaf6
            srcAddr = 0x266ca74d7f0f
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0xbc0
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0xa
            diffserv = 0x75
            totalLen = 0x8133
            identification = 0x4d80
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0xe1
            protocol = 0x06
            hdrChecksum = 0xa50d
            srcAddr = 0xf4cc9baf
            dstAddr = 0xca48400b
        tcp =
            srcPort = 0x172e
            dstPort = 0x663e
            seqNo = 0x1eb0d25f
            ackNo = 0xfc5df11f
            dataOffset = 0x1
            res = 0b000
            ecn = 0b000
            ctrl = 0b101101
            window = 0x1e36
            checksum = 0x34cf
            urgentPtr = 0x4763
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x4c\x60\x13\x8a\xea\xf6',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x26\x6c\xa7\x4d\x7f\x0f',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0bc0),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0a),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0a),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x75),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x8133),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x4d80),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xe1),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xa50d),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xca48400b),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xf4cc9baf),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x172e),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x663e),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x1eb0d25f),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0xfc5df11f),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x01),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x2d),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x1e36),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x34cf),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x4763),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xabdd),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x9c79),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xe4d9),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x4c\x60\x13\x8a\xea\xf6\x26\x6c\xa7\x4d\x7f\x0f\x81\x00\xcb\xc0\x08\x00\xaa\x75\x81\x33\x4d\x80\x40\x00\xe1\x06\xa5\x0d\xf4\xcc\x9b\xaf\xca\x48\x40\x0b\x17\x2e\x66\x3e\x1e\xb0\xd2\x5f\xfc\x5d\xf1\x1f\x10\x2d\x1e\x36\x34\xcf\x47\x63\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test47(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0xe01ea12cfd19
            srcAddr = 0x1fea6c5abdc7
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0x4c3
            etherType = 0x0800
        ipv4 =
            version = 0xd
            ihl = 0xa
            diffserv = 0x16
            totalLen = 0xa106
            identification = 0x61f2
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0xa3
            protocol = 0x06
            hdrChecksum = 0xcab8
            srcAddr = 0xb16ba209
            dstAddr = 0x3637c4c4
        tcp =
            srcPort = 0x8e9c
            dstPort = 0x727a
            seqNo = 0x1ef10583
            ackNo = 0xc3c049b6
            dataOffset = 0xf
            res = 0b101
            ecn = 0b100
            ctrl = 0b000011
            window = 0x41b0
            checksum = 0xcbd7
            urgentPtr = 0x94b5
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xe01ea12cfd19
            srcAddr = 0x1fea6c5abdc7
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0x4c3
            etherType = 0x0800
        ipv4 =
            version = 0xd
            ihl = 0xa
            diffserv = 0x16
            totalLen = 0xa106
            identification = 0x61f2
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0xa3
            protocol = 0x06
            hdrChecksum = 0x1178
            srcAddr = 0xb16ba209
            dstAddr = 0x3637c4c4
        tcp =
            srcPort = 0x8e9c
            dstPort = 0x727a
            seqNo = 0x1ef10583
            ackNo = 0xc3c049b6
            dataOffset = 0xf
            res = 0b101
            ecn = 0b100
            ctrl = 0b000011
            window = 0x41b0
            checksum = 0xcbd7
            urgentPtr = 0x94b5
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x04c3),
            ipv4_dstAddr = hex_to_i32(0x3637c4c4),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xe0\x1e\xa1\x2c\xfd\x19',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x1f\xea\x6c\x5a\xbd\xc7',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x04c3),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0d),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0a),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x16),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xa106),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x61f2),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xa3),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xcab8),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x3637c4c4),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xb16ba209),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x8e9c),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x727a),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x1ef10583),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0xc3c049b6),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x05),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x03),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x41b0),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0xcbd7),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x94b5),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x1d7a),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x3e6b),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xa4ab),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\xe0\x1e\xa1\x2c\xfd\x19\x1f\xea\x6c\x5a\xbd\xc7\x81\x00\x64\xc3\x08\x00\xda\x16\xa1\x06\x61\xf2\x20\x00\xa3\x06\xca\xb8\xb1\x6b\xa2\x09\x36\x37\xc4\xc4\x8e\x9c\x72\x7a\x1e\xf1\x05\x83\xc3\xc0\x49\xb6\xfb\x03\x41\xb0\xcb\xd7\x94\xb5\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xe0\x1e\xa1\x2c\xfd\x19\x1f\xea\x6c\x5a\xbd\xc7\x81\x00\x64\xc3\x08\x00\xda\x16\xa1\x06\x61\xf2\x20\x00\xa3\x06\x11\x78\xb1\x6b\xa2\x09\x36\x37\xc4\xc4\x8e\x9c\x72\x7a\x1e\xf1\x05\x83\xc3\xc0\x49\xb6\xfb\x03\x41\xb0\xcb\xd7\x94\xb5\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test48(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xa327235b58ec
            srcAddr = 0x4ccc41b6d00f
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0x6c2
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0x2
            diffserv = 0xf6
            totalLen = 0x00e7
            identification = 0xe917
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0x3c
            protocol = 0x06
            hdrChecksum = 0xe16c
            srcAddr = 0xeb07e16d
            dstAddr = 0xc3a63d7c
        tcp =
            srcPort = 0x03c7
            dstPort = 0x66b0
            seqNo = 0xf0c59eef
            ackNo = 0xd3e9e6ac
            dataOffset = 0xb
            res = 0b010
            ecn = 0b101
            ctrl = 0b010101
            window = 0x678b
            checksum = 0xf6c7
            urgentPtr = 0x6a58
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x06c2),
            ipv4_dstAddr = hex_to_i32(0xc3a63d7c),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xa3\x27\x23\x5b\x58\xec',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x4c\xcc\x41\xb6\xd0\x0f',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x06c2),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0f),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x02),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xf6),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x00e7),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xe917),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x3c),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xe16c),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xc3a63d7c),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xeb07e16d),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x03c7),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x66b0),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0xf0c59eef),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0xd3e9e6ac),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0b),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x05),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x15),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x678b),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0xf6c7),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x6a58),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x8537),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x2984),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x4fdc),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xa3\x27\x23\x5b\x58\xec\x4c\xcc\x41\xb6\xd0\x0f\x81\x00\x46\xc2\x08\x00\xf2\xf6\x00\xe7\xe9\x17\x20\x00\x3c\x06\xe1\x6c\xeb\x07\xe1\x6d\xc3\xa6\x3d\x7c\x03\xc7\x66\xb0\xf0\xc5\x9e\xef\xd3\xe9\xe6\xac\xb5\x55\x67\x8b\xf6\xc7\x6a\x58\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test49(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x46c4f35e4201
            srcAddr = 0x724992e47bff
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0xaf5
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0x9
            diffserv = 0x58
            totalLen = 0x0925
            identification = 0x9fae
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0x2e
            protocol = 0x06
            hdrChecksum = 0xe538
            srcAddr = 0xbc05fdda
            dstAddr = 0xcc8d374b
        tcp =
            srcPort = 0xd6b6
            dstPort = 0x3f6a
            seqNo = 0x357c4416
            ackNo = 0x3f5d4e0c
            dataOffset = 0xc
            res = 0b010
            ecn = 0b001
            ctrl = 0b000111
            window = 0x17d7
            checksum = 0x892b
            urgentPtr = 0x1866
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 0:
        ethernet =
            dstAddr = 0x46c4f35e4201
            srcAddr = 0x724992e47bff
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0xaf5
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0x9
            diffserv = 0x58
            totalLen = 0x0925
            identification = 0x9fae
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0x2e
            protocol = 0x06
            hdrChecksum = 0x5213
            srcAddr = 0xbc05fdda
            dstAddr = 0xcc8d374b
        tcp =
            srcPort = 0xd6b6
            dstPort = 0x3f6a
            seqNo = 0x357c4416
            ackNo = 0x3f5d4e0c
            dataOffset = 0xc
            res = 0b010
            ecn = 0b001
            ctrl = 0b000111
            window = 0x17d7
            checksum = 0x892b
            urgentPtr = 0x1866
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0af5),
            ipv4_srcAddr = hex_to_i32(0xbc05fdda),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0af5),
            ipv4_dstAddr = hex_to_i32(0xcc8d374b),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0000),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x46\xc4\xf3\x5e\x42\x01',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x72\x49\x92\xe4\x7b\xff',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0af5),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0f),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x09),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x58),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x0925),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x9fae),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x2e),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xe538),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xcc8d374b),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xbc05fdda),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xd6b6),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x3f6a),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x357c4416),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x3f5d4e0c),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0c),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x07),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x17d7),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x892b),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x1866),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x9a88),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x81bd),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x9a23),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x46\xc4\xf3\x5e\x42\x01\x72\x49\x92\xe4\x7b\xff\x81\x00\x8a\xf5\x08\x00\xf9\x58\x09\x25\x9f\xae\x20\x00\x2e\x06\xe5\x38\xbc\x05\xfd\xda\xcc\x8d\x37\x4b\xd6\xb6\x3f\x6a\x35\x7c\x44\x16\x3f\x5d\x4e\x0c\xc4\x47\x17\xd7\x89\x2b\x18\x66\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 0
        exp_pkt = b'\x46\xc4\xf3\x5e\x42\x01\x72\x49\x92\xe4\x7b\xff\x81\x00\x8a\xf5\x08\x00\xf9\x58\x09\x25\x9f\xae\x20\x00\x2e\x06\x52\x13\xbc\x05\xfd\xda\xcc\x8d\x37\x4b\xd6\xb6\x3f\x6a\x35\x7c\x44\x16\x3f\x5d\x4e\x0c\xc4\x47\x17\xd7\x89\x2b\x18\x66\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test50(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0xde730685aff7
            srcAddr = 0x0483e65738a8
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0x179
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0x3
            diffserv = 0x13
            totalLen = 0xc3e9
            identification = 0x1e38
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0xa2
            protocol = 0x06
            hdrChecksum = 0x1d10
            srcAddr = 0x0fcd81e8
            dstAddr = 0x8c344ff9
        tcp =
            srcPort = 0xfd20
            dstPort = 0x01c3
            seqNo = 0x97c3b688
            ackNo = 0xbe404990
            dataOffset = 0x8
            res = 0b101
            ecn = 0b011
            ctrl = 0b011100
            window = 0xc67d
            checksum = 0x2372
            urgentPtr = 0x59ef
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0179),
            ipv4_srcAddr = hex_to_i32(0x0fcd81e8),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0179),
            ipv4_dstAddr = hex_to_i32(0x8c344ff9),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xde\x73\x06\x85\xaf\xf7',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x04\x83\xe6\x57\x38\xa8',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0179),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x02),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x03),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x13),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xc3e9),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x1e38),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x04),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xa2),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x1d10),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x8c344ff9),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x0fcd81e8),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xfd20),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x01c3),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x97c3b688),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0xbe404990),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x08),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x05),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x03),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x1c),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0xc67d),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x2372),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x59ef),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x79e7),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x8252),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xb497),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\xde\x73\x06\x85\xaf\xf7\x04\x83\xe6\x57\x38\xa8\x81\x00\x41\x79\x08\x00\x23\x13\xc3\xe9\x1e\x38\x80\x00\xa2\x06\x1d\x10\x0f\xcd\x81\xe8\x8c\x34\x4f\xf9\xfd\x20\x01\xc3\x97\xc3\xb6\x88\xbe\x40\x49\x90\x8a\xdc\xc6\x7d\x23\x72\x59\xef\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test51(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xa9b4b01c6f48
            srcAddr = 0xd47e701cedff
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0x699
            etherType = 0x0800
        ipv4 =
            version = 0x3
            ihl = 0xa
            diffserv = 0xff
            totalLen = 0x5ed7
            identification = 0x5132
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0x07
            protocol = 0x06
            hdrChecksum = 0xded9
            srcAddr = 0x08436f1a
            dstAddr = 0x8497406d
        tcp =
            srcPort = 0xcd04
            dstPort = 0xd8f6
            seqNo = 0xf5290243
            ackNo = 0x681acbce
            dataOffset = 0x5
            res = 0b011
            ecn = 0b011
            ctrl = 0b111010
            window = 0x4a42
            checksum = 0x023a
            urgentPtr = 0xb829
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x0a12),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0699),
            ipv4_srcAddr = hex_to_i32(0x08436f1a),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0699),
            ipv4_dstAddr = hex_to_i32(0x8497406d),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x00f0),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xa9\xb4\xb0\x1c\x6f\x48',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xd4\x7e\x70\x1c\xed\xff',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0699),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x03),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0a),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xff),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x5ed7),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x5132),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x07),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xded9),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x8497406d),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x08436f1a),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xcd04),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0xd8f6),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0xf5290243),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x681acbce),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x05),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x03),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x3a),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x4a42),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x023a),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0xb829),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x4ade),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xf5a0),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xc8ca),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xa9\xb4\xb0\x1c\x6f\x48\xd4\x7e\x70\x1c\xed\xff\x81\x00\xe6\x99\x08\x00\x3a\xff\x5e\xd7\x51\x32\x00\x00\x07\x06\xde\xd9\x08\x43\x6f\x1a\x84\x97\x40\x6d\xcd\x04\xd8\xf6\xf5\x29\x02\x43\x68\x1a\xcb\xce\x56\xfa\x4a\x42\x02\x3a\xb8\x29\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test52(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0xc726328afc78
            srcAddr = 0x4c8b5d622bc2
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0xd45
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0x4
            diffserv = 0xae
            totalLen = 0xeb7a
            identification = 0xca7c
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0xef
            protocol = 0x06
            hdrChecksum = 0xe7f5
            srcAddr = 0x8cd62b46
            dstAddr = 0x852113c6
        tcp =
            srcPort = 0x2ab8
            dstPort = 0xed42
            seqNo = 0x500ab716
            ackNo = 0x48868f5b
            dataOffset = 0x7
            res = 0b000
            ecn = 0b011
            ctrl = 0b100001
            window = 0x640d
            checksum = 0x4a9e
            urgentPtr = 0xd5ff
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xc726328afc78
            srcAddr = 0x4c8b5d622bc2
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0xd45
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0x4
            diffserv = 0xae
            totalLen = 0xeb7a
            identification = 0xaec0
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0xef
            protocol = 0x06
            hdrChecksum = 0x210b
            srcAddr = 0x8cd62b46
            dstAddr = 0x852113c6
        tcp =
            srcPort = 0x2ab8
            dstPort = 0xed42
            seqNo = 0x500ab716
            ackNo = 0x48868f5b
            dataOffset = 0x7
            res = 0b000
            ecn = 0b011
            ctrl = 0b100001
            window = 0x640d
            checksum = 0x4a9e
            urgentPtr = 0xd5ff
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xaec0),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0d45),
            ipv4_srcAddr = hex_to_i32(0x8cd62b46),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0d45),
            ipv4_dstAddr = hex_to_i32(0x852113c6),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01b5),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xc7\x26\x32\x8a\xfc\x78',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x4c\x8b\x5d\x62\x2b\xc2',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0d45),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x00),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x04),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xae),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xeb7a),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xca7c),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xef),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xe7f5),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x852113c6),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x8cd62b46),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x2ab8),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0xed42),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x500ab716),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x48868f5b),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x07),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x03),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x21),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x640d),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x4a9e),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0xd5ff),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xd32b),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xcee0),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x31a5),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\xc7\x26\x32\x8a\xfc\x78\x4c\x8b\x5d\x62\x2b\xc2\x81\x00\xed\x45\x08\x00\x04\xae\xeb\x7a\xca\x7c\x00\x00\xef\x06\xe7\xf5\x8c\xd6\x2b\x46\x85\x21\x13\xc6\x2a\xb8\xed\x42\x50\x0a\xb7\x16\x48\x86\x8f\x5b\x70\xe1\x64\x0d\x4a\x9e\xd5\xff\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xc7\x26\x32\x8a\xfc\x78\x4c\x8b\x5d\x62\x2b\xc2\x81\x00\xed\x45\x08\x00\x04\xae\xeb\x7a\xae\xc0\x00\x00\xef\x06\x21\x0b\x8c\xd6\x2b\x46\x85\x21\x13\xc6\x2a\xb8\xed\x42\x50\x0a\xb7\x16\x48\x86\x8f\x5b\x70\xe1\x64\x0d\x4a\x9e\xd5\xff\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test53(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0xef3a12c26e03
            srcAddr = 0x5e01940db155
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x360
            etherType = 0x0800
        ipv4 =
            version = 0x3
            ihl = 0x4
            diffserv = 0x91
            totalLen = 0x34c2
            identification = 0x9118
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0x75
            protocol = 0x06
            hdrChecksum = 0x9c8a
            srcAddr = 0xf56a76f6
            dstAddr = 0x9de1b346
        tcp =
            srcPort = 0xafc4
            dstPort = 0x7e6e
            seqNo = 0xc54a740b
            ackNo = 0x739bf5b7
            dataOffset = 0xb
            res = 0b000
            ecn = 0b010
            ctrl = 0b100100
            window = 0xd0c2
            checksum = 0x3a61
            urgentPtr = 0x6c0e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0360),
            ipv4_dstAddr = hex_to_i32(0x9de1b346),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xef\x3a\x12\xc2\x6e\x03',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x5e\x01\x94\x0d\xb1\x55',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0360),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x03),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x04),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x91),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x34c2),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x9118),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x75),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x9c8a),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x9de1b346),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xf56a76f6),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xafc4),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x7e6e),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0xc54a740b),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x739bf5b7),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0b),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x24),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0xd0c2),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x3a61),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x6c0e),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xa3ed),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x27b3),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x8585),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\xef\x3a\x12\xc2\x6e\x03\x5e\x01\x94\x0d\xb1\x55\x81\x00\xc3\x60\x08\x00\x34\x91\x34\xc2\x91\x18\xc0\x00\x75\x06\x9c\x8a\xf5\x6a\x76\xf6\x9d\xe1\xb3\x46\xaf\xc4\x7e\x6e\xc5\x4a\x74\x0b\x73\x9b\xf5\xb7\xb0\xa4\xd0\xc2\x3a\x61\x6c\x0e\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test54(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x89ae8f266daf
            srcAddr = 0x0da69d8d0148
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0xed7
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0x7
            diffserv = 0x01
            totalLen = 0xa5f7
            identification = 0x52cf
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0x42
            protocol = 0x06
            hdrChecksum = 0xde0c
            srcAddr = 0xe4c3e1a7
            dstAddr = 0x17d9282e
        tcp =
            srcPort = 0xb223
            dstPort = 0x48c2
            seqNo = 0xb32f062c
            ackNo = 0xdd51f088
            dataOffset = 0x6
            res = 0b110
            ecn = 0b011
            ctrl = 0b101010
            window = 0xa1fe
            checksum = 0x45d4
            urgentPtr = 0x6b67
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x89ae8f266daf
            srcAddr = 0x0da69d8d0148
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0xed7
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0x7
            diffserv = 0x01
            totalLen = 0xa5f7
            identification = 0x7698
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0x42
            protocol = 0x06
            hdrChecksum = 0x23f4
            srcAddr = 0xe4c3e1a7
            dstAddr = 0x17d9282e
        tcp =
            srcPort = 0xb223
            dstPort = 0x48c2
            seqNo = 0xb32f062c
            ackNo = 0xdd51f088
            dataOffset = 0x6
            res = 0b110
            ecn = 0b011
            ctrl = 0b101010
            window = 0xa1fe
            checksum = 0x45d4
            urgentPtr = 0x6b67
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x7698),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0ed7),
            ipv4_srcAddr = hex_to_i32(0xe4c3e1a7),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0ed7),
            ipv4_dstAddr = hex_to_i32(0x17d9282e),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x89\xae\x8f\x26\x6d\xaf',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x0d\xa6\x9d\x8d\x01\x48',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0ed7),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0f),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x07),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x01),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xa5f7),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x52cf),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x04),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x42),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xde0c),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x17d9282e),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xe4c3e1a7),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xb223),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x48c2),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0xb32f062c),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0xdd51f088),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x06),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x03),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x2a),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0xa1fe),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x45d4),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x6b67),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x982d),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x64f6),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xe643),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x89\xae\x8f\x26\x6d\xaf\x0d\xa6\x9d\x8d\x01\x48\x81\x00\x6e\xd7\x08\x00\xf7\x01\xa5\xf7\x52\xcf\x80\x00\x42\x06\xde\x0c\xe4\xc3\xe1\xa7\x17\xd9\x28\x2e\xb2\x23\x48\xc2\xb3\x2f\x06\x2c\xdd\x51\xf0\x88\x6c\xea\xa1\xfe\x45\xd4\x6b\x67\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x89\xae\x8f\x26\x6d\xaf\x0d\xa6\x9d\x8d\x01\x48\x81\x00\x6e\xd7\x08\x00\xf7\x01\xa5\xf7\x76\x98\x80\x00\x42\x06\x23\xf4\xe4\xc3\xe1\xa7\x17\xd9\x28\x2e\xb2\x23\x48\xc2\xb3\x2f\x06\x2c\xdd\x51\xf0\x88\x6c\xea\xa1\xfe\x45\xd4\x6b\x67\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test55(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0x3d984bb91054
            srcAddr = 0xe592fd459089
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0x762
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0xd
            diffserv = 0x71
            totalLen = 0xb424
            identification = 0x5184
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0x5e
            protocol = 0x06
            hdrChecksum = 0x2a76
            srcAddr = 0xee13630a
            dstAddr = 0xc7c34494
        tcp =
            srcPort = 0xdcd4
            dstPort = 0x250d
            seqNo = 0xa942f825
            ackNo = 0x41bb47ab
            dataOffset = 0x6
            res = 0b010
            ecn = 0b010
            ctrl = 0b010110
            window = 0xe62f
            checksum = 0x3ace
            urgentPtr = 0x4b9a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x420c),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0762),
            ipv4_srcAddr = hex_to_i32(0xee13630a),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0762),
            ipv4_dstAddr = hex_to_i32(0xc7c34494),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x3d\x98\x4b\xb9\x10\x54',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xe5\x92\xfd\x45\x90\x89',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0762),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x00),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0d),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x71),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xb424),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x5184),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x03),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x5e),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x2a76),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xc7c34494),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xee13630a),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xdcd4),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x250d),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0xa942f825),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x41bb47ab),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x06),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x16),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0xe62f),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x3ace),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x4b9a),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xe469),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x19da),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x10bd),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\x3d\x98\x4b\xb9\x10\x54\xe5\x92\xfd\x45\x90\x89\x81\x00\xe7\x62\x08\x00\x0d\x71\xb4\x24\x51\x84\x60\x00\x5e\x06\x2a\x76\xee\x13\x63\x0a\xc7\xc3\x44\x94\xdc\xd4\x25\x0d\xa9\x42\xf8\x25\x41\xbb\x47\xab\x64\x96\xe6\x2f\x3a\xce\x4b\x9a\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test56(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x22869f72cd88
            srcAddr = 0x855f9d41a8ea
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0x396
            etherType = 0x0800
        ipv4 =
            version = 0xd
            ihl = 0x3
            diffserv = 0x92
            totalLen = 0xbff0
            identification = 0xaaa7
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0x44
            protocol = 0x06
            hdrChecksum = 0xd2d1
            srcAddr = 0xe1267aea
            dstAddr = 0xd000e3b0
        tcp =
            srcPort = 0xdf83
            dstPort = 0x8319
            seqNo = 0x7b891b76
            ackNo = 0xd63abaf9
            dataOffset = 0x3
            res = 0b001
            ecn = 0b101
            ctrl = 0b000111
            window = 0x7673
            checksum = 0x8408
            urgentPtr = 0x4598
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0396),
            ipv4_srcAddr = hex_to_i32(0xe1267aea),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0396),
            ipv4_dstAddr = hex_to_i32(0xd000e3b0),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x22\x86\x9f\x72\xcd\x88',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x85\x5f\x9d\x41\xa8\xea',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0396),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0d),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x03),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x92),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xbff0),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xaaa7),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x05),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x44),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xd2d1),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xd000e3b0),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xe1267aea),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xdf83),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x8319),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x7b891b76),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0xd63abaf9),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x03),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x01),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x05),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x07),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x7673),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x8408),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x4598),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x7971),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xc3f1),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x3b30),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x22\x86\x9f\x72\xcd\x88\x85\x5f\x9d\x41\xa8\xea\x81\x00\x83\x96\x08\x00\xd3\x92\xbf\xf0\xaa\xa7\xa0\x00\x44\x06\xd2\xd1\xe1\x26\x7a\xea\xd0\x00\xe3\xb0\xdf\x83\x83\x19\x7b\x89\x1b\x76\xd6\x3a\xba\xf9\x33\x47\x76\x73\x84\x08\x45\x98\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test57(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x2142b22ea5c5
            srcAddr = 0x84e82a604683
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0xd71
            etherType = 0x0800
        ipv4 =
            version = 0x7
            ihl = 0xb
            diffserv = 0xf3
            totalLen = 0x7445
            identification = 0xe7d8
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0x49
            protocol = 0x06
            hdrChecksum = 0x1bb1
            srcAddr = 0x90b3795e
            dstAddr = 0x763d2762
        tcp =
            srcPort = 0x9da7
            dstPort = 0xe040
            seqNo = 0x9e4ea856
            ackNo = 0xe25d35ee
            dataOffset = 0x7
            res = 0b101
            ecn = 0b110
            ctrl = 0b011100
            window = 0x56c9
            checksum = 0x8833
            urgentPtr = 0x85ab
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x2142b22ea5c5
            srcAddr = 0x84e82a604683
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0xd71
            etherType = 0x0800
        ipv4 =
            version = 0x7
            ihl = 0xb
            diffserv = 0xf3
            totalLen = 0x7445
            identification = 0x299d
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0x49
            protocol = 0x06
            hdrChecksum = 0xf571
            srcAddr = 0x90b3795e
            dstAddr = 0x763d2762
        tcp =
            srcPort = 0x9da7
            dstPort = 0xe040
            seqNo = 0x9e4ea856
            ackNo = 0xe25d35ee
            dataOffset = 0x7
            res = 0b101
            ecn = 0b110
            ctrl = 0b011100
            window = 0x56c9
            checksum = 0x8833
            urgentPtr = 0x85ab
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x299d),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0d71),
            ipv4_srcAddr = hex_to_i32(0x90b3795e),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x21\x42\xb2\x2e\xa5\xc5',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x84\xe8\x2a\x60\x46\x83',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0d71),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x07),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0b),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xf3),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x7445),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xe7d8),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x49),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x1bb1),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x763d2762),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x90b3795e),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x9da7),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0xe040),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x9e4ea856),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0xe25d35ee),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x07),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x05),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x1c),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x56c9),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x8833),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x85ab),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x6df6),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x80de),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xbe41),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x21\x42\xb2\x2e\xa5\xc5\x84\xe8\x2a\x60\x46\x83\x81\x00\x8d\x71\x08\x00\x7b\xf3\x74\x45\xe7\xd8\x00\x00\x49\x06\x1b\xb1\x90\xb3\x79\x5e\x76\x3d\x27\x62\x9d\xa7\xe0\x40\x9e\x4e\xa8\x56\xe2\x5d\x35\xee\x7b\x9c\x56\xc9\x88\x33\x85\xab\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x21\x42\xb2\x2e\xa5\xc5\x84\xe8\x2a\x60\x46\x83\x81\x00\x8d\x71\x08\x00\x7b\xf3\x74\x45\x29\x9d\x00\x00\x49\x06\xf5\x71\x90\xb3\x79\x5e\x76\x3d\x27\x62\x9d\xa7\xe0\x40\x9e\x4e\xa8\x56\xe2\x5d\x35\xee\x7b\x9c\x56\xc9\x88\x33\x85\xab\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test58(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0xff001a3b05c3
            srcAddr = 0xdbf5b4208055
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0xfe0
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x3
            diffserv = 0x3f
            totalLen = 0xa799
            identification = 0x064d
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0x79
            protocol = 0x06
            hdrChecksum = 0x2d29
            srcAddr = 0xc37a2ff2
            dstAddr = 0xe0c3be00
        tcp =
            srcPort = 0x629f
            dstPort = 0x8485
            seqNo = 0x91d01d9d
            ackNo = 0x1d2b7004
            dataOffset = 0x7
            res = 0b010
            ecn = 0b010
            ctrl = 0b101111
            window = 0xc4c6
            checksum = 0xd0bd
            urgentPtr = 0x4f5a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x90e7),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0fe0),
            ipv4_srcAddr = hex_to_i32(0xc37a2ff2),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xff\x00\x1a\x3b\x05\xc3',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xdb\xf5\xb4\x20\x80\x55',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0fe0),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0a),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x03),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x3f),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xa799),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x064d),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x79),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x2d29),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xe0c3be00),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xc37a2ff2),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x629f),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x8485),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x91d01d9d),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x1d2b7004),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x07),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x2f),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0xc4c6),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0xd0bd),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x4f5a),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x3900),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x4cb3),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x2f0f),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\xff\x00\x1a\x3b\x05\xc3\xdb\xf5\xb4\x20\x80\x55\x81\x00\x8f\xe0\x08\x00\xa3\x3f\xa7\x99\x06\x4d\x40\x00\x79\x06\x2d\x29\xc3\x7a\x2f\xf2\xe0\xc3\xbe\x00\x62\x9f\x84\x85\x91\xd0\x1d\x9d\x1d\x2b\x70\x04\x74\xaf\xc4\xc6\xd0\xbd\x4f\x5a\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test59(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0xd0f99879e4c4
            srcAddr = 0x189aa622c540
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0xace
            etherType = 0x0800
        ipv4 =
            version = 0x9
            ihl = 0x1
            diffserv = 0xd1
            totalLen = 0xae3c
            identification = 0xf1a8
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0x60
            protocol = 0x06
            hdrChecksum = 0xbfd0
            srcAddr = 0xfd83b3a0
            dstAddr = 0x709b6ade
        tcp =
            srcPort = 0x50ec
            dstPort = 0x0bc6
            seqNo = 0xbe878f52
            ackNo = 0x98dcc1c0
            dataOffset = 0x8
            res = 0b011
            ecn = 0b011
            ctrl = 0b010001
            window = 0x7e16
            checksum = 0xa1a8
            urgentPtr = 0xba34
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0ace),
            ipv4_srcAddr = hex_to_i32(0xfd83b3a0),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xd0\xf9\x98\x79\xe4\xc4',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x18\x9a\xa6\x22\xc5\x40',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0ace),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x09),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x01),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xd1),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xae3c),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xf1a8),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x03),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x60),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xbfd0),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x709b6ade),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xfd83b3a0),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x50ec),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x0bc6),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0xbe878f52),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x98dcc1c0),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x08),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x03),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x11),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x7e16),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0xa1a8),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0xba34),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xbcc0),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xf038),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x28f6),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\xd0\xf9\x98\x79\xe4\xc4\x18\x9a\xa6\x22\xc5\x40\x81\x00\x6a\xce\x08\x00\x91\xd1\xae\x3c\xf1\xa8\x60\x00\x60\x06\xbf\xd0\xfd\x83\xb3\xa0\x70\x9b\x6a\xde\x50\xec\x0b\xc6\xbe\x87\x8f\x52\x98\xdc\xc1\xc0\x86\xd1\x7e\x16\xa1\xa8\xba\x34\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test60(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0xff6603dd950b
            srcAddr = 0x285210f37971
            etherType = 0x8100
        vlan_tag =
            pri = 0b000
            cfi = 0b0
            vlan_id = 0x24a
            etherType = 0x0800
        ipv4 =
            version = 0x1
            ihl = 0xb
            diffserv = 0xdc
            totalLen = 0xeae4
            identification = 0x09ca
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0x36
            protocol = 0x06
            hdrChecksum = 0xe63f
            srcAddr = 0x2ce303e1
            dstAddr = 0x6fbca745
        tcp =
            srcPort = 0xaa1c
            dstPort = 0x57f5
            seqNo = 0xaba9a3a0
            ackNo = 0x28f66549
            dataOffset = 0xe
            res = 0b001
            ecn = 0b011
            ctrl = 0b010110
            window = 0x7f35
            checksum = 0xb578
            urgentPtr = 0x1840
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xff\x66\x03\xdd\x95\x0b',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x28\x52\x10\xf3\x79\x71',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x00),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x024a),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x01),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0b),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xdc),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xeae4),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x09ca),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x36),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xe63f),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x6fbca745),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x2ce303e1),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xaa1c),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x57f5),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0xaba9a3a0),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x28f66549),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0e),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x01),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x03),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x16),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x7f35),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0xb578),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x1840),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xd041),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x7c3d),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x476f),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\xff\x66\x03\xdd\x95\x0b\x28\x52\x10\xf3\x79\x71\x81\x00\x02\x4a\x08\x00\x1b\xdc\xea\xe4\x09\xca\xe0\x00\x36\x06\xe6\x3f\x2c\xe3\x03\xe1\x6f\xbc\xa7\x45\xaa\x1c\x57\xf5\xab\xa9\xa3\xa0\x28\xf6\x65\x49\xe2\xd6\x7f\x35\xb5\x78\x18\x40\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test61(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0xd59a099b2534
            srcAddr = 0x305e96a630b9
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0x4ca
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0xa
            diffserv = 0x63
            totalLen = 0xd7b3
            identification = 0x8f68
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0x38
            protocol = 0x06
            hdrChecksum = 0x8ea0
            srcAddr = 0xf1d33b62
            dstAddr = 0x033fd0fc
        tcp =
            srcPort = 0x7d50
            dstPort = 0x259a
            seqNo = 0x3996bc55
            ackNo = 0x64defc46
            dataOffset = 0x7
            res = 0b110
            ecn = 0b110
            ctrl = 0b010000
            window = 0x5eae
            checksum = 0x1d92
            urgentPtr = 0x015c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 6:
        ethernet =
            dstAddr = 0xd59a099b2534
            srcAddr = 0x305e96a630b9
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0x4ca
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0xa
            diffserv = 0x63
            totalLen = 0xd7b3
            identification = 0xd771
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0x38
            protocol = 0x06
            hdrChecksum = 0xccfd
            srcAddr = 0xf1d33b62
            dstAddr = 0x033fd0fc
        tcp =
            srcPort = 0x7d50
            dstPort = 0x259a
            seqNo = 0x3996bc55
            ackNo = 0x64defc46
            dataOffset = 0x7
            res = 0b110
            ecn = 0b110
            ctrl = 0b010000
            window = 0x5eae
            checksum = 0x1d92
            urgentPtr = 0x015c
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xd771),
                action_egress_port = hex_to_i16(0x0006),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x04ca),
            ipv4_srcAddr = hex_to_i32(0xf1d33b62),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\xd5\x9a\x09\x9b\x25\x34\x30\x5e\x96\xa6\x30\xb9\x81\x00\x84\xca\x08\x00\xaa\x63\xd7\xb3\x8f\x68\xa0\x00\x38\x06\x8e\xa0\xf1\xd3\x3b\x62\x03\x3f\xd0\xfc\x7d\x50\x25\x9a\x39\x96\xbc\x55\x64\xde\xfc\x46\x7d\x90\x5e\xae\x1d\x92\x01\x5c\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 6
        exp_pkt = b'\xd5\x9a\x09\x9b\x25\x34\x30\x5e\x96\xa6\x30\xb9\x81\x00\x84\xca\x08\x00\xaa\x63\xd7\xb3\xd7\x71\xa0\x00\x38\x06\xcc\xfd\xf1\xd3\x3b\x62\x03\x3f\xd0\xfc\x7d\x50\x25\x9a\x39\x96\xbc\x55\x64\xde\xfc\x46\x7d\x90\x5e\xae\x1d\x92\x01\x5c\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test62(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x67382f786f1a
            srcAddr = 0xb6aec9e76295
            etherType = 0x8100
        vlan_tag =
            pri = 0b000
            cfi = 0b0
            vlan_id = 0xe57
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0x7
            diffserv = 0x55
            totalLen = 0x3c4b
            identification = 0x7d58
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0x82
            protocol = 0x06
            hdrChecksum = 0x2a57
            srcAddr = 0xec330bc7
            dstAddr = 0x7668cc7b
        tcp =
            srcPort = 0x8299
            dstPort = 0x25f2
            seqNo = 0x27306f93
            ackNo = 0x23376be7
            dataOffset = 0xf
            res = 0b101
            ecn = 0b111
            ctrl = 0b111100
            window = 0x6590
            checksum = 0x4d1d
            urgentPtr = 0x9a37
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x8ed1),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0e57),
            ipv4_srcAddr = hex_to_i32(0xec330bc7),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x67\x38\x2f\x78\x6f\x1a\xb6\xae\xc9\xe7\x62\x95\x81\x00\x0e\x57\x08\x00\x47\x55\x3c\x4b\x7d\x58\xc0\x00\x82\x06\x2a\x57\xec\x33\x0b\xc7\x76\x68\xcc\x7b\x82\x99\x25\xf2\x27\x30\x6f\x93\x23\x37\x6b\xe7\xfb\xfc\x65\x90\x4d\x1d\x9a\x37\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test63(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0xed9d2f5f2417
            srcAddr = 0x29001693db77
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0x256
            etherType = 0x0800
        ipv4 =
            version = 0xd
            ihl = 0x3
            diffserv = 0x72
            totalLen = 0x6f52
            identification = 0xf443
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0x79
            protocol = 0x06
            hdrChecksum = 0x9790
            srcAddr = 0x6fdf73d6
            dstAddr = 0x6d697719
        tcp =
            srcPort = 0x366f
            dstPort = 0x7267
            seqNo = 0x1d925249
            ackNo = 0xba8bb434
            dataOffset = 0x2
            res = 0b110
            ecn = 0b001
            ctrl = 0b000110
            window = 0x597e
            checksum = 0x26e5
            urgentPtr = 0x9e15
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0256),
            ipv4_srcAddr = hex_to_i32(0x6fdf73d6),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\xed\x9d\x2f\x5f\x24\x17\x29\x00\x16\x93\xdb\x77\x81\x00\x82\x56\x08\x00\xd3\x72\x6f\x52\xf4\x43\xc0\x00\x79\x06\x97\x90\x6f\xdf\x73\xd6\x6d\x69\x77\x19\x36\x6f\x72\x67\x1d\x92\x52\x49\xba\x8b\xb4\x34\x2c\x46\x59\x7e\x26\xe5\x9e\x15\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test64(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x003dbc20d518
            srcAddr = 0x318fa058dc06
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0x2ea
            etherType = 0x0800
        ipv4 =
            version = 0x1
            ihl = 0xe
            diffserv = 0x85
            totalLen = 0x5eed
            identification = 0x9225
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0x8b
            protocol = 0x06
            hdrChecksum = 0xefc5
            srcAddr = 0xe1bc1dd7
            dstAddr = 0xb58011c1
        tcp =
            srcPort = 0x50c9
            dstPort = 0xf197
            seqNo = 0x693c3bd9
            ackNo = 0x7904c331
            dataOffset = 0x8
            res = 0b110
            ecn = 0b010
            ctrl = 0b110011
            window = 0xf3ca
            checksum = 0xc9d1
            urgentPtr = 0x95df
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        pass
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x00\x3d\xbc\x20\xd5\x18\x31\x8f\xa0\x58\xdc\x06\x81\x00\x82\xea\x08\x00\x1e\x85\x5e\xed\x92\x25\xe0\x00\x8b\x06\xef\xc5\xe1\xbc\x1d\xd7\xb5\x80\x11\xc1\x50\xc9\xf1\x97\x69\x3c\x3b\xd9\x79\x04\xc3\x31\x8c\xb3\xf3\xca\xc9\xd1\x95\xdf\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test65(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0xbc20aa96493a
            srcAddr = 0x943c6cd59f5a
            etherType = 0x8100
        vlan_tag =
            pri = 0b101
            cfi = 0b0
            vlan_id = 0x5a4
            etherType = 0x0800
        ipv4 =
            version = 0xb
            ihl = 0x6
            diffserv = 0x14
            totalLen = 0xd89a
            identification = 0x29d7
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0x97
            protocol = 0x06
            hdrChecksum = 0x3cb1
            srcAddr = 0x726b2bb1
            dstAddr = 0x10cfa11f
        tcp =
            srcPort = 0x7c92
            dstPort = 0x7de6
            seqNo = 0x3fd66e67
            ackNo = 0x1d500035
            dataOffset = 0x4
            res = 0b110
            ecn = 0b010
            ctrl = 0b111111
            window = 0x97a8
            checksum = 0x7f25
            urgentPtr = 0x3726
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xbc20aa96493a
            srcAddr = 0x943c6cd59f5a
            etherType = 0x8100
        vlan_tag =
            pri = 0b101
            cfi = 0b0
            vlan_id = 0x5a4
            etherType = 0x0800
        ipv4 =
            version = 0xb
            ihl = 0x6
            diffserv = 0x14
            totalLen = 0xd89a
            identification = 0xefd5
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0x97
            protocol = 0x06
            hdrChecksum = 0xba67
            srcAddr = 0x726b2bb1
            dstAddr = 0x10cfa11f
        tcp =
            srcPort = 0x7c92
            dstPort = 0x7de6
            seqNo = 0x3fd66e67
            ackNo = 0x1d500035
            dataOffset = 0x4
            res = 0b110
            ecn = 0b010
            ctrl = 0b111111
            window = 0x97a8
            checksum = 0x7f25
            urgentPtr = 0x3726
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xefd5),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x05a4),
            ipv4_srcAddr = hex_to_i32(0x726b2bb1),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x05a4),
            ipv4_dstAddr = hex_to_i32(0x10cfa11f),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\xbc\x20\xaa\x96\x49\x3a\x94\x3c\x6c\xd5\x9f\x5a\x81\x00\xa5\xa4\x08\x00\xb6\x14\xd8\x9a\x29\xd7\xe0\x00\x97\x06\x3c\xb1\x72\x6b\x2b\xb1\x10\xcf\xa1\x1f\x7c\x92\x7d\xe6\x3f\xd6\x6e\x67\x1d\x50\x00\x35\x4c\xbf\x97\xa8\x7f\x25\x37\x26\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xbc\x20\xaa\x96\x49\x3a\x94\x3c\x6c\xd5\x9f\x5a\x81\x00\xa5\xa4\x08\x00\xb6\x14\xd8\x9a\xef\xd5\xe0\x00\x97\x06\xba\x67\x72\x6b\x2b\xb1\x10\xcf\xa1\x1f\x7c\x92\x7d\xe6\x3f\xd6\x6e\x67\x1d\x50\x00\x35\x4c\xbf\x97\xa8\x7f\x25\x37\x26\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test66(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x771bdfe42337
            srcAddr = 0xe68b28d87dae
            etherType = 0x8100
        vlan_tag =
            pri = 0b000
            cfi = 0b0
            vlan_id = 0x772
            etherType = 0x0800
        ipv4 =
            version = 0x8
            ihl = 0x1
            diffserv = 0xe8
            totalLen = 0x4452
            identification = 0x9441
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0xce
            protocol = 0x06
            hdrChecksum = 0xad9c
            srcAddr = 0x1aad2219
            dstAddr = 0xfd5fa46b
        tcp =
            srcPort = 0x75db
            dstPort = 0x86e2
            seqNo = 0x9c718999
            ackNo = 0x40cebb3f
            dataOffset = 0xd
            res = 0b010
            ecn = 0b011
            ctrl = 0b100101
            window = 0x19a1
            checksum = 0xdc44
            urgentPtr = 0x8b53
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x299b),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0772),
            ipv4_srcAddr = hex_to_i32(0x1aad2219),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0772),
            ipv4_dstAddr = hex_to_i32(0xfd5fa46b),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x77\x1b\xdf\xe4\x23\x37\xe6\x8b\x28\xd8\x7d\xae\x81\x00\x07\x72\x08\x00\x81\xe8\x44\x52\x94\x41\xc0\x00\xce\x06\xad\x9c\x1a\xad\x22\x19\xfd\x5f\xa4\x6b\x75\xdb\x86\xe2\x9c\x71\x89\x99\x40\xce\xbb\x3f\xd4\xe5\x19\xa1\xdc\x44\x8b\x53\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test67(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0xfa6850e97104
            srcAddr = 0x37caafa7317a
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0x4e3
            etherType = 0x0800
        ipv4 =
            version = 0x7
            ihl = 0xe
            diffserv = 0xa0
            totalLen = 0xe25b
            identification = 0x0e3d
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0xcf
            protocol = 0x06
            hdrChecksum = 0x0b66
            srcAddr = 0xf501521d
            dstAddr = 0x5cb0a614
        tcp =
            srcPort = 0x7d4d
            dstPort = 0x9e5a
            seqNo = 0xf6759239
            ackNo = 0x59d1c21c
            dataOffset = 0xb
            res = 0b110
            ecn = 0b001
            ctrl = 0b101110
            window = 0x4db4
            checksum = 0x2d5f
            urgentPtr = 0x64b0
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x04e3),
            ipv4_srcAddr = hex_to_i32(0xf501521d),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x04e3),
            ipv4_dstAddr = hex_to_i32(0x5cb0a614),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\xfa\x68\x50\xe9\x71\x04\x37\xca\xaf\xa7\x31\x7a\x81\x00\x44\xe3\x08\x00\x7e\xa0\xe2\x5b\x0e\x3d\x00\x00\xcf\x06\x0b\x66\xf5\x01\x52\x1d\x5c\xb0\xa6\x14\x7d\x4d\x9e\x5a\xf6\x75\x92\x39\x59\xd1\xc2\x1c\xbc\x6e\x4d\xb4\x2d\x5f\x64\xb0\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test68(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x38f4ee12a875
            srcAddr = 0x4313fb8b1f43
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0x069
            etherType = 0x0800
        ipv4 =
            version = 0xe
            ihl = 0x0
            diffserv = 0x66
            totalLen = 0x6daf
            identification = 0x4d20
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0x76
            protocol = 0x06
            hdrChecksum = 0x9c90
            srcAddr = 0xeb83abaf
            dstAddr = 0xe6a52a5d
        tcp =
            srcPort = 0xd07d
            dstPort = 0xb3ee
            seqNo = 0x70bff3a8
            ackNo = 0x473f63d3
            dataOffset = 0x6
            res = 0b010
            ecn = 0b111
            ctrl = 0b000001
            window = 0xbcd1
            checksum = 0xf07b
            urgentPtr = 0x6e8a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0069),
            ipv4_dstAddr = hex_to_i32(0xe6a52a5d),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x38\xf4\xee\x12\xa8\x75\x43\x13\xfb\x8b\x1f\x43\x81\x00\x40\x69\x08\x00\xe0\x66\x6d\xaf\x4d\x20\xa0\x00\x76\x06\x9c\x90\xeb\x83\xab\xaf\xe6\xa5\x2a\x5d\xd0\x7d\xb3\xee\x70\xbf\xf3\xa8\x47\x3f\x63\xd3\x65\xc1\xbc\xd1\xf0\x7b\x6e\x8a\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test69(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0xe71e2caece7d
            srcAddr = 0x0f3b3871fe7f
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0xcbb
            etherType = 0x0800
        ipv4 =
            version = 0x1
            ihl = 0x9
            diffserv = 0xb5
            totalLen = 0x3917
            identification = 0x3c1e
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0x56
            protocol = 0x06
            hdrChecksum = 0xf94e
            srcAddr = 0x77320970
            dstAddr = 0x65a0d94b
        tcp =
            srcPort = 0x6974
            dstPort = 0x8e77
            seqNo = 0xb2e801f0
            ackNo = 0xc27c51a6
            dataOffset = 0x6
            res = 0b001
            ecn = 0b111
            ctrl = 0b101011
            window = 0xed5f
            checksum = 0x9387
            urgentPtr = 0x7066
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0cbb),
            ipv4_dstAddr = hex_to_i32(0x65a0d94b),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\xe7\x1e\x2c\xae\xce\x7d\x0f\x3b\x38\x71\xfe\x7f\x81\x00\x8c\xbb\x08\x00\x19\xb5\x39\x17\x3c\x1e\xc0\x00\x56\x06\xf9\x4e\x77\x32\x09\x70\x65\xa0\xd9\x4b\x69\x74\x8e\x77\xb2\xe8\x01\xf0\xc2\x7c\x51\xa6\x63\xeb\xed\x5f\x93\x87\x70\x66\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test70(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0xf451bb3d18ab
            srcAddr = 0xa92406ca9201
            etherType = 0x8100
        vlan_tag =
            pri = 0b101
            cfi = 0b0
            vlan_id = 0x724
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x0
            diffserv = 0xc4
            totalLen = 0x0904
            identification = 0xac26
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0x8f
            protocol = 0x06
            hdrChecksum = 0xe381
            srcAddr = 0x1ac2805f
            dstAddr = 0x3af638d4
        tcp =
            srcPort = 0x477e
            dstPort = 0x3dd2
            seqNo = 0x1972d26b
            ackNo = 0x3ef58fff
            dataOffset = 0xe
            res = 0b100
            ecn = 0b001
            ctrl = 0b001100
            window = 0xf137
            checksum = 0x0668
            urgentPtr = 0x357e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xf451bb3d18ab
            srcAddr = 0xa92406ca9201
            etherType = 0x8100
        vlan_tag =
            pri = 0b101
            cfi = 0b0
            vlan_id = 0x724
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x0
            diffserv = 0xc4
            totalLen = 0x0904
            identification = 0xac26
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0x8f
            protocol = 0x06
            hdrChecksum = 0xac1d
            srcAddr = 0x1ac2805f
            dstAddr = 0x3af638d4
        tcp =
            srcPort = 0x477e
            dstPort = 0x3dd2
            seqNo = 0x1972d26b
            ackNo = 0x3ef58fff
            dataOffset = 0xe
            res = 0b100
            ecn = 0b001
            ctrl = 0b001100
            window = 0xf137
            checksum = 0x0668
            urgentPtr = 0x357e
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0724),
            ipv4_dstAddr = hex_to_i32(0x3af638d4),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\xf4\x51\xbb\x3d\x18\xab\xa9\x24\x06\xca\x92\x01\x81\x00\xa7\x24\x08\x00\xa0\xc4\x09\x04\xac\x26\x60\x00\x8f\x06\xe3\x81\x1a\xc2\x80\x5f\x3a\xf6\x38\xd4\x47\x7e\x3d\xd2\x19\x72\xd2\x6b\x3e\xf5\x8f\xff\xe8\x4c\xf1\x37\x06\x68\x35\x7e\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xf4\x51\xbb\x3d\x18\xab\xa9\x24\x06\xca\x92\x01\x81\x00\xa7\x24\x08\x00\xa0\xc4\x09\x04\xac\x26\x60\x00\x8f\x06\xac\x1d\x1a\xc2\x80\x5f\x3a\xf6\x38\xd4\x47\x7e\x3d\xd2\x19\x72\xd2\x6b\x3e\xf5\x8f\xff\xe8\x4c\xf1\x37\x06\x68\x35\x7e\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test71(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x926e144d08a2
            srcAddr = 0x15858471d9e8
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0xd46
            etherType = 0x0800
        ipv4 =
            version = 0xd
            ihl = 0xa
            diffserv = 0x0c
            totalLen = 0x64e0
            identification = 0x262e
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0x94
            protocol = 0x06
            hdrChecksum = 0xdaba
            srcAddr = 0x3128bc34
            dstAddr = 0xdf838f1e
        tcp =
            srcPort = 0xabeb
            dstPort = 0x60d7
            seqNo = 0x60726ccb
            ackNo = 0xdf429f29
            dataOffset = 0x0
            res = 0b001
            ecn = 0b110
            ctrl = 0b001111
            window = 0x2cf7
            checksum = 0x4b2c
            urgentPtr = 0xb74f
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x1e0a),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0d46),
            ipv4_srcAddr = hex_to_i32(0x3128bc34),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0d46),
            ipv4_dstAddr = hex_to_i32(0xdf838f1e),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0064),)))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x92\x6e\x14\x4d\x08\xa2\x15\x85\x84\x71\xd9\xe8\x81\x00\x6d\x46\x08\x00\xda\x0c\x64\xe0\x26\x2e\xa0\x00\x94\x06\xda\xba\x31\x28\xbc\x34\xdf\x83\x8f\x1e\xab\xeb\x60\xd7\x60\x72\x6c\xcb\xdf\x42\x9f\x29\x03\x8f\x2c\xf7\x4b\x2c\xb7\x4f\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test72(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x37ebb92290ac
            srcAddr = 0x9207858105f4
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0x9cb
            etherType = 0x0800
        ipv4 =
            version = 0xb
            ihl = 0x7
            diffserv = 0x79
            totalLen = 0x0daf
            identification = 0xfb0a
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0xd1
            protocol = 0x06
            hdrChecksum = 0x5e08
            srcAddr = 0x11e6bf1a
            dstAddr = 0xf13cd0dc
        tcp =
            srcPort = 0x37ce
            dstPort = 0xcc5e
            seqNo = 0x468a5d8e
            ackNo = 0xc5dd3437
            dataOffset = 0x6
            res = 0b011
            ecn = 0b000
            ctrl = 0b001011
            window = 0xe31a
            checksum = 0xce1b
            urgentPtr = 0xb7a2
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 7:
        ethernet =
            dstAddr = 0x37ebb92290ac
            srcAddr = 0x9207858105f4
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0x9cb
            etherType = 0x0800
        ipv4 =
            version = 0xb
            ihl = 0x7
            diffserv = 0x79
            totalLen = 0x0daf
            identification = 0x24a6
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0xd1
            protocol = 0x06
            hdrChecksum = 0x920f
            srcAddr = 0x11e6bf1a
            dstAddr = 0xf13cd0dc
        tcp =
            srcPort = 0x37ce
            dstPort = 0xcc5e
            seqNo = 0x468a5d8e
            ackNo = 0xc5dd3437
            dataOffset = 0x6
            res = 0b011
            ecn = 0b000
            ctrl = 0b001011
            window = 0xe31a
            checksum = 0xce1b
            urgentPtr = 0xb7a2
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x24a6),
                action_egress_port = hex_to_i16(0x0007),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x09cb),
            ipv4_srcAddr = hex_to_i32(0x11e6bf1a),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x09cb),
            ipv4_dstAddr = hex_to_i32(0xf13cd0dc),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0185),)))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x37\xeb\xb9\x22\x90\xac\x92\x07\x85\x81\x05\xf4\x81\x00\x29\xcb\x08\x00\xb7\x79\x0d\xaf\xfb\x0a\x20\x00\xd1\x06\x5e\x08\x11\xe6\xbf\x1a\xf1\x3c\xd0\xdc\x37\xce\xcc\x5e\x46\x8a\x5d\x8e\xc5\xdd\x34\x37\x66\x0b\xe3\x1a\xce\x1b\xb7\xa2\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 7
        exp_pkt = b'\x37\xeb\xb9\x22\x90\xac\x92\x07\x85\x81\x05\xf4\x81\x00\x29\xcb\x08\x00\xb7\x79\x0d\xaf\x24\xa6\x20\x00\xd1\x06\x92\x0f\x11\xe6\xbf\x1a\xf1\x3c\xd0\xdc\x37\xce\xcc\x5e\x46\x8a\x5d\x8e\xc5\xdd\x34\x37\x66\x0b\xe3\x1a\xce\x1b\xb7\xa2\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test73(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0xd22a1c640dfa
            srcAddr = 0xe32ce2952da6
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x349
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0xd
            diffserv = 0x8f
            totalLen = 0xcc4a
            identification = 0x06f8
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0x2d
            protocol = 0x06
            hdrChecksum = 0x2564
            srcAddr = 0x3cc53e5c
            dstAddr = 0xc654ee49
        tcp =
            srcPort = 0x0d69
            dstPort = 0xad02
            seqNo = 0x1992f02f
            ackNo = 0xac8979b9
            dataOffset = 0xe
            res = 0b101
            ecn = 0b001
            ctrl = 0b110011
            window = 0xe2a6
            checksum = 0x5e13
            urgentPtr = 0x5b58
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 10:
        ethernet =
            dstAddr = 0xd22a1c640dfa
            srcAddr = 0xe32ce2952da6
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x349
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0xd
            diffserv = 0x8f
            totalLen = 0xcc4a
            identification = 0x06f8
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0x2d
            protocol = 0x06
            hdrChecksum = 0xe266
            srcAddr = 0x3cc53e5c
            dstAddr = 0xc654ee49
        tcp =
            srcPort = 0x0d69
            dstPort = 0xad02
            seqNo = 0x1992f02f
            ackNo = 0xac8979b9
            dataOffset = 0xe
            res = 0b101
            ecn = 0b001
            ctrl = 0b110011
            window = 0xe2a6
            checksum = 0x5e13
            urgentPtr = 0x5b58
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0349),
            ipv4_srcAddr = hex_to_i32(0x3cc53e5c),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0349),
            ipv4_dstAddr = hex_to_i32(0xc654ee49),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x000a),)))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\xd2\x2a\x1c\x64\x0d\xfa\xe3\x2c\xe2\x95\x2d\xa6\x81\x00\xc3\x49\x08\x00\xad\x8f\xcc\x4a\x06\xf8\x40\x00\x2d\x06\x25\x64\x3c\xc5\x3e\x5c\xc6\x54\xee\x49\x0d\x69\xad\x02\x19\x92\xf0\x2f\xac\x89\x79\xb9\xea\x73\xe2\xa6\x5e\x13\x5b\x58\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 10
        exp_pkt = b'\xd2\x2a\x1c\x64\x0d\xfa\xe3\x2c\xe2\x95\x2d\xa6\x81\x00\xc3\x49\x08\x00\xad\x8f\xcc\x4a\x06\xf8\x40\x00\x2d\x06\xe2\x66\x3c\xc5\x3e\x5c\xc6\x54\xee\x49\x0d\x69\xad\x02\x19\x92\xf0\x2f\xac\x89\x79\xb9\xea\x73\xe2\xa6\x5e\x13\x5b\x58\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test74(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x704e30e3bd4e
            srcAddr = 0x6a419c8047d5
            etherType = 0x8100
        vlan_tag =
            pri = 0b101
            cfi = 0b0
            vlan_id = 0x810
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0xa
            diffserv = 0x34
            totalLen = 0xd97c
            identification = 0x6a92
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0x62
            protocol = 0x06
            hdrChecksum = 0xac80
            srcAddr = 0xfbecf6f3
            dstAddr = 0xaa460d8d
        tcp =
            srcPort = 0x29be
            dstPort = 0x67b2
            seqNo = 0x82eae3ff
            ackNo = 0x30bd9429
            dataOffset = 0xc
            res = 0b100
            ecn = 0b100
            ctrl = 0b101101
            window = 0x297c
            checksum = 0xaa54
            urgentPtr = 0x5115
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0810),
            ipv4_srcAddr = hex_to_i32(0xfbecf6f3),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x01),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0810),
            ipv4_dstAddr = hex_to_i32(0xaa460d8d),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x70\x4e\x30\xe3\xbd\x4e\x6a\x41\x9c\x80\x47\xd5\x81\x00\xa8\x10\x08\x00\x0a\x34\xd9\x7c\x6a\x92\xe0\x00\x62\x06\xac\x80\xfb\xec\xf6\xf3\xaa\x46\x0d\x8d\x29\xbe\x67\xb2\x82\xea\xe3\xff\x30\xbd\x94\x29\xc9\x2d\x29\x7c\xaa\x54\x51\x15\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test75(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x7bac7ef6e4b0
            srcAddr = 0xf5817a96b669
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0x244
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0x7
            diffserv = 0xbc
            totalLen = 0xd92e
            identification = 0xcb2a
            flags = 0b111
            fragOffset = 0b1110001100011
            ttl = 0x93
            protocol = 0x8e
            hdrChecksum = 0xb33d
            srcAddr = 0x422d545e
            dstAddr = 0xa8ff64e6
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x7bac7ef6e4b0
            srcAddr = 0xf5817a96b669
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0x244
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0x7
            diffserv = 0xbc
            totalLen = 0xd92e
            identification = 0xefc0
            flags = 0b111
            fragOffset = 0b1110001100011
            ttl = 0x93
            protocol = 0x8e
            hdrChecksum = 0xfaef
            srcAddr = 0x422d545e
            dstAddr = 0xa8ff64e6
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xefc0),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0244),
            ipv4_srcAddr = hex_to_i32(0x422d545e),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x7b\xac\x7e\xf6\xe4\xb0',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xf5\x81\x7a\x96\xb6\x69',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0244),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x00),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x07),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xbc),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xd92e),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xcb2a),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x1c63),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x93),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x8e),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xb33d),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xa8ff64e6),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x422d545e),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xe083),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x1c7a),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x563d475d),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xecee6b2a),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x07),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x0b),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x56be),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x7747),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xf95f),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xe7bf),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xeb9f),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xa61e),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0148),), 0))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x7b\xac\x7e\xf6\xe4\xb0\xf5\x81\x7a\x96\xb6\x69\x81\x00\xe2\x44\x08\x00\x07\xbc\xd9\x2e\xcb\x2a\xfc\x63\x93\x8e\xb3\x3d\x42\x2d\x54\x5e\xa8\xff\x64\xe6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x7b\xac\x7e\xf6\xe4\xb0\xf5\x81\x7a\x96\xb6\x69\x81\x00\xe2\x44\x08\x00\x07\xbc\xd9\x2e\xef\xc0\xfc\x63\x93\x8e\xfa\xef\x42\x2d\x54\x5e\xa8\xff\x64\xe6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test76(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0xf10c762463b7
            srcAddr = 0xc02106e00122
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0xe73
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0x6
            diffserv = 0x98
            totalLen = 0xc211
            identification = 0xfd9e
            flags = 0b110
            fragOffset = 0b1101000111111
            ttl = 0x97
            protocol = 0xc5
            hdrChecksum = 0x2ad3
            srcAddr = 0x99c46dff
            dstAddr = 0xf1a99320
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xab3e),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0e73),
            ipv4_srcAddr = hex_to_i32(0x99c46dff),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xf1\x0c\x76\x24\x63\xb7',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xc0\x21\x06\xe0\x01\x22',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0e73),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0f),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x06),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x98),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xc211),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xfd9e),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x1a3f),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x97),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xc5),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x2ad3),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xf1a99320),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x99c46dff),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xbd28),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x9ce7),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xe48a72cc),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x0aa9cf46),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x09),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x05),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x10),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x52f4),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xf1ee),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x4a96),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xe7e9),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xc049),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xf11d),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x00cf),), 0))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\xf1\x0c\x76\x24\x63\xb7\xc0\x21\x06\xe0\x01\x22\x81\x00\xce\x73\x08\x00\xf6\x98\xc2\x11\xfd\x9e\xda\x3f\x97\xc5\x2a\xd3\x99\xc4\x6d\xff\xf1\xa9\x93\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test77(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0xff3231c414f7
            srcAddr = 0xf57397d82eb8
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0x606
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x6
            diffserv = 0x76
            totalLen = 0x427f
            identification = 0x1f02
            flags = 0b111
            fragOffset = 0b1011110000001
            ttl = 0x7e
            protocol = 0x22
            hdrChecksum = 0x6c45
            srcAddr = 0xe8fd3417
            dstAddr = 0x8d988d2e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0606),
            ipv4_srcAddr = hex_to_i32(0xe8fd3417),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xff\x32\x31\xc4\x14\xf7',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xf5\x73\x97\xd8\x2e\xb8',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0606),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0a),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x06),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x76),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x427f),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x1f02),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x1781),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x7e),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x22),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x6c45),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x8d988d2e),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xe8fd3417),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x1b9d),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xacb1),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x21a9a93d),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x1735434b),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x14),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x4376),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xb01c),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x2cfc),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xe96a),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x1c9d),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x035d),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\xff\x32\x31\xc4\x14\xf7\xf5\x73\x97\xd8\x2e\xb8\x81\x00\x66\x06\x08\x00\xa6\x76\x42\x7f\x1f\x02\xf7\x81\x7e\x22\x6c\x45\xe8\xfd\x34\x17\x8d\x98\x8d\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test78(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0x045397acb8a7
            srcAddr = 0x2a37fd301280
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0x2d2
            etherType = 0x0800
        ipv4 =
            version = 0xe
            ihl = 0x0
            diffserv = 0xdc
            totalLen = 0xf521
            identification = 0x4a4d
            flags = 0b111
            fragOffset = 0b1001100010101
            ttl = 0x7c
            protocol = 0xfa
            hdrChecksum = 0x15ee
            srcAddr = 0xbfe09a1a
            dstAddr = 0x4aa86621
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 13:
        ethernet =
            dstAddr = 0x045397acb8a7
            srcAddr = 0x2a37fd301280
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0x2d2
            etherType = 0x0800
        ipv4 =
            version = 0xe
            ihl = 0x0
            diffserv = 0xdc
            totalLen = 0xf521
            identification = 0x4a4d
            flags = 0b111
            fragOffset = 0b1001100010101
            ttl = 0x7c
            protocol = 0xfa
            hdrChecksum = 0x64de
            srcAddr = 0xbfe09a1a
            dstAddr = 0x4aa86621
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x02d2),
            ipv4_srcAddr = hex_to_i32(0xbfe09a1a),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x04\x53\x97\xac\xb8\xa7',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x2a\x37\xfd\x30\x12\x80',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x02d2),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0e),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x00),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xdc),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xf521),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x4a4d),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x1315),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x7c),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xfa),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x15ee),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x4aa86621),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xbfe09a1a),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xdc20),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x96cd),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x235c8028),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xce773c15),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x07),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x05),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x36),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x43cf),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x6fe1),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xe77e),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x9b41),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x4f7e),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x897d),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x000d),), 0))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\x04\x53\x97\xac\xb8\xa7\x2a\x37\xfd\x30\x12\x80\x81\x00\x42\xd2\x08\x00\xe0\xdc\xf5\x21\x4a\x4d\xf3\x15\x7c\xfa\x15\xee\xbf\xe0\x9a\x1a\x4a\xa8\x66\x21\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 13
        exp_pkt = b'\x04\x53\x97\xac\xb8\xa7\x2a\x37\xfd\x30\x12\x80\x81\x00\x42\xd2\x08\x00\xe0\xdc\xf5\x21\x4a\x4d\xf3\x15\x7c\xfa\x64\xde\xbf\xe0\x9a\x1a\x4a\xa8\x66\x21\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test79(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x7e2f4f75ba86
            srcAddr = 0x720c0003f705
            etherType = 0x8100
        vlan_tag =
            pri = 0b101
            cfi = 0b0
            vlan_id = 0x754
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x1
            diffserv = 0x1d
            totalLen = 0x018b
            identification = 0xa6b0
            flags = 0b101
            fragOffset = 0b1001011101110
            ttl = 0x67
            protocol = 0x92
            hdrChecksum = 0xe544
            srcAddr = 0x594e3d9d
            dstAddr = 0xe3d72fa3
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x7e2f4f75ba86
            srcAddr = 0x720c0003f705
            etherType = 0x8100
        vlan_tag =
            pri = 0b101
            cfi = 0b0
            vlan_id = 0x754
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x1
            diffserv = 0x1d
            totalLen = 0x018b
            identification = 0xa6b0
            flags = 0b101
            fragOffset = 0b1001011101110
            ttl = 0x67
            protocol = 0x92
            hdrChecksum = 0xf1be
            srcAddr = 0x594e3d9d
            dstAddr = 0xe3d72fa3
    """
    
    def setupCtrlPlane(self):
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x7e\x2f\x4f\x75\xba\x86',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x72\x0c\x00\x03\xf7\x05',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x05),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0754),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0a),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x01),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x1d),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x018b),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xa6b0),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x05),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x12ee),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x67),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x92),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xe544),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xe3d72fa3),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x594e3d9d),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x61eb),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xd79b),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x9c51a281),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x9b7d01f1),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x19),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xa4c3),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xc986),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xf984),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x4477),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x376f),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x14c1),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),), 0))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x7e\x2f\x4f\x75\xba\x86\x72\x0c\x00\x03\xf7\x05\x81\x00\xa7\x54\x08\x00\xa1\x1d\x01\x8b\xa6\xb0\xb2\xee\x67\x92\xe5\x44\x59\x4e\x3d\x9d\xe3\xd7\x2f\xa3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x7e\x2f\x4f\x75\xba\x86\x72\x0c\x00\x03\xf7\x05\x81\x00\xa7\x54\x08\x00\xa1\x1d\x01\x8b\xa6\xb0\xb2\xee\x67\x92\xf1\xbe\x59\x4e\x3d\x9d\xe3\xd7\x2f\xa3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test80(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x10ae4f74ac0a
            srcAddr = 0xe1786cad980d
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0xb44
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0xe
            diffserv = 0xed
            totalLen = 0x3483
            identification = 0x02dc
            flags = 0b110
            fragOffset = 0b0001001010000
            ttl = 0xf3
            protocol = 0x79
            hdrChecksum = 0xc5e0
            srcAddr = 0xaba6198e
            dstAddr = 0xf800c72c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x10\xae\x4f\x74\xac\x0a',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xe1\x78\x6c\xad\x98\x0d',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0b44),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x04),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0e),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xed),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x3483),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x02dc),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0250),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xf3),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x79),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xc5e0),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xf800c72c),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xaba6198e),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xd4a2),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xd81a),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x0373e4d5),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xded022c9),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0e),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x05),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x01),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xc0a0),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x4e51),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x06ea),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x4b11),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x2db9),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xfded),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x10\xae\x4f\x74\xac\x0a\xe1\x78\x6c\xad\x98\x0d\x81\x00\x8b\x44\x08\x00\x4e\xed\x34\x83\x02\xdc\xc2\x50\xf3\x79\xc5\xe0\xab\xa6\x19\x8e\xf8\x00\xc7\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test81(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x0f7ac0a3c972
            srcAddr = 0x49f5f349e36c
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0x606
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0xf
            diffserv = 0x1f
            totalLen = 0x9357
            identification = 0xcad5
            flags = 0b010
            fragOffset = 0b0110111010011
            ttl = 0x1b
            protocol = 0xca
            hdrChecksum = 0xd05b
            srcAddr = 0x715c864d
            dstAddr = 0x230f5004
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0606),
            ipv4_dstAddr = hex_to_i32(0x230f5004),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x0f\x7a\xc0\xa3\xc9\x72',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x49\xf5\xf3\x49\xe3\x6c',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0606),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x04),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0f),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x1f),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x9357),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xcad5),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0dd3),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x1b),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xca),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xd05b),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x230f5004),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x715c864d),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x93f8),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x51db),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x2017babe),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x330ca943),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x06),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x01),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x30),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x7300),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xe319),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x9c5f),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x51c3),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x3487),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xc8d5),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0073),), 0))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x0f\x7a\xc0\xa3\xc9\x72\x49\xf5\xf3\x49\xe3\x6c\x81\x00\x26\x06\x08\x00\x4f\x1f\x93\x57\xca\xd5\x4d\xd3\x1b\xca\xd0\x5b\x71\x5c\x86\x4d\x23\x0f\x50\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test82(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0xbc0e5c4dbb85
            srcAddr = 0xa7e9b1139a73
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0xe2d
            etherType = 0x0800
        ipv4 =
            version = 0x8
            ihl = 0x3
            diffserv = 0x7b
            totalLen = 0xd5cd
            identification = 0x39ba
            flags = 0b010
            fragOffset = 0b0011000011010
            ttl = 0x4f
            protocol = 0x87
            hdrChecksum = 0x49e7
            srcAddr = 0xdce0e49e
            dstAddr = 0x69e17c9c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 7:
        ethernet =
            dstAddr = 0xbc0e5c4dbb85
            srcAddr = 0xa7e9b1139a73
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0xe2d
            etherType = 0x0800
        ipv4 =
            version = 0x8
            ihl = 0x3
            diffserv = 0x7b
            totalLen = 0xd5cd
            identification = 0x39ba
            flags = 0b010
            fragOffset = 0b0011000011010
            ttl = 0x4f
            protocol = 0x87
            hdrChecksum = 0x2f5d
            srcAddr = 0xdce0e49e
            dstAddr = 0x69e17c9c
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0e2d),
            ipv4_dstAddr = hex_to_i32(0x69e17c9c),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0007),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xbc\x0e\x5c\x4d\xbb\x85',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xa7\xe9\xb1\x13\x9a\x73',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0e2d),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x08),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x03),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x7b),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xd5cd),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x39ba),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x061a),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x4f),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x87),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x49e7),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x69e17c9c),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xdce0e49e),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x5474),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x498d),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xe3178cfb),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xbf0b4b4a),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0c),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x20),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x8169),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x0b99),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xaf6b),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x4292),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x12aa),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x4844),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01c1),), 0))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\xbc\x0e\x5c\x4d\xbb\x85\xa7\xe9\xb1\x13\x9a\x73\x81\x00\x2e\x2d\x08\x00\x83\x7b\xd5\xcd\x39\xba\x46\x1a\x4f\x87\x49\xe7\xdc\xe0\xe4\x9e\x69\xe1\x7c\x9c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 7
        exp_pkt = b'\xbc\x0e\x5c\x4d\xbb\x85\xa7\xe9\xb1\x13\x9a\x73\x81\x00\x2e\x2d\x08\x00\x83\x7b\xd5\xcd\x39\xba\x46\x1a\x4f\x87\x2f\x5d\xdc\xe0\xe4\x9e\x69\xe1\x7c\x9c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test83(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x3fd3afa6b628
            srcAddr = 0xcfe34be1e32c
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0x52f
            etherType = 0x0800
        ipv4 =
            version = 0x9
            ihl = 0xf
            diffserv = 0x2e
            totalLen = 0x15d6
            identification = 0xd287
            flags = 0b101
            fragOffset = 0b0011001101110
            ttl = 0x6c
            protocol = 0x57
            hdrChecksum = 0x799a
            srcAddr = 0xc5091775
            dstAddr = 0xe29d0ad1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x052f),
            ipv4_srcAddr = hex_to_i32(0xc5091775),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x052f),
            ipv4_dstAddr = hex_to_i32(0xe29d0ad1),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x3f\xd3\xaf\xa6\xb6\x28',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xcf\xe3\x4b\xe1\xe3\x2c',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x052f),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x09),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0f),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x2e),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x15d6),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xd287),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x05),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x066e),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x6c),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x57),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x799a),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xe29d0ad1),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xc5091775),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x832e),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x012c),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x716bc531),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x80c319c9),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x01),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x2c),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x470b),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xcd35),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x9b88),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xe4dd),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x45f7),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x5c72),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0066),), 0))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x3f\xd3\xaf\xa6\xb6\x28\xcf\xe3\x4b\xe1\xe3\x2c\x81\x00\x25\x2f\x08\x00\x9f\x2e\x15\xd6\xd2\x87\xa6\x6e\x6c\x57\x79\x9a\xc5\x09\x17\x75\xe2\x9d\x0a\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test84(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x801899475741
            srcAddr = 0xce109d9b02f1
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0xb2d
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0x4
            diffserv = 0x47
            totalLen = 0x43cf
            identification = 0xc0e7
            flags = 0b100
            fragOffset = 0b1000010110011
            ttl = 0x26
            protocol = 0xdf
            hdrChecksum = 0x9174
            srcAddr = 0x731c01fa
            dstAddr = 0x6cbe6eaf
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 12:
        ethernet =
            dstAddr = 0x801899475741
            srcAddr = 0xce109d9b02f1
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0xb2d
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0x4
            diffserv = 0x47
            totalLen = 0x43cf
            identification = 0xc0e7
            flags = 0b100
            fragOffset = 0b1000010110011
            ttl = 0x26
            protocol = 0xdf
            hdrChecksum = 0xeeea
            srcAddr = 0x731c01fa
            dstAddr = 0x6cbe6eaf
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0b2d),
            ipv4_srcAddr = hex_to_i32(0x731c01fa),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0b2d),
            ipv4_dstAddr = hex_to_i32(0x6cbe6eaf),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x000c),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x80\x18\x99\x47\x57\x41',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xce\x10\x9d\x9b\x02\xf1',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0b2d),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x00),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x04),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x47),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x43cf),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xc0e7),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x04),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x10b3),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x26),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xdf),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x9174),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x6cbe6eaf),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x731c01fa),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x0b4d),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x66d3),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x3a98be6f),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x3b6ff2c9),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0d),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x1d),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x5eac),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x10dd),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x903d),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x70a2),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x7cb9),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x30fd),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0088),), 0))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x80\x18\x99\x47\x57\x41\xce\x10\x9d\x9b\x02\xf1\x81\x00\x2b\x2d\x08\x00\x04\x47\x43\xcf\xc0\xe7\x90\xb3\x26\xdf\x91\x74\x73\x1c\x01\xfa\x6c\xbe\x6e\xaf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 12
        exp_pkt = b'\x80\x18\x99\x47\x57\x41\xce\x10\x9d\x9b\x02\xf1\x81\x00\x2b\x2d\x08\x00\x04\x47\x43\xcf\xc0\xe7\x90\xb3\x26\xdf\xee\xea\x73\x1c\x01\xfa\x6c\xbe\x6e\xaf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test85(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x6daab9861f0c
            srcAddr = 0xb055d1e47d19
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0x0c4
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0xb
            diffserv = 0xa8
            totalLen = 0xb48f
            identification = 0xc20b
            flags = 0b111
            fragOffset = 0b1111000010010
            ttl = 0xdb
            protocol = 0x51
            hdrChecksum = 0x0854
            srcAddr = 0x06c304ba
            dstAddr = 0x46f475e1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x6daab9861f0c
            srcAddr = 0xb055d1e47d19
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0x0c4
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0xb
            diffserv = 0xa8
            totalLen = 0xb48f
            identification = 0x01c7
            flags = 0b111
            fragOffset = 0b1111000010010
            ttl = 0xdb
            protocol = 0x51
            hdrChecksum = 0x7c49
            srcAddr = 0x06c304ba
            dstAddr = 0x46f475e1
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x01c7),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x00c4),
            ipv4_srcAddr = hex_to_i32(0x06c304ba),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x00c4),
            ipv4_dstAddr = hex_to_i32(0x46f475e1),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01b1),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x6d\xaa\xb9\x86\x1f\x0c',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xb0\x55\xd1\xe4\x7d\x19',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x00c4),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x02),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0b),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xa8),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xb48f),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xc20b),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x1e12),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xdb),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x51),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x0854),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x46f475e1),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x06c304ba),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xb9a4),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x69ed),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x8938ed9d),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x1f6a39f9),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x03),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x05),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x1a),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xe5a5),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x0275),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xf91f),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x62f6),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x7280),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x630f),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0069),), 0))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x6d\xaa\xb9\x86\x1f\x0c\xb0\x55\xd1\xe4\x7d\x19\x81\x00\x80\xc4\x08\x00\x2b\xa8\xb4\x8f\xc2\x0b\xfe\x12\xdb\x51\x08\x54\x06\xc3\x04\xba\x46\xf4\x75\xe1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x6d\xaa\xb9\x86\x1f\x0c\xb0\x55\xd1\xe4\x7d\x19\x81\x00\x80\xc4\x08\x00\x2b\xa8\xb4\x8f\x01\xc7\xfe\x12\xdb\x51\x7c\x49\x06\xc3\x04\xba\x46\xf4\x75\xe1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test86(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0x580e57f28c02
            srcAddr = 0x8735df2c84d7
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0xb7e
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0x6
            diffserv = 0x00
            totalLen = 0x6583
            identification = 0x3c32
            flags = 0b010
            fragOffset = 0b1011100001001
            ttl = 0xf4
            protocol = 0x4c
            hdrChecksum = 0x7952
            srcAddr = 0x581b82da
            dstAddr = 0xd973d740
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xb9b9),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0b7e),
            ipv4_srcAddr = hex_to_i32(0x581b82da),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0b7e),
            ipv4_dstAddr = hex_to_i32(0xd973d740),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0012),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x58\x0e\x57\xf2\x8c\x02',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x87\x35\xdf\x2c\x84\xd7',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0b7e),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x00),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x06),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x00),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x6583),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x3c32),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x1709),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xf4),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x4c),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x7952),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xd973d740),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x581b82da),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x35b7),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xdf8f),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xa45de064),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xec737f1c),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x01),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x03),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x32),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x1bf9),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x75fd),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x199c),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x5460),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x6869),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x9c1d),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x00ff),), 0))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\x58\x0e\x57\xf2\x8c\x02\x87\x35\xdf\x2c\x84\xd7\x81\x00\x8b\x7e\x08\x00\x06\x00\x65\x83\x3c\x32\x57\x09\xf4\x4c\x79\x52\x58\x1b\x82\xda\xd9\x73\xd7\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test87(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x827ba1f7a60c
            srcAddr = 0xd2d8ade787fc
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x2e2
            etherType = 0x0800
        ipv4 =
            version = 0x9
            ihl = 0xc
            diffserv = 0xa8
            totalLen = 0x5d76
            identification = 0xc305
            flags = 0b000
            fragOffset = 0b0000111000011
            ttl = 0x06
            protocol = 0xba
            hdrChecksum = 0x7e68
            srcAddr = 0xf83eb71f
            dstAddr = 0xf88b65ec
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x827ba1f7a60c
            srcAddr = 0xd2d8ade787fc
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x2e2
            etherType = 0x0800
        ipv4 =
            version = 0x9
            ihl = 0xc
            diffserv = 0xa8
            totalLen = 0x5d76
            identification = 0xc305
            flags = 0b000
            fragOffset = 0b0000111000011
            ttl = 0x06
            protocol = 0xba
            hdrChecksum = 0x2c87
            srcAddr = 0xf83eb71f
            dstAddr = 0xf88b65ec
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x02e2),
            ipv4_srcAddr = hex_to_i32(0xf83eb71f),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x02e2),
            ipv4_dstAddr = hex_to_i32(0xf88b65ec),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x82\x7b\xa1\xf7\xa6\x0c',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xd2\xd8\xad\xe7\x87\xfc',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x02e2),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x09),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0c),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xa8),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x5d76),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xc305),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x01c3),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x06),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xba),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x7e68),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xf88b65ec),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xf83eb71f),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x98d3),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xdeb2),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x42ce6ccc),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x178d868c),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0d),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x03),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x3a),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x707d),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x0654),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x482f),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x68f7),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x861d),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x9a90),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),), 0))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x82\x7b\xa1\xf7\xa6\x0c\xd2\xd8\xad\xe7\x87\xfc\x81\x00\xc2\xe2\x08\x00\x9c\xa8\x5d\x76\xc3\x05\x01\xc3\x06\xba\x7e\x68\xf8\x3e\xb7\x1f\xf8\x8b\x65\xec\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x82\x7b\xa1\xf7\xa6\x0c\xd2\xd8\xad\xe7\x87\xfc\x81\x00\xc2\xe2\x08\x00\x9c\xa8\x5d\x76\xc3\x05\x01\xc3\x06\xba\x2c\x87\xf8\x3e\xb7\x1f\xf8\x8b\x65\xec\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test88(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x10a520a3ac62
            srcAddr = 0xb5df75907e13
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0x18f
            etherType = 0x0800
        ipv4 =
            version = 0x9
            ihl = 0xc
            diffserv = 0x45
            totalLen = 0x72c4
            identification = 0x4dc0
            flags = 0b110
            fragOffset = 0b1011001111010
            ttl = 0x12
            protocol = 0x0a
            hdrChecksum = 0x156d
            srcAddr = 0xe96ea585
            dstAddr = 0x30eced12
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x018f),
            ipv4_srcAddr = hex_to_i32(0xe96ea585),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x018f),
            ipv4_dstAddr = hex_to_i32(0x30eced12),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x10\xa5\x20\xa3\xac\x62',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xb5\xdf\x75\x90\x7e\x13',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x018f),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x09),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0c),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x45),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x72c4),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x4dc0),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x167a),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x12),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x0a),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x156d),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x30eced12),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xe96ea585),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x4265),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x9070),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x894bce61),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x6c1cb86e),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x05),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x04),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xb046),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x89bd),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x7b85),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x22d3),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xc07a),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x0278),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x10\xa5\x20\xa3\xac\x62\xb5\xdf\x75\x90\x7e\x13\x81\x00\x61\x8f\x08\x00\x9c\x45\x72\xc4\x4d\xc0\xd6\x7a\x12\x0a\x15\x6d\xe9\x6e\xa5\x85\x30\xec\xed\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test89(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x93cc585122ba
            srcAddr = 0x978e128ed7c5
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0x0df
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0x2
            diffserv = 0x4f
            totalLen = 0xf10f
            identification = 0x3b95
            flags = 0b010
            fragOffset = 0b0100010101101
            ttl = 0x4b
            protocol = 0x9a
            hdrChecksum = 0x85bb
            srcAddr = 0x4a1e43bd
            dstAddr = 0x417beda0
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x9008),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x00df),
            ipv4_srcAddr = hex_to_i32(0x4a1e43bd),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x00df),
            ipv4_dstAddr = hex_to_i32(0x417beda0),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x93\xcc\x58\x51\x22\xba',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x97\x8e\x12\x8e\xd7\xc5',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x00df),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x04),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x02),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x4f),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xf10f),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x3b95),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x08ad),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x4b),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x9a),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x85bb),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x417beda0),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x4a1e43bd),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x2962),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x21d3),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x7bd2711b),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x41c26879),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x00),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x05),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x3f),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xab26),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x34c8),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x61d9),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xfc7e),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x3917),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xc457),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0127),), 0))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x93\xcc\x58\x51\x22\xba\x97\x8e\x12\x8e\xd7\xc5\x81\x00\x40\xdf\x08\x00\x42\x4f\xf1\x0f\x3b\x95\x48\xad\x4b\x9a\x85\xbb\x4a\x1e\x43\xbd\x41\x7b\xed\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test90(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0xb764b2c24945
            srcAddr = 0x21b8312fb01d
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0xd07
            etherType = 0x0800
        ipv4 =
            version = 0x1
            ihl = 0xd
            diffserv = 0x88
            totalLen = 0x7a18
            identification = 0x15b3
            flags = 0b110
            fragOffset = 0b1000111100111
            ttl = 0xa4
            protocol = 0xe2
            hdrChecksum = 0x19ec
            srcAddr = 0x1cab9518
            dstAddr = 0xd0eb7881
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xb764b2c24945
            srcAddr = 0x21b8312fb01d
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0xd07
            etherType = 0x0800
        ipv4 =
            version = 0x1
            ihl = 0xd
            diffserv = 0x88
            totalLen = 0x7a18
            identification = 0x008f
            flags = 0b110
            fragOffset = 0b1000111100111
            ttl = 0xa4
            protocol = 0xe2
            hdrChecksum = 0xf5d4
            srcAddr = 0x1cab9518
            dstAddr = 0xd0eb7881
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x008f),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0d07),
            ipv4_srcAddr = hex_to_i32(0x1cab9518),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0d07),
            ipv4_dstAddr = hex_to_i32(0xd0eb7881),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xb7\x64\xb2\xc2\x49\x45',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x21\xb8\x31\x2f\xb0\x1d',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0d07),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x01),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0d),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x88),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x7a18),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x15b3),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x11e7),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xa4),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xe2),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x19ec),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xd0eb7881),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x1cab9518),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x39d8),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x9f55),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xc308ef57),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x7efeefb2),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0c),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x28),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x1c1c),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x8f5c),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x87f8),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xc72f),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x4bb1),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x3286),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0103),), 0))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\xb7\x64\xb2\xc2\x49\x45\x21\xb8\x31\x2f\xb0\x1d\x81\x00\x4d\x07\x08\x00\x1d\x88\x7a\x18\x15\xb3\xd1\xe7\xa4\xe2\x19\xec\x1c\xab\x95\x18\xd0\xeb\x78\x81\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xb7\x64\xb2\xc2\x49\x45\x21\xb8\x31\x2f\xb0\x1d\x81\x00\x4d\x07\x08\x00\x1d\x88\x7a\x18\x00\x8f\xd1\xe7\xa4\xe2\xf5\xd4\x1c\xab\x95\x18\xd0\xeb\x78\x81\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test91(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x6bd7d9829517
            srcAddr = 0x1e2ac55a8d7a
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0x1cb
            etherType = 0x0800
        ipv4 =
            version = 0x9
            ihl = 0xf
            diffserv = 0x46
            totalLen = 0x21e2
            identification = 0x80af
            flags = 0b111
            fragOffset = 0b0011001011000
            ttl = 0x25
            protocol = 0xf8
            hdrChecksum = 0xe220
            srcAddr = 0x61c276aa
            dstAddr = 0xa95c907a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x01cb),
            ipv4_dstAddr = hex_to_i32(0xa95c907a),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x6b\xd7\xd9\x82\x95\x17',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x1e\x2a\xc5\x5a\x8d\x7a',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x01cb),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x09),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0f),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x46),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x21e2),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x80af),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0658),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x25),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xf8),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xe220),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xa95c907a),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x61c276aa),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x3896),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x690b),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x12e3e827),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x066d9575),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x06),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x33),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x4bc6),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x879d),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x70c0),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x0744),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x52db),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x97b5),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x6b\xd7\xd9\x82\x95\x17\x1e\x2a\xc5\x5a\x8d\x7a\x81\x00\x81\xcb\x08\x00\x9f\x46\x21\xe2\x80\xaf\xe6\x58\x25\xf8\xe2\x20\x61\xc2\x76\xaa\xa9\x5c\x90\x7a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test92(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0xba88759c41b2
            srcAddr = 0x178fea1de8a5
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0xc99
            etherType = 0x0800
        ipv4 =
            version = 0xb
            ihl = 0xd
            diffserv = 0x82
            totalLen = 0x4305
            identification = 0x941e
            flags = 0b000
            fragOffset = 0b0011111000011
            ttl = 0x05
            protocol = 0xde
            hdrChecksum = 0x46bb
            srcAddr = 0x63763a42
            dstAddr = 0xfc9e8d4e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 8:
        ethernet =
            dstAddr = 0xba88759c41b2
            srcAddr = 0x178fea1de8a5
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0xc99
            etherType = 0x0800
        ipv4 =
            version = 0xb
            ihl = 0xd
            diffserv = 0x82
            totalLen = 0x4305
            identification = 0x941e
            flags = 0b000
            fragOffset = 0b0011111000011
            ttl = 0x05
            protocol = 0xde
            hdrChecksum = 0x3612
            srcAddr = 0x63763a42
            dstAddr = 0xfc9e8d4e
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0c99),
            ipv4_dstAddr = hex_to_i32(0xfc9e8d4e),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xba\x88\x75\x9c\x41\xb2',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x17\x8f\xea\x1d\xe8\xa5',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0c99),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0b),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0d),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x82),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x4305),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x941e),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x07c3),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x05),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xde),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x46bb),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xfc9e8d4e),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x63763a42),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xb5d8),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x3058),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x75b986ad),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x56716c9f),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0e),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x05),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x1c),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xe3f0),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x6d9a),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xbebd),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x0a65),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xa1bd),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x9e46),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0008),), 0))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\xba\x88\x75\x9c\x41\xb2\x17\x8f\xea\x1d\xe8\xa5\x81\x00\x4c\x99\x08\x00\xbd\x82\x43\x05\x94\x1e\x07\xc3\x05\xde\x46\xbb\x63\x76\x3a\x42\xfc\x9e\x8d\x4e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 8
        exp_pkt = b'\xba\x88\x75\x9c\x41\xb2\x17\x8f\xea\x1d\xe8\xa5\x81\x00\x4c\x99\x08\x00\xbd\x82\x43\x05\x94\x1e\x07\xc3\x05\xde\x36\x12\x63\x76\x3a\x42\xfc\x9e\x8d\x4e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test93(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0xcd091c2d0029
            srcAddr = 0x2bb9d0a3aacb
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x415
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0xc
            diffserv = 0x93
            totalLen = 0x444e
            identification = 0xc1b7
            flags = 0b100
            fragOffset = 0b0001101111010
            ttl = 0x75
            protocol = 0xa2
            hdrChecksum = 0x3294
            srcAddr = 0x22be36c0
            dstAddr = 0xf1de46d4
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0415),
            ipv4_dstAddr = hex_to_i32(0xf1de46d4),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xcd\x09\x1c\x2d\x00\x29',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x2b\xb9\xd0\xa3\xaa\xcb',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0415),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x02),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0c),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x93),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x444e),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xc1b7),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x04),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x037a),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x75),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xa2),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x3294),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xf1de46d4),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x22be36c0),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x6f4e),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xb3e6),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x867e52e5),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x380b8a8a),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x00),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x1e),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x81dd),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xfc48),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x61ae),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x3c52),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x5f9c),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x5649),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\xcd\x09\x1c\x2d\x00\x29\x2b\xb9\xd0\xa3\xaa\xcb\x81\x00\xc4\x15\x08\x00\x2c\x93\x44\x4e\xc1\xb7\x83\x7a\x75\xa2\x32\x94\x22\xbe\x36\xc0\xf1\xde\x46\xd4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test94(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0xf4b81cb72d17
            srcAddr = 0x78a875641833
            etherType = 0x8100
        vlan_tag =
            pri = 0b101
            cfi = 0b0
            vlan_id = 0xb0e
            etherType = 0x0800
        ipv4 =
            version = 0x8
            ihl = 0x5
            diffserv = 0x81
            totalLen = 0x0501
            identification = 0x1b68
            flags = 0b101
            fragOffset = 0b1111011000101
            ttl = 0x6e
            protocol = 0xff
            hdrChecksum = 0x7c63
            srcAddr = 0x0a168143
            dstAddr = 0xf1d6ad51
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xf4b81cb72d17
            srcAddr = 0x78a875641833
            etherType = 0x8100
        vlan_tag =
            pri = 0b101
            cfi = 0b0
            vlan_id = 0xb0e
            etherType = 0x0800
        ipv4 =
            version = 0x8
            ihl = 0x5
            diffserv = 0x81
            totalLen = 0x0501
            identification = 0xfecb
            flags = 0b101
            fragOffset = 0b1111011000101
            ttl = 0x6e
            protocol = 0xff
            hdrChecksum = 0x1e6a
            srcAddr = 0x0a168143
            dstAddr = 0xf1d6ad51
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xfecb),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0b0e),
            ipv4_srcAddr = hex_to_i32(0x0a168143),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0b0e),
            ipv4_dstAddr = hex_to_i32(0xf1d6ad51),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xf4\xb8\x1c\xb7\x2d\x17',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x78\xa8\x75\x64\x18\x33',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x05),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0b0e),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x08),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x05),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x81),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x0501),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x1b68),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x05),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x1ec5),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x6e),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xff),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x7c63),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xf1d6ad51),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x0a168143),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xb66e),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x1641),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x5caa680d),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xe5819141),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x01),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x2a),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x47ee),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x87a5),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xa2d6),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x8e14),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xcdc6),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x80aa),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\xf4\xb8\x1c\xb7\x2d\x17\x78\xa8\x75\x64\x18\x33\x81\x00\xab\x0e\x08\x00\x85\x81\x05\x01\x1b\x68\xbe\xc5\x6e\xff\x7c\x63\x0a\x16\x81\x43\xf1\xd6\xad\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xf4\xb8\x1c\xb7\x2d\x17\x78\xa8\x75\x64\x18\x33\x81\x00\xab\x0e\x08\x00\x85\x81\x05\x01\xfe\xcb\xbe\xc5\x6e\xff\x1e\x6a\x0a\x16\x81\x43\xf1\xd6\xad\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test95(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x1c058daba969
            srcAddr = 0x64691e5711c6
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0x063
            etherType = 0x0800
        ipv4 =
            version = 0xc
            ihl = 0x0
            diffserv = 0xc3
            totalLen = 0x6a5a
            identification = 0x8a31
            flags = 0b110
            fragOffset = 0b1011101110011
            ttl = 0xc6
            protocol = 0x82
            hdrChecksum = 0xa8cb
            srcAddr = 0x9bce703a
            dstAddr = 0x9fa8b493
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x44eb),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0063),
            ipv4_srcAddr = hex_to_i32(0x9bce703a),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0063),
            ipv4_dstAddr = hex_to_i32(0x9fa8b493),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x1c\x05\x8d\xab\xa9\x69',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x64\x69\x1e\x57\x11\xc6',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0063),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0c),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x00),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xc3),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x6a5a),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x8a31),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x1773),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xc6),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x82),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xa8cb),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x9fa8b493),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x9bce703a),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x1e03),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xc0b9),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x1bcf4776),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x4986d09d),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0a),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x09),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x9935),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x555a),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x40e8),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x14a8),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x12fc),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x95bf),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x1c\x05\x8d\xab\xa9\x69\x64\x69\x1e\x57\x11\xc6\x81\x00\x80\x63\x08\x00\xc0\xc3\x6a\x5a\x8a\x31\xd7\x73\xc6\x82\xa8\xcb\x9b\xce\x70\x3a\x9f\xa8\xb4\x93\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test96(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x7c5b5f0ed94c
            srcAddr = 0x378bb6b5edeb
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x537
            etherType = 0x0800
        ipv4 =
            version = 0x9
            ihl = 0x3
            diffserv = 0xfd
            totalLen = 0xc64d
            identification = 0x7d3e
            flags = 0b110
            fragOffset = 0b0100110011110
            ttl = 0xba
            protocol = 0xc6
            hdrChecksum = 0x97b7
            srcAddr = 0x7cc9f85f
            dstAddr = 0xa7a4b05c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0537),
            ipv4_srcAddr = hex_to_i32(0x7cc9f85f),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0537),
            ipv4_dstAddr = hex_to_i32(0xa7a4b05c),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x7c\x5b\x5f\x0e\xd9\x4c',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x37\x8b\xb6\xb5\xed\xeb',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0537),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x09),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x03),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xfd),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xc64d),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x7d3e),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x099e),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xba),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xc6),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x97b7),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xa7a4b05c),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x7cc9f85f),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x15a0),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x6dbc),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x132d3155),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xde8f2b21),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0d),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x05),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x08),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x43ca),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x9437),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x588a),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xdc9e),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xb37d),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xa789),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x7c\x5b\x5f\x0e\xd9\x4c\x37\x8b\xb6\xb5\xed\xeb\x81\x00\xc5\x37\x08\x00\x93\xfd\xc6\x4d\x7d\x3e\xc9\x9e\xba\xc6\x97\xb7\x7c\xc9\xf8\x5f\xa7\xa4\xb0\x5c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test97(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xe6f172f4d0b0
            srcAddr = 0xd5146edf3735
            etherType = 0x8100
        vlan_tag =
            pri = 0b000
            cfi = 0b0
            vlan_id = 0x0fa
            etherType = 0x0800
        ipv4 =
            version = 0xc
            ihl = 0x1
            diffserv = 0x23
            totalLen = 0xfde1
            identification = 0x15fd
            flags = 0b001
            fragOffset = 0b0111000010001
            ttl = 0x38
            protocol = 0xa0
            hdrChecksum = 0xb0b2
            srcAddr = 0x52220c4e
            dstAddr = 0xcd1783fc
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x00fa),
            ipv4_srcAddr = hex_to_i32(0x52220c4e),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x00fa),
            ipv4_dstAddr = hex_to_i32(0xcd1783fc),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xe6\xf1\x72\xf4\xd0\xb0',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xd5\x14\x6e\xdf\x37\x35',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x00),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x00fa),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0c),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x01),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x23),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xfde1),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x15fd),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0e11),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x38),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xa0),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xb0b2),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xcd1783fc),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x52220c4e),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x4679),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xf4b5),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x9439fab8),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x720b10be),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0c),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x07),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x65ed),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x9ba3),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x0a9d),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x8dbc),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xd1d4),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x94ff),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xe6\xf1\x72\xf4\xd0\xb0\xd5\x14\x6e\xdf\x37\x35\x81\x00\x00\xfa\x08\x00\xc1\x23\xfd\xe1\x15\xfd\x2e\x11\x38\xa0\xb0\xb2\x52\x22\x0c\x4e\xcd\x17\x83\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test98(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xdeb88b72b411
            srcAddr = 0x8535e94acc3a
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0x6a8
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0x5
            diffserv = 0xf3
            totalLen = 0xb643
            identification = 0x9954
            flags = 0b011
            fragOffset = 0b1010100000100
            ttl = 0xab
            protocol = 0x9b
            hdrChecksum = 0x7237
            srcAddr = 0xd5af1b2b
            dstAddr = 0x28dbc076
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xdeb88b72b411
            srcAddr = 0x8535e94acc3a
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0x6a8
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0x5
            diffserv = 0xf3
            totalLen = 0xb643
            identification = 0x9954
            flags = 0b011
            fragOffset = 0b1010100000100
            ttl = 0xab
            protocol = 0x9b
            hdrChecksum = 0x8fa7
            srcAddr = 0xd5af1b2b
            dstAddr = 0x28dbc076
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x06a8),
            ipv4_srcAddr = hex_to_i32(0xd5af1b2b),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x06a8),
            ipv4_dstAddr = hex_to_i32(0x28dbc076),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xde\xb8\x8b\x72\xb4\x11',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x85\x35\xe9\x4a\xcc\x3a',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x06a8),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x02),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x05),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xf3),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xb643),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x9954),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x03),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x1504),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xab),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x9b),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x7237),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x28dbc076),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xd5af1b2b),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x2330),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xa905),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xf196d0f4),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x2114e281),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x09),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x1c),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x941e),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xbea2),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x012e),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x4470),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xe562),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x5f14),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xde\xb8\x8b\x72\xb4\x11\x85\x35\xe9\x4a\xcc\x3a\x81\x00\x86\xa8\x08\x00\x25\xf3\xb6\x43\x99\x54\x75\x04\xab\x9b\x72\x37\xd5\xaf\x1b\x2b\x28\xdb\xc0\x76\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xde\xb8\x8b\x72\xb4\x11\x85\x35\xe9\x4a\xcc\x3a\x81\x00\x86\xa8\x08\x00\x25\xf3\xb6\x43\x99\x54\x75\x04\xab\x9b\x8f\xa7\xd5\xaf\x1b\x2b\x28\xdb\xc0\x76\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test99(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x40c21d41143d
            srcAddr = 0x829a396f002d
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0x1aa
            etherType = 0x0800
        ipv4 =
            version = 0xe
            ihl = 0x3
            diffserv = 0x9d
            totalLen = 0x2f03
            identification = 0x1eff
            flags = 0b000
            fragOffset = 0b0101101010010
            ttl = 0xbf
            protocol = 0xdb
            hdrChecksum = 0x3a16
            srcAddr = 0x6a5bf3bb
            dstAddr = 0x455c7ecb
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x40c21d41143d
            srcAddr = 0x829a396f002d
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0x1aa
            etherType = 0x0800
        ipv4 =
            version = 0xe
            ihl = 0x3
            diffserv = 0x9d
            totalLen = 0x2f03
            identification = 0xd8e4
            flags = 0b000
            fragOffset = 0b0101101010010
            ttl = 0xbf
            protocol = 0xdb
            hdrChecksum = 0x270d
            srcAddr = 0x6a5bf3bb
            dstAddr = 0x455c7ecb
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xd8e4),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x01aa),
            ipv4_srcAddr = hex_to_i32(0x6a5bf3bb),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x01aa),
            ipv4_dstAddr = hex_to_i32(0x455c7ecb),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x006d),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x40\xc2\x1d\x41\x14\x3d',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x82\x9a\x39\x6f\x00\x2d',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x01aa),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0e),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x03),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x9d),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x2f03),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x1eff),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0b52),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xbf),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xdb),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x3a16),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x455c7ecb),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x6a5bf3bb),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x7659),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xa903),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x45cfa3a4),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xdfc6ff7d),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x00),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x05),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x04),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xbad3),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xc9e3),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x7306),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x8b55),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x9e8d),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x377c),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x40\xc2\x1d\x41\x14\x3d\x82\x9a\x39\x6f\x00\x2d\x81\x00\x21\xaa\x08\x00\xe3\x9d\x2f\x03\x1e\xff\x0b\x52\xbf\xdb\x3a\x16\x6a\x5b\xf3\xbb\x45\x5c\x7e\xcb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x40\xc2\x1d\x41\x14\x3d\x82\x9a\x39\x6f\x00\x2d\x81\x00\x21\xaa\x08\x00\xe3\x9d\x2f\x03\xd8\xe4\x0b\x52\xbf\xdb\x27\x0d\x6a\x5b\xf3\xbb\x45\x5c\x7e\xcb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test100(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0xee180ece7fe2
            srcAddr = 0xffb43d6e6dff
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0xe6a
            etherType = 0x0800
        ipv4 =
            version = 0x1
            ihl = 0x5
            diffserv = 0xd6
            totalLen = 0x2194
            identification = 0xfa5f
            flags = 0b000
            fragOffset = 0b1100000011111
            ttl = 0xfa
            protocol = 0x4f
            hdrChecksum = 0x314d
            srcAddr = 0x53104357
            dstAddr = 0xc524fb68
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x0ac3),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0e6a),
            ipv4_srcAddr = hex_to_i32(0x53104357),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0e6a),
            ipv4_dstAddr = hex_to_i32(0xc524fb68),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0164),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xee\x18\x0e\xce\x7f\xe2',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xff\xb4\x3d\x6e\x6d\xff',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0e6a),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x01),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x05),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xd6),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x2194),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xfa5f),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x181f),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xfa),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x4f),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x314d),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xc524fb68),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x53104357),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x88fa),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xb713),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xa48169dd),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xb709f4be),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x01),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x05),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x18),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x74a5),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xe949),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x5862),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x72d8),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x6881),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x90e9),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\xee\x18\x0e\xce\x7f\xe2\xff\xb4\x3d\x6e\x6d\xff\x81\x00\x8e\x6a\x08\x00\x15\xd6\x21\x94\xfa\x5f\x18\x1f\xfa\x4f\x31\x4d\x53\x10\x43\x57\xc5\x24\xfb\x68\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test101(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x823b20bfe613
            srcAddr = 0xf4660e001dc4
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0xcc8
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0xd
            diffserv = 0xb2
            totalLen = 0x5a54
            identification = 0xb623
            flags = 0b100
            fragOffset = 0b0001111111000
            ttl = 0xa5
            protocol = 0x95
            hdrChecksum = 0x9e07
            srcAddr = 0x87c45eed
            dstAddr = 0x0bbb0936
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 3:
        ethernet =
            dstAddr = 0x823b20bfe613
            srcAddr = 0xf4660e001dc4
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0xcc8
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0xd
            diffserv = 0xb2
            totalLen = 0x5a54
            identification = 0xb623
            flags = 0b100
            fragOffset = 0b0001111111000
            ttl = 0xa5
            protocol = 0x95
            hdrChecksum = 0xcca3
            srcAddr = 0x87c45eed
            dstAddr = 0x0bbb0936
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0cc8),
            ipv4_dstAddr = hex_to_i32(0x0bbb0936),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0003),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x82\x3b\x20\xbf\xe6\x13',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xf4\x66\x0e\x00\x1d\xc4',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0cc8),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0f),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0d),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xb2),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x5a54),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xb623),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x04),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x03f8),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xa5),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x95),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x9e07),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x0bbb0936),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x87c45eed),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x31e7),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x237e),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x1adeb775),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xb6b66748),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0c),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x34),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x7cc8),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x5151),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xe238),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xb8bf),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x545f),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x492b),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x82\x3b\x20\xbf\xe6\x13\xf4\x66\x0e\x00\x1d\xc4\x81\x00\x6c\xc8\x08\x00\xfd\xb2\x5a\x54\xb6\x23\x83\xf8\xa5\x95\x9e\x07\x87\xc4\x5e\xed\x0b\xbb\x09\x36\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 3
        exp_pkt = b'\x82\x3b\x20\xbf\xe6\x13\xf4\x66\x0e\x00\x1d\xc4\x81\x00\x6c\xc8\x08\x00\xfd\xb2\x5a\x54\xb6\x23\x83\xf8\xa5\x95\xcc\xa3\x87\xc4\x5e\xed\x0b\xbb\x09\x36\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test102(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0xb02c51ee6fc9
            srcAddr = 0x8e06c5b4c93c
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0xd91
            etherType = 0x0800
        ipv4 =
            version = 0x3
            ihl = 0xd
            diffserv = 0x4d
            totalLen = 0x3d97
            identification = 0x2fbd
            flags = 0b111
            fragOffset = 0b1000001111100
            ttl = 0xe9
            protocol = 0x2a
            hdrChecksum = 0xe50a
            srcAddr = 0x28f08427
            dstAddr = 0x875ad799
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0d91),
            ipv4_dstAddr = hex_to_i32(0x875ad799),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xb0\x2c\x51\xee\x6f\xc9',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x8e\x06\xc5\xb4\xc9\x3c',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0d91),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x03),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0d),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x4d),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x3d97),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x2fbd),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x107c),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xe9),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x2a),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xe50a),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x875ad799),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x28f08427),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x597d),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x9912),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xeb71486f),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x4ef0ed2e),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0b),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x11),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xedbc),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xa979),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x43d7),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xb83b),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x648f),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xdfcd),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\xb0\x2c\x51\xee\x6f\xc9\x8e\x06\xc5\xb4\xc9\x3c\x81\x00\x8d\x91\x08\x00\x3d\x4d\x3d\x97\x2f\xbd\xf0\x7c\xe9\x2a\xe5\x0a\x28\xf0\x84\x27\x87\x5a\xd7\x99\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test103(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x30990997dec9
            srcAddr = 0x5c6690d1b72c
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0x3b4
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0x0
            diffserv = 0xb9
            totalLen = 0x7735
            identification = 0x9fdf
            flags = 0b110
            fragOffset = 0b1001000101110
            ttl = 0x4e
            protocol = 0x6a
            hdrChecksum = 0x151e
            srcAddr = 0xc1fe1a93
            dstAddr = 0x98281c1c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xdace),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x03b4),
            ipv4_srcAddr = hex_to_i32(0xc1fe1a93),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x30\x99\x09\x97\xde\xc9',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x5c\x66\x90\xd1\xb7\x2c',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x03b4),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x02),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x00),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xb9),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x7735),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x9fdf),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x122e),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x4e),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x6a),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x151e),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x98281c1c),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xc1fe1a93),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x5db8),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xd3f1),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x77898209),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xcba262f1),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0a),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x24),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xecac),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xf610),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x7833),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xbb45),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xa724),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xcac1),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x30\x99\x09\x97\xde\xc9\x5c\x66\x90\xd1\xb7\x2c\x81\x00\x83\xb4\x08\x00\x20\xb9\x77\x35\x9f\xdf\xd2\x2e\x4e\x6a\x15\x1e\xc1\xfe\x1a\x93\x98\x28\x1c\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test104(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x3c4546839223
            srcAddr = 0x7fff573f033e
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0x373
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0xe
            diffserv = 0xcc
            totalLen = 0x027e
            identification = 0xe5f0
            flags = 0b110
            fragOffset = 0b0101011111100
            ttl = 0xe5
            protocol = 0x39
            hdrChecksum = 0xbe9c
            srcAddr = 0x6fae5a92
            dstAddr = 0x089b65af
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 6:
        ethernet =
            dstAddr = 0x3c4546839223
            srcAddr = 0x7fff573f033e
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0x373
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0xe
            diffserv = 0xcc
            totalLen = 0x027e
            identification = 0xd474
            flags = 0b110
            fragOffset = 0b0101011111100
            ttl = 0xe5
            protocol = 0x39
            hdrChecksum = 0x917e
            srcAddr = 0x6fae5a92
            dstAddr = 0x089b65af
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xd474),
                action_egress_port = hex_to_i16(0x0006),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0373),
            ipv4_srcAddr = hex_to_i32(0x6fae5a92),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x3c\x45\x46\x83\x92\x23',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x7f\xff\x57\x3f\x03\x3e',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0373),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0a),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0e),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xcc),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x027e),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xe5f0),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0afc),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xe5),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x39),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xbe9c),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x089b65af),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x6fae5a92),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x997c),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xf0c5),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x548fd766),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xfb0ae1a4),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x07),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x05),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x2a),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xaa37),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x0f6b),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xa4c2),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x5997),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x06d2),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x8c38),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x3c\x45\x46\x83\x92\x23\x7f\xff\x57\x3f\x03\x3e\x81\x00\x83\x73\x08\x00\xae\xcc\x02\x7e\xe5\xf0\xca\xfc\xe5\x39\xbe\x9c\x6f\xae\x5a\x92\x08\x9b\x65\xaf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 6
        exp_pkt = b'\x3c\x45\x46\x83\x92\x23\x7f\xff\x57\x3f\x03\x3e\x81\x00\x83\x73\x08\x00\xae\xcc\x02\x7e\xd4\x74\xca\xfc\xe5\x39\x91\x7e\x6f\xae\x5a\x92\x08\x9b\x65\xaf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test105(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x4410a08c477c
            srcAddr = 0xe7604f0ce960
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0x2c3
            etherType = 0x0800
        ipv4 =
            version = 0xd
            ihl = 0xb
            diffserv = 0x85
            totalLen = 0xea24
            identification = 0xd236
            flags = 0b011
            fragOffset = 0b0000101001111
            ttl = 0x8b
            protocol = 0xdc
            hdrChecksum = 0xb6a6
            srcAddr = 0x7525a983
            dstAddr = 0x38f6d5d2
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x02c3),
            ipv4_srcAddr = hex_to_i32(0x7525a983),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x44\x10\xa0\x8c\x47\x7c',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xe7\x60\x4f\x0c\xe9\x60',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x02c3),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0d),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0b),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x85),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xea24),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xd236),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x03),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x014f),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x8b),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xdc),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xb6a6),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x38f6d5d2),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x7525a983),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x2ace),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xc3a4),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x04ed32e0),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x440fb05c),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x09),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x05),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x28),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x43bd),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xace7),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x1d4d),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xb7f5),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xac70),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xedc3),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x44\x10\xa0\x8c\x47\x7c\xe7\x60\x4f\x0c\xe9\x60\x81\x00\x22\xc3\x08\x00\xdb\x85\xea\x24\xd2\x36\x61\x4f\x8b\xdc\xb6\xa6\x75\x25\xa9\x83\x38\xf6\xd5\xd2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test106(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0xa3171268342a
            srcAddr = 0xe0f8f0b940c8
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0x166
            etherType = 0x0800
        ipv4 =
            version = 0xc
            ihl = 0x0
            diffserv = 0xa9
            totalLen = 0x49ba
            identification = 0xa944
            flags = 0b010
            fragOffset = 0b0000000001010
            ttl = 0x50
            protocol = 0x62
            hdrChecksum = 0x82ee
            srcAddr = 0x26f30762
            dstAddr = 0xcb549128
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xa3\x17\x12\x68\x34\x2a',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xe0\xf8\xf0\xb9\x40\xc8',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0166),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0c),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x00),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xa9),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x49ba),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xa944),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x000a),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x50),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x62),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x82ee),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xcb549128),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x26f30762),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x3768),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xb01d),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xd897475f),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x0f37478e),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x02),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x31),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xde3e),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xb137),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x4011),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x585f),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xf603),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x6efd),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\xa3\x17\x12\x68\x34\x2a\xe0\xf8\xf0\xb9\x40\xc8\x81\x00\xe1\x66\x08\x00\xc0\xa9\x49\xba\xa9\x44\x40\x0a\x50\x62\x82\xee\x26\xf3\x07\x62\xcb\x54\x91\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test107(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0xda94c2646a0a
            srcAddr = 0x96e11bbb0bfa
            etherType = 0x8100
        vlan_tag =
            pri = 0b101
            cfi = 0b0
            vlan_id = 0x5ca
            etherType = 0x0800
        ipv4 =
            version = 0x3
            ihl = 0x1
            diffserv = 0xc5
            totalLen = 0xdb7a
            identification = 0x09dd
            flags = 0b111
            fragOffset = 0b1011100101110
            ttl = 0x85
            protocol = 0x4e
            hdrChecksum = 0x382e
            srcAddr = 0x5874c32a
            dstAddr = 0xac192cd0
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x05ca),
            ipv4_dstAddr = hex_to_i32(0xac192cd0),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\xda\x94\xc2\x64\x6a\x0a\x96\xe1\x1b\xbb\x0b\xfa\x81\x00\xa5\xca\x08\x00\x31\xc5\xdb\x7a\x09\xdd\xf7\x2e\x85\x4e\x38\x2e\x58\x74\xc3\x2a\xac\x19\x2c\xd0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test108(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x2a7278c421f0
            srcAddr = 0xee3570be8a5d
            etherType = 0x8100
        vlan_tag =
            pri = 0b101
            cfi = 0b0
            vlan_id = 0xa5a
            etherType = 0x0800
        ipv4 =
            version = 0xd
            ihl = 0x3
            diffserv = 0xe3
            totalLen = 0x7f33
            identification = 0xda3d
            flags = 0b010
            fragOffset = 0b0000011001110
            ttl = 0x02
            protocol = 0xb5
            hdrChecksum = 0xf2cb
            srcAddr = 0xc934d645
            dstAddr = 0xb7609cdd
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x2a7278c421f0
            srcAddr = 0xee3570be8a5d
            etherType = 0x8100
        vlan_tag =
            pri = 0b101
            cfi = 0b0
            vlan_id = 0xa5a
            etherType = 0x0800
        ipv4 =
            version = 0xd
            ihl = 0x3
            diffserv = 0xe3
            totalLen = 0x7f33
            identification = 0xda3d
            flags = 0b010
            fragOffset = 0b0000011001110
            ttl = 0x02
            protocol = 0xb5
            hdrChecksum = 0x9b6e
            srcAddr = 0xc934d645
            dstAddr = 0xb7609cdd
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0a5a),
            ipv4_dstAddr = hex_to_i32(0xb7609cdd),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x2a\x72\x78\xc4\x21\xf0\xee\x35\x70\xbe\x8a\x5d\x81\x00\xaa\x5a\x08\x00\xd3\xe3\x7f\x33\xda\x3d\x40\xce\x02\xb5\xf2\xcb\xc9\x34\xd6\x45\xb7\x60\x9c\xdd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x2a\x72\x78\xc4\x21\xf0\xee\x35\x70\xbe\x8a\x5d\x81\x00\xaa\x5a\x08\x00\xd3\xe3\x7f\x33\xda\x3d\x40\xce\x02\xb5\x9b\x6e\xc9\x34\xd6\x45\xb7\x60\x9c\xdd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test109(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xd474e9941111
            srcAddr = 0xb15b43784b22
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0xbf1
            etherType = 0x0800
        ipv4 =
            version = 0xd
            ihl = 0x8
            diffserv = 0x94
            totalLen = 0xc25d
            identification = 0x58de
            flags = 0b001
            fragOffset = 0b0100010110000
            ttl = 0xb6
            protocol = 0x5d
            hdrChecksum = 0x2b31
            srcAddr = 0xcefa21f0
            dstAddr = 0xf0d3817f
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x527d),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0bf1),
            ipv4_srcAddr = hex_to_i32(0xcefa21f0),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0bf1),
            ipv4_dstAddr = hex_to_i32(0xf0d3817f),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x00bf),)))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xd4\x74\xe9\x94\x11\x11\xb1\x5b\x43\x78\x4b\x22\x81\x00\x6b\xf1\x08\x00\xd8\x94\xc2\x5d\x58\xde\x28\xb0\xb6\x5d\x2b\x31\xce\xfa\x21\xf0\xf0\xd3\x81\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test110(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x53ae2c09c829
            srcAddr = 0x861ba29db211
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0x16e
            etherType = 0x0800
        ipv4 =
            version = 0xb
            ihl = 0x4
            diffserv = 0x6d
            totalLen = 0xc9ae
            identification = 0xcbe3
            flags = 0b011
            fragOffset = 0b1010000000111
            ttl = 0xd9
            protocol = 0x25
            hdrChecksum = 0x72fe
            srcAddr = 0xa1ddc2ea
            dstAddr = 0x5614f2a6
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x53ae2c09c829
            srcAddr = 0x861ba29db211
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0x16e
            etherType = 0x0800
        ipv4 =
            version = 0xb
            ihl = 0x4
            diffserv = 0x6d
            totalLen = 0xc9ae
            identification = 0x9824
            flags = 0b011
            fragOffset = 0b1010000000111
            ttl = 0xd9
            protocol = 0x25
            hdrChecksum = 0xef0d
            srcAddr = 0xa1ddc2ea
            dstAddr = 0x5614f2a6
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x9824),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x016e),
            ipv4_srcAddr = hex_to_i32(0xa1ddc2ea),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x016e),
            ipv4_dstAddr = hex_to_i32(0x5614f2a6),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01f9),)))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x53\xae\x2c\x09\xc8\x29\x86\x1b\xa2\x9d\xb2\x11\x81\x00\x61\x6e\x08\x00\xb4\x6d\xc9\xae\xcb\xe3\x74\x07\xd9\x25\x72\xfe\xa1\xdd\xc2\xea\x56\x14\xf2\xa6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x53\xae\x2c\x09\xc8\x29\x86\x1b\xa2\x9d\xb2\x11\x81\x00\x61\x6e\x08\x00\xb4\x6d\xc9\xae\x98\x24\x74\x07\xd9\x25\xef\x0d\xa1\xdd\xc2\xea\x56\x14\xf2\xa6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test111(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x04dc37df508a
            srcAddr = 0xbf0d57c56931
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0xc11
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0xa
            diffserv = 0x9a
            totalLen = 0x1f02
            identification = 0x8736
            flags = 0b011
            fragOffset = 0b1100111000011
            ttl = 0x47
            protocol = 0x2b
            hdrChecksum = 0xd053
            srcAddr = 0x03b212a1
            dstAddr = 0x794729de
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0c11),
            ipv4_srcAddr = hex_to_i32(0x03b212a1),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0c11),
            ipv4_dstAddr = hex_to_i32(0x794729de),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x04\xdc\x37\xdf\x50\x8a\xbf\x0d\x57\xc5\x69\x31\x81\x00\x8c\x11\x08\x00\xfa\x9a\x1f\x02\x87\x36\x79\xc3\x47\x2b\xd0\x53\x03\xb2\x12\xa1\x79\x47\x29\xde\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test112(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0xf1472839787c
            srcAddr = 0xa02621e69608
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0xc8f
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0x7
            diffserv = 0xfe
            totalLen = 0x7ec6
            identification = 0x12c7
            flags = 0b100
            fragOffset = 0b1000010001011
            ttl = 0x9d
            protocol = 0xf3
            hdrChecksum = 0xa50f
            srcAddr = 0xb3a205a4
            dstAddr = 0x56d2cc48
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 8:
        ethernet =
            dstAddr = 0xf1472839787c
            srcAddr = 0xa02621e69608
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0xc8f
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0x7
            diffserv = 0xfe
            totalLen = 0x7ec6
            identification = 0x12c7
            flags = 0b100
            fragOffset = 0b1000010001011
            ttl = 0x9d
            protocol = 0xf3
            hdrChecksum = 0x1b93
            srcAddr = 0xb3a205a4
            dstAddr = 0x56d2cc48
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0c8f),
            ipv4_srcAddr = hex_to_i32(0xb3a205a4),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0c8f),
            ipv4_dstAddr = hex_to_i32(0x56d2cc48),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0008),)))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\xf1\x47\x28\x39\x78\x7c\xa0\x26\x21\xe6\x96\x08\x81\x00\x2c\x8f\x08\x00\x47\xfe\x7e\xc6\x12\xc7\x90\x8b\x9d\xf3\xa5\x0f\xb3\xa2\x05\xa4\x56\xd2\xcc\x48\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 8
        exp_pkt = b'\xf1\x47\x28\x39\x78\x7c\xa0\x26\x21\xe6\x96\x08\x81\x00\x2c\x8f\x08\x00\x47\xfe\x7e\xc6\x12\xc7\x90\x8b\x9d\xf3\x1b\x93\xb3\xa2\x05\xa4\x56\xd2\xcc\x48\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test113(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x7c458e618ed4
            srcAddr = 0xd1760b1f2581
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0x770
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0x9
            diffserv = 0x45
            totalLen = 0x1e98
            identification = 0xd2cc
            flags = 0b011
            fragOffset = 0b1001110000000
            ttl = 0xa9
            protocol = 0x18
            hdrChecksum = 0x9413
            srcAddr = 0x87ea5830
            dstAddr = 0xeb8894d4
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0770),
            ipv4_dstAddr = hex_to_i32(0xeb8894d4),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x7c\x45\x8e\x61\x8e\xd4\xd1\x76\x0b\x1f\x25\x81\x81\x00\x67\x70\x08\x00\x29\x45\x1e\x98\xd2\xcc\x73\x80\xa9\x18\x94\x13\x87\xea\x58\x30\xeb\x88\x94\xd4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test114(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x7c458e618ed4
            srcAddr = 0xd1760b1f2581
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0x770
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0x9
            diffserv = 0x45
            totalLen = 0x1e98
            identification = 0xd2cc
            flags = 0b011
            fragOffset = 0b1001110000000
            ttl = 0xa9
            protocol = 0x18
            hdrChecksum = 0x9413
            srcAddr = 0x87ea5830
            dstAddr = 0xeb8894d4
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0770),
            ipv4_srcAddr = hex_to_i32(0x87ea5830),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0770),
            ipv4_dstAddr = hex_to_i32(0xeb8894d4),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x7c\x45\x8e\x61\x8e\xd4\xd1\x76\x0b\x1f\x25\x81\x81\x00\x67\x70\x08\x00\x29\x45\x1e\x98\xd2\xcc\x73\x80\xa9\x18\x94\x13\x87\xea\x58\x30\xeb\x88\x94\xd4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test115(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0xddb9705772ea
            srcAddr = 0x709eb9974cbb
            etherType = 0x8100
        vlan_tag =
            pri = 0b000
            cfi = 0b0
            vlan_id = 0x527
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0x6
            diffserv = 0x39
            totalLen = 0xa332
            identification = 0x0b83
            flags = 0b101
            fragOffset = 0b0100011111010
            ttl = 0xcc
            protocol = 0x2f
            hdrChecksum = 0x6ef3
            srcAddr = 0xd8c6f690
            dstAddr = 0x5aa7f255
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xddb9705772ea
            srcAddr = 0x709eb9974cbb
            etherType = 0x8100
        vlan_tag =
            pri = 0b000
            cfi = 0b0
            vlan_id = 0x527
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0x6
            diffserv = 0x39
            totalLen = 0xa332
            identification = 0xcb6b
            flags = 0b101
            fragOffset = 0b0100011111010
            ttl = 0xcc
            protocol = 0x2f
            hdrChecksum = 0x09a8
            srcAddr = 0xd8c6f690
            dstAddr = 0x5aa7f255
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xcb6b),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0527),
            ipv4_srcAddr = hex_to_i32(0xd8c6f690),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0527),
            ipv4_dstAddr = hex_to_i32(0x5aa7f255),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\xdd\xb9\x70\x57\x72\xea\x70\x9e\xb9\x97\x4c\xbb\x81\x00\x05\x27\x08\x00\xf6\x39\xa3\x32\x0b\x83\xa8\xfa\xcc\x2f\x6e\xf3\xd8\xc6\xf6\x90\x5a\xa7\xf2\x55\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xdd\xb9\x70\x57\x72\xea\x70\x9e\xb9\x97\x4c\xbb\x81\x00\x05\x27\x08\x00\xf6\x39\xa3\x32\xcb\x6b\xa8\xfa\xcc\x2f\x09\xa8\xd8\xc6\xf6\x90\x5a\xa7\xf2\x55\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test116(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0xb730c61cfd12
            srcAddr = 0xeb7c8bb6788b
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0x92b
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x6
            diffserv = 0x01
            totalLen = 0x7359
            identification = 0xd076
            flags = 0b010
            fragOffset = 0b1110011011101
            ttl = 0x65
            protocol = 0x6a
            hdrChecksum = 0x8e30
            srcAddr = 0x1ebf346c
            dstAddr = 0x21867fac
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xb750),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x092b),
            ipv4_srcAddr = hex_to_i32(0x1ebf346c),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x092b),
            ipv4_dstAddr = hex_to_i32(0x21867fac),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\xb7\x30\xc6\x1c\xfd\x12\xeb\x7c\x8b\xb6\x78\x8b\x81\x00\x49\x2b\x08\x00\xa6\x01\x73\x59\xd0\x76\x5c\xdd\x65\x6a\x8e\x30\x1e\xbf\x34\x6c\x21\x86\x7f\xac\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test117(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0xf10f6ad7ce4a
            srcAddr = 0xfef353254740
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0xb2c
            etherType = 0x0800
        ipv4 =
            version = 0x5
            ihl = 0x5
            diffserv = 0xa8
            totalLen = 0x9678
            identification = 0xa07a
            flags = 0b111
            fragOffset = 0b1100011000011
            ttl = 0x2e
            protocol = 0xe5
            hdrChecksum = 0x58d5
            srcAddr = 0x17e76b83
            dstAddr = 0xade33f54
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        pass
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\xf1\x0f\x6a\xd7\xce\x4a\xfe\xf3\x53\x25\x47\x40\x81\x00\x8b\x2c\x08\x00\x55\xa8\x96\x78\xa0\x7a\xf8\xc3\x2e\xe5\x58\xd5\x17\xe7\x6b\x83\xad\xe3\x3f\x54\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test118(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0xf10f6ad7ce4a
            srcAddr = 0xfef353254740
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0xb2c
            etherType = 0x0800
        ipv4 =
            version = 0x5
            ihl = 0x5
            diffserv = 0xa8
            totalLen = 0x9678
            identification = 0xa07a
            flags = 0b111
            fragOffset = 0b1100011000011
            ttl = 0x2e
            protocol = 0xe5
            hdrChecksum = 0x58d5
            srcAddr = 0x17e76b83
            dstAddr = 0xade33f54
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0b2c),
            ipv4_srcAddr = hex_to_i32(0x17e76b83),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\xf1\x0f\x6a\xd7\xce\x4a\xfe\xf3\x53\x25\x47\x40\x81\x00\x8b\x2c\x08\x00\x55\xa8\x96\x78\xa0\x7a\xf8\xc3\x2e\xe5\x58\xd5\x17\xe7\x6b\x83\xad\xe3\x3f\x54\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test119(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0xe68acca916eb
            srcAddr = 0x492f19126065
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0x3bb
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0xc
            diffserv = 0x13
            totalLen = 0x242c
            identification = 0xba1d
            flags = 0b000
            fragOffset = 0b0010011011011
            ttl = 0x5b
            protocol = 0xac
            hdrChecksum = 0x2aab
            srcAddr = 0x1ae56848
            dstAddr = 0x68949632
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 7:
        ethernet =
            dstAddr = 0xe68acca916eb
            srcAddr = 0x492f19126065
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0x3bb
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0xc
            diffserv = 0x13
            totalLen = 0x242c
            identification = 0xe234
            flags = 0b000
            fragOffset = 0b0010011011011
            ttl = 0x5b
            protocol = 0xac
            hdrChecksum = 0xab0f
            srcAddr = 0x1ae56848
            dstAddr = 0x68949632
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xe234),
                action_egress_port = hex_to_i16(0x0007),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x03bb),
            ipv4_srcAddr = hex_to_i32(0x1ae56848),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\xe6\x8a\xcc\xa9\x16\xeb\x49\x2f\x19\x12\x60\x65\x81\x00\xe3\xbb\x08\x00\x6c\x13\x24\x2c\xba\x1d\x04\xdb\x5b\xac\x2a\xab\x1a\xe5\x68\x48\x68\x94\x96\x32\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 7
        exp_pkt = b'\xe6\x8a\xcc\xa9\x16\xeb\x49\x2f\x19\x12\x60\x65\x81\x00\xe3\xbb\x08\x00\x6c\x13\x24\x2c\xe2\x34\x04\xdb\x5b\xac\xab\x0f\x1a\xe5\x68\x48\x68\x94\x96\x32\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test120(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x203274270557
            srcAddr = 0x74a17dc6be5e
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0x95a
            etherType = 0x0800
        ipv4 =
            version = 0x5
            ihl = 0xe
            diffserv = 0xb3
            totalLen = 0xd4e9
            identification = 0xf84c
            flags = 0b001
            fragOffset = 0b0101110011111
            ttl = 0x64
            protocol = 0x8a
            hdrChecksum = 0xafe1
            srcAddr = 0xad761938
            dstAddr = 0xf57b116e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x610a),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x095a),
            ipv4_srcAddr = hex_to_i32(0xad761938),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x20\x32\x74\x27\x05\x57\x74\xa1\x7d\xc6\xbe\x5e\x81\x00\x69\x5a\x08\x00\x5e\xb3\xd4\xe9\xf8\x4c\x2b\x9f\x64\x8a\xaf\xe1\xad\x76\x19\x38\xf5\x7b\x11\x6e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test121(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x2cef15fa9076
            srcAddr = 0xb6e25fe75d0b
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0xbb3
            etherType = 0x0800
        ipv4 =
            version = 0x3
            ihl = 0x2
            diffserv = 0x62
            totalLen = 0x852e
            identification = 0xef78
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0xeb
            protocol = 0x11
            hdrChecksum = 0xc1f8
            srcAddr = 0xdc644042
            dstAddr = 0x509d9b8d
        udp =
            srcPort = 0xd1c6
            dstPort = 0x638a
            hdr_length = 0x6c27
            checksum = 0xfc43
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x5ad3),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0bb3),
            ipv4_srcAddr = hex_to_i32(0xdc644042),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0bb3),
            ipv4_dstAddr = hex_to_i32(0x509d9b8d),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x2c\xef\x15\xfa\x90\x76',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xb6\xe2\x5f\xe7\x5d\x0b',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0bb3),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x03),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x02),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x62),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x852e),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xef78),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xeb),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xc1f8),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x509d9b8d),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xdc644042),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xc856),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xdfe6),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xe0b3341a),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xf5ba10fd),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x01),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x01),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x5aca),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x7622),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xd213),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xd1c6),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x638a),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x6c27),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x2c\xef\x15\xfa\x90\x76\xb6\xe2\x5f\xe7\x5d\x0b\x81\x00\xeb\xb3\x08\x00\x32\x62\x85\x2e\xef\x78\x20\x00\xeb\x11\xc1\xf8\xdc\x64\x40\x42\x50\x9d\x9b\x8d\xd1\xc6\x63\x8a\x6c\x27\xfc\x43\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test122(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x70ebe6cf8420
            srcAddr = 0x3b8a558d9632
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0x146
            etherType = 0x0800
        ipv4 =
            version = 0x1
            ihl = 0x9
            diffserv = 0xf5
            totalLen = 0x969e
            identification = 0x9a21
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0x4c
            protocol = 0x11
            hdrChecksum = 0x342f
            srcAddr = 0x104a28c8
            dstAddr = 0x798eac77
        udp =
            srcPort = 0xb0b0
            dstPort = 0x8907
            hdr_length = 0xf809
            checksum = 0x2aee
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x70ebe6cf8420
            srcAddr = 0x3b8a558d9632
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0x146
            etherType = 0x0800
        ipv4 =
            version = 0x1
            ihl = 0x9
            diffserv = 0xf5
            totalLen = 0x969e
            identification = 0x47c4
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0x4c
            protocol = 0x11
            hdrChecksum = 0xdc7d
            srcAddr = 0x104a28c8
            dstAddr = 0x798eac77
        udp =
            srcPort = 0xb0b0
            dstPort = 0x8907
            hdr_length = 0xf809
            checksum = 0x2aee
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x47c4),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0146),
            ipv4_srcAddr = hex_to_i32(0x104a28c8),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0146),
            ipv4_dstAddr = hex_to_i32(0x798eac77),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x70\xeb\xe6\xcf\x84\x20',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x3b\x8a\x55\x8d\x96\x32',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0146),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x01),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x09),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xf5),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x969e),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x9a21),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x04),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x4c),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x342f),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x798eac77),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x104a28c8),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x95ed),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x4b22),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x2079cf6f),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x2e534f7c),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x00),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x2f),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xff76),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xa57f),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xbd9e),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xb0b0),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x8907),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0xf809),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x70\xeb\xe6\xcf\x84\x20\x3b\x8a\x55\x8d\x96\x32\x81\x00\x81\x46\x08\x00\x19\xf5\x96\x9e\x9a\x21\x80\x00\x4c\x11\x34\x2f\x10\x4a\x28\xc8\x79\x8e\xac\x77\xb0\xb0\x89\x07\xf8\x09\x2a\xee\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x70\xeb\xe6\xcf\x84\x20\x3b\x8a\x55\x8d\x96\x32\x81\x00\x81\x46\x08\x00\x19\xf5\x96\x9e\x47\xc4\x80\x00\x4c\x11\xdc\x7d\x10\x4a\x28\xc8\x79\x8e\xac\x77\xb0\xb0\x89\x07\xf8\x09\x2a\xee\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test123(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0x637b1643a02e
            srcAddr = 0xfcec9885022d
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x426
            etherType = 0x0800
        ipv4 =
            version = 0xc
            ihl = 0xa
            diffserv = 0xb4
            totalLen = 0xb1b0
            identification = 0x3e6d
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0xfe
            protocol = 0x11
            hdrChecksum = 0x5552
            srcAddr = 0x74de2ff8
            dstAddr = 0x04f0c55f
        udp =
            srcPort = 0x822e
            dstPort = 0x4799
            hdr_length = 0xc550
            checksum = 0x1181
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0426),
            ipv4_srcAddr = hex_to_i32(0x74de2ff8),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0426),
            ipv4_dstAddr = hex_to_i32(0x04f0c55f),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x63\x7b\x16\x43\xa0\x2e',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xfc\xec\x98\x85\x02\x2d',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0426),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0c),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0a),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xb4),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xb1b0),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x3e6d),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xfe),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x5552),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x04f0c55f),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x74de2ff8),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x3d1e),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x186c),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x0c548955),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x79ebd479),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0c),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x38),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x0c21),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xc46e),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xaacd),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x822e),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x4799),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0xc550),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\x63\x7b\x16\x43\xa0\x2e\xfc\xec\x98\x85\x02\x2d\x81\x00\xc4\x26\x08\x00\xca\xb4\xb1\xb0\x3e\x6d\xe0\x00\xfe\x11\x55\x52\x74\xde\x2f\xf8\x04\xf0\xc5\x5f\x82\x2e\x47\x99\xc5\x50\x11\x81\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test124(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x0d03342732e6
            srcAddr = 0x2c7611092054
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0x83a
            etherType = 0x0800
        ipv4 =
            version = 0xb
            ihl = 0xf
            diffserv = 0x22
            totalLen = 0x7057
            identification = 0xd6ff
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0xbc
            protocol = 0x11
            hdrChecksum = 0xa796
            srcAddr = 0xd626984a
            dstAddr = 0x48dc914a
        udp =
            srcPort = 0x7fed
            dstPort = 0xd95f
            hdr_length = 0x0e70
            checksum = 0x9fd5
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x083a),
            ipv4_dstAddr = hex_to_i32(0x48dc914a),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x0d\x03\x34\x27\x32\xe6',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x2c\x76\x11\x09\x20\x54',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x083a),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0b),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0f),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x22),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x7057),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xd6ff),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xbc),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xa796),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x48dc914a),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xd626984a),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x4883),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xf9d9),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xee092b0c),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x63d024a5),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0a),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x01),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x08),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xc77c),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x9ba9),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x4453),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x7fed),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0xd95f),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x0e70),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x0d\x03\x34\x27\x32\xe6\x2c\x76\x11\x09\x20\x54\x81\x00\x28\x3a\x08\x00\xbf\x22\x70\x57\xd6\xff\xe0\x00\xbc\x11\xa7\x96\xd6\x26\x98\x4a\x48\xdc\x91\x4a\x7f\xed\xd9\x5f\x0e\x70\x9f\xd5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test125(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x8be722a5ff5e
            srcAddr = 0x1affcd4aea1a
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0x745
            etherType = 0x0800
        ipv4 =
            version = 0x5
            ihl = 0x8
            diffserv = 0x6b
            totalLen = 0xefd4
            identification = 0x8efa
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0x04
            protocol = 0x11
            hdrChecksum = 0xc121
            srcAddr = 0xba78abb8
            dstAddr = 0x2be0eacf
        udp =
            srcPort = 0xa81f
            dstPort = 0x1968
            hdr_length = 0x0eb8
            checksum = 0x3d16
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x8be722a5ff5e
            srcAddr = 0x1affcd4aea1a
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0x745
            etherType = 0x0800
        ipv4 =
            version = 0x5
            ihl = 0x8
            diffserv = 0x6b
            totalLen = 0xefd4
            identification = 0x8efa
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0x04
            protocol = 0x11
            hdrChecksum = 0x07d2
            srcAddr = 0xba78abb8
            dstAddr = 0x2be0eacf
        udp =
            srcPort = 0xa81f
            dstPort = 0x1968
            hdr_length = 0x0eb8
            checksum = 0x3d16
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0745),
            ipv4_dstAddr = hex_to_i32(0x2be0eacf),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x8b\xe7\x22\xa5\xff\x5e',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x1a\xff\xcd\x4a\xea\x1a',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0745),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x05),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x08),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x6b),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xefd4),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x8efa),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x05),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x04),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xc121),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x2be0eacf),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xba78abb8),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x18c6),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x246e),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xf768af4e),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x4691e480),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x09),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x05),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x3f),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xcd31),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x21d0),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x3d31),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xa81f),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x1968),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x0eb8),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x8b\xe7\x22\xa5\xff\x5e\x1a\xff\xcd\x4a\xea\x1a\x81\x00\x47\x45\x08\x00\x58\x6b\xef\xd4\x8e\xfa\xa0\x00\x04\x11\xc1\x21\xba\x78\xab\xb8\x2b\xe0\xea\xcf\xa8\x1f\x19\x68\x0e\xb8\x3d\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x8b\xe7\x22\xa5\xff\x5e\x1a\xff\xcd\x4a\xea\x1a\x81\x00\x47\x45\x08\x00\x58\x6b\xef\xd4\x8e\xfa\xa0\x00\x04\x11\x07\xd2\xba\x78\xab\xb8\x2b\xe0\xea\xcf\xa8\x1f\x19\x68\x0e\xb8\x3d\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test126(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0xd1f3eeb97e70
            srcAddr = 0x387d02b86ccf
            etherType = 0x8100
        vlan_tag =
            pri = 0b000
            cfi = 0b0
            vlan_id = 0x34e
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0x7
            diffserv = 0x4f
            totalLen = 0x533f
            identification = 0x97c0
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0x32
            protocol = 0x11
            hdrChecksum = 0x9774
            srcAddr = 0x2ef56294
            dstAddr = 0x2a69a46a
        udp =
            srcPort = 0x28ab
            dstPort = 0x94a6
            hdr_length = 0x50fa
            checksum = 0x47a8
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x034e),
            ipv4_dstAddr = hex_to_i32(0x2a69a46a),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xd1\xf3\xee\xb9\x7e\x70',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x38\x7d\x02\xb8\x6c\xcf',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x00),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x034e),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x06),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x07),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x4f),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x533f),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x97c0),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x05),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x32),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x9774),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x2a69a46a),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x2ef56294),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x1186),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x5eea),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xd92d8d37),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xe4736426),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x05),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x05),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x3c),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x1094),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x3bf7),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x540c),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x28ab),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x94a6),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x50fa),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\xd1\xf3\xee\xb9\x7e\x70\x38\x7d\x02\xb8\x6c\xcf\x81\x00\x03\x4e\x08\x00\x67\x4f\x53\x3f\x97\xc0\xa0\x00\x32\x11\x97\x74\x2e\xf5\x62\x94\x2a\x69\xa4\x6a\x28\xab\x94\xa6\x50\xfa\x47\xa8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test127(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x409d1dad5898
            srcAddr = 0x55d278e438b0
            etherType = 0x8100
        vlan_tag =
            pri = 0b000
            cfi = 0b0
            vlan_id = 0x3c1
            etherType = 0x0800
        ipv4 =
            version = 0x5
            ihl = 0xc
            diffserv = 0xb9
            totalLen = 0xd805
            identification = 0xf913
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0x08
            protocol = 0x11
            hdrChecksum = 0xf351
            srcAddr = 0xce816401
            dstAddr = 0x5c5b4f11
        udp =
            srcPort = 0x68ac
            dstPort = 0x226b
            hdr_length = 0xf7bf
            checksum = 0x0f37
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 0:
        ethernet =
            dstAddr = 0x409d1dad5898
            srcAddr = 0x55d278e438b0
            etherType = 0x8100
        vlan_tag =
            pri = 0b000
            cfi = 0b0
            vlan_id = 0x3c1
            etherType = 0x0800
        ipv4 =
            version = 0x5
            ihl = 0xc
            diffserv = 0xb9
            totalLen = 0xd805
            identification = 0xf913
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0x08
            protocol = 0x11
            hdrChecksum = 0x8c2b
            srcAddr = 0xce816401
            dstAddr = 0x5c5b4f11
        udp =
            srcPort = 0x68ac
            dstPort = 0x226b
            hdr_length = 0xf7bf
            checksum = 0x0f37
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x03c1),
            ipv4_srcAddr = hex_to_i32(0xce816401),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x03c1),
            ipv4_dstAddr = hex_to_i32(0x5c5b4f11),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0000),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x40\x9d\x1d\xad\x58\x98',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x55\xd2\x78\xe4\x38\xb0',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x00),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x03c1),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x05),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0c),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xb9),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xd805),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xf913),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x03),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x08),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xf351),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x5c5b4f11),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xce816401),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x7fa3),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x712f),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x73b6e6af),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x80811f47),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x00),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x30),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xd715),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xe328),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x475c),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x68ac),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x226b),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0xf7bf),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x40\x9d\x1d\xad\x58\x98\x55\xd2\x78\xe4\x38\xb0\x81\x00\x03\xc1\x08\x00\x5c\xb9\xd8\x05\xf9\x13\x60\x00\x08\x11\xf3\x51\xce\x81\x64\x01\x5c\x5b\x4f\x11\x68\xac\x22\x6b\xf7\xbf\x0f\x37\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 0
        exp_pkt = b'\x40\x9d\x1d\xad\x58\x98\x55\xd2\x78\xe4\x38\xb0\x81\x00\x03\xc1\x08\x00\x5c\xb9\xd8\x05\xf9\x13\x60\x00\x08\x11\x8c\x2b\xce\x81\x64\x01\x5c\x5b\x4f\x11\x68\xac\x22\x6b\xf7\xbf\x0f\x37\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test128(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x13fe79ad23ea
            srcAddr = 0x69302494ba9d
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0x2aa
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0x6
            diffserv = 0xbb
            totalLen = 0xa603
            identification = 0xf9a7
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0x04
            protocol = 0x11
            hdrChecksum = 0x0acb
            srcAddr = 0x15a95075
            dstAddr = 0x463655b1
        udp =
            srcPort = 0x1c7c
            dstPort = 0x7a3f
            hdr_length = 0xde82
            checksum = 0xe820
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x02aa),
            ipv4_srcAddr = hex_to_i32(0x15a95075),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x02aa),
            ipv4_dstAddr = hex_to_i32(0x463655b1),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x13\xfe\x79\xad\x23\xea',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x69\x30\x24\x94\xba\x9d',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x02aa),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0f),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x06),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xbb),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xa603),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xf9a7),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x04),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x0acb),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x463655b1),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x15a95075),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x99ba),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xefae),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x52eaa0b0),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x233bccf2),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0a),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x05),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xec4c),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x99ca),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x720f),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x1c7c),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x7a3f),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0xde82),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x13\xfe\x79\xad\x23\xea\x69\x30\x24\x94\xba\x9d\x81\x00\x82\xaa\x08\x00\xf6\xbb\xa6\x03\xf9\xa7\x40\x00\x04\x11\x0a\xcb\x15\xa9\x50\x75\x46\x36\x55\xb1\x1c\x7c\x7a\x3f\xde\x82\xe8\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test129(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0xdafc3c818083
            srcAddr = 0x153052498752
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0x739
            etherType = 0x0800
        ipv4 =
            version = 0x7
            ihl = 0x9
            diffserv = 0xff
            totalLen = 0x7427
            identification = 0x3d8d
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0x8c
            protocol = 0x11
            hdrChecksum = 0x5973
            srcAddr = 0x528265c8
            dstAddr = 0x391de833
        udp =
            srcPort = 0x4995
            dstPort = 0x7769
            hdr_length = 0x73d6
            checksum = 0x1ecf
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 10:
        ethernet =
            dstAddr = 0xdafc3c818083
            srcAddr = 0x153052498752
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0x739
            etherType = 0x0800
        ipv4 =
            version = 0x7
            ihl = 0x9
            diffserv = 0xff
            totalLen = 0x7427
            identification = 0xc211
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0x8c
            protocol = 0x11
            hdrChecksum = 0x2a19
            srcAddr = 0x528265c8
            dstAddr = 0x391de833
        udp =
            srcPort = 0x4995
            dstPort = 0x7769
            hdr_length = 0x73d6
            checksum = 0x1ecf
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xc211),
                action_egress_port = hex_to_i16(0x000a),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0739),
            ipv4_srcAddr = hex_to_i32(0x528265c8),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0739),
            ipv4_dstAddr = hex_to_i32(0x391de833),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x010e),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xda\xfc\x3c\x81\x80\x83',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x15\x30\x52\x49\x87\x52',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0739),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x07),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x09),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xff),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x7427),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x3d8d),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x8c),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x5973),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x391de833),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x528265c8),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x9919),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x047f),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xb661d812),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xd6da069f),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0c),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x2a),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x9c68),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x2f49),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xd921),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x4995),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x7769),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x73d6),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\xda\xfc\x3c\x81\x80\x83\x15\x30\x52\x49\x87\x52\x81\x00\x67\x39\x08\x00\x79\xff\x74\x27\x3d\x8d\xc0\x00\x8c\x11\x59\x73\x52\x82\x65\xc8\x39\x1d\xe8\x33\x49\x95\x77\x69\x73\xd6\x1e\xcf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 10
        exp_pkt = b'\xda\xfc\x3c\x81\x80\x83\x15\x30\x52\x49\x87\x52\x81\x00\x67\x39\x08\x00\x79\xff\x74\x27\xc2\x11\xc0\x00\x8c\x11\x2a\x19\x52\x82\x65\xc8\x39\x1d\xe8\x33\x49\x95\x77\x69\x73\xd6\x1e\xcf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test130(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x21f9b048666f
            srcAddr = 0x5e20018caa4b
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0xafe
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0x0
            diffserv = 0xfa
            totalLen = 0xe8d4
            identification = 0x26ce
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0x81
            protocol = 0x11
            hdrChecksum = 0x00f8
            srcAddr = 0xb203024c
            dstAddr = 0x96d4cc33
        udp =
            srcPort = 0xea83
            dstPort = 0xe185
            hdr_length = 0xd331
            checksum = 0xaa9c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xbc81),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0afe),
            ipv4_srcAddr = hex_to_i32(0xb203024c),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0afe),
            ipv4_dstAddr = hex_to_i32(0x96d4cc33),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01c3),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x21\xf9\xb0\x48\x66\x6f',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x5e\x20\x01\x8c\xaa\x4b',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0afe),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0f),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x00),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xfa),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xe8d4),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x26ce),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x81),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x00f8),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x96d4cc33),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xb203024c),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xb489),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x6aa7),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x024d931c),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x1d0e2bc7),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0c),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x00),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x833a),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x6f59),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xae7d),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xea83),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0xe185),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0xd331),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x21\xf9\xb0\x48\x66\x6f\x5e\x20\x01\x8c\xaa\x4b\x81\x00\x4a\xfe\x08\x00\xf0\xfa\xe8\xd4\x26\xce\x00\x00\x81\x11\x00\xf8\xb2\x03\x02\x4c\x96\xd4\xcc\x33\xea\x83\xe1\x85\xd3\x31\xaa\x9c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test131(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x5c6c0d8ee38a
            srcAddr = 0xf01728d3ccfa
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0x6b8
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0xc
            diffserv = 0xe5
            totalLen = 0xb9b3
            identification = 0xd166
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0x7c
            protocol = 0x11
            hdrChecksum = 0xb4b4
            srcAddr = 0xa39db7a0
            dstAddr = 0x02bfee32
        udp =
            srcPort = 0x04a5
            dstPort = 0x960b
            hdr_length = 0xa77b
            checksum = 0x6315
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x06b8),
            ipv4_srcAddr = hex_to_i32(0xa39db7a0),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x5c\x6c\x0d\x8e\xe3\x8a',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xf0\x17\x28\xd3\xcc\xfa',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x06b8),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x06),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0c),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xe5),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xb9b3),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xd166),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x7c),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xb4b4),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x02bfee32),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xa39db7a0),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x8b4b),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x4208),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x222ebcec),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x89a80c8c),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0d),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x09),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x324f),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x1e4e),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xb428),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x04a5),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x960b),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0xa77b),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x5c\x6c\x0d\x8e\xe3\x8a\xf0\x17\x28\xd3\xcc\xfa\x81\x00\x26\xb8\x08\x00\x6c\xe5\xb9\xb3\xd1\x66\x00\x00\x7c\x11\xb4\xb4\xa3\x9d\xb7\xa0\x02\xbf\xee\x32\x04\xa5\x96\x0b\xa7\x7b\x63\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test132(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x142aeff59c5b
            srcAddr = 0x094d7d029da5
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0x53b
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0x3
            diffserv = 0x21
            totalLen = 0x39cf
            identification = 0xfe1e
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0x2b
            protocol = 0x11
            hdrChecksum = 0xe39e
            srcAddr = 0x8c2cf693
            dstAddr = 0x0e81a9df
        udp =
            srcPort = 0x964e
            dstPort = 0x38ee
            hdr_length = 0x07bf
            checksum = 0xc6e4
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x142aeff59c5b
            srcAddr = 0x094d7d029da5
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0x53b
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0x3
            diffserv = 0x21
            totalLen = 0x39cf
            identification = 0xb664
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0x2b
            protocol = 0x11
            hdrChecksum = 0x2678
            srcAddr = 0x8c2cf693
            dstAddr = 0x0e81a9df
        udp =
            srcPort = 0x964e
            dstPort = 0x38ee
            hdr_length = 0x07bf
            checksum = 0xc6e4
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xb664),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x053b),
            ipv4_srcAddr = hex_to_i32(0x8c2cf693),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x14\x2a\xef\xf5\x9c\x5b',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x09\x4d\x7d\x02\x9d\xa5',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x053b),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x06),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x03),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x21),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x39cf),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xfe1e),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x2b),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xe39e),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x0e81a9df),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x8c2cf693),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x9ac2),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x0243),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x44a2050b),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x647d8548),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0b),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x12),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x52f0),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xd659),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x2ea3),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x964e),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x38ee),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x07bf),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x14\x2a\xef\xf5\x9c\x5b\x09\x4d\x7d\x02\x9d\xa5\x81\x00\x25\x3b\x08\x00\x63\x21\x39\xcf\xfe\x1e\x20\x00\x2b\x11\xe3\x9e\x8c\x2c\xf6\x93\x0e\x81\xa9\xdf\x96\x4e\x38\xee\x07\xbf\xc6\xe4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x14\x2a\xef\xf5\x9c\x5b\x09\x4d\x7d\x02\x9d\xa5\x81\x00\x25\x3b\x08\x00\x63\x21\x39\xcf\xb6\x64\x20\x00\x2b\x11\x26\x78\x8c\x2c\xf6\x93\x0e\x81\xa9\xdf\x96\x4e\x38\xee\x07\xbf\xc6\xe4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test133(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x0039b155de93
            srcAddr = 0x8ede2eabb1b7
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x5bd
            etherType = 0x0800
        ipv4 =
            version = 0xb
            ihl = 0x5
            diffserv = 0x00
            totalLen = 0x4bea
            identification = 0xf9de
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0x8d
            protocol = 0x11
            hdrChecksum = 0x09a1
            srcAddr = 0x652b4baa
            dstAddr = 0x511c64f7
        udp =
            srcPort = 0xd4b3
            dstPort = 0xfb70
            hdr_length = 0x4afd
            checksum = 0xb196
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x1faa),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x05bd),
            ipv4_srcAddr = hex_to_i32(0x652b4baa),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x00\x39\xb1\x55\xde\x93',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x8e\xde\x2e\xab\xb1\xb7',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x05bd),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0b),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x05),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x00),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x4bea),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xf9de),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x04),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x8d),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x09a1),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x511c64f7),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x652b4baa),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x3496),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xb8ed),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x3c73c978),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x896ebc66),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x08),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x05),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x00),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x0885),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xaf4f),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x53a4),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xd4b3),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0xfb70),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x4afd),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x00\x39\xb1\x55\xde\x93\x8e\xde\x2e\xab\xb1\xb7\x81\x00\xc5\xbd\x08\x00\xb5\x00\x4b\xea\xf9\xde\x80\x00\x8d\x11\x09\xa1\x65\x2b\x4b\xaa\x51\x1c\x64\xf7\xd4\xb3\xfb\x70\x4a\xfd\xb1\x96\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test134(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x9c79d69be890
            srcAddr = 0x3b6550458ff9
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0x79c
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0xd
            diffserv = 0x51
            totalLen = 0x8720
            identification = 0xb381
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0xb8
            protocol = 0x11
            hdrChecksum = 0x6413
            srcAddr = 0xe8833d97
            dstAddr = 0x89ee7aa4
        udp =
            srcPort = 0x82f9
            dstPort = 0x8e4a
            hdr_length = 0xaad4
            checksum = 0x98a4
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x9c\x79\xd6\x9b\xe8\x90',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x3b\x65\x50\x45\x8f\xf9',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x079c),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x06),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0d),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x51),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x8720),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xb381),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x05),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xb8),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x6413),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x89ee7aa4),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xe8833d97),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xc688),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xf0f0),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x22225763),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xc6f86a39),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x07),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x03),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x3c),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xf9bc),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x6a0b),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x46c0),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x82f9),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x8e4a),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0xaad4),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x9c\x79\xd6\x9b\xe8\x90\x3b\x65\x50\x45\x8f\xf9\x81\x00\xe7\x9c\x08\x00\x6d\x51\x87\x20\xb3\x81\xa0\x00\xb8\x11\x64\x13\xe8\x83\x3d\x97\x89\xee\x7a\xa4\x82\xf9\x8e\x4a\xaa\xd4\x98\xa4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test135(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x332640a1e7f9
            srcAddr = 0x7b3b342f4346
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0xc08
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0x3
            diffserv = 0xe3
            totalLen = 0xd788
            identification = 0x8350
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0x50
            protocol = 0x11
            hdrChecksum = 0x1f7f
            srcAddr = 0xe5705392
            dstAddr = 0x601257a8
        udp =
            srcPort = 0x0579
            dstPort = 0xee44
            hdr_length = 0xef52
            checksum = 0xc01b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x33\x26\x40\xa1\xe7\xf9',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x7b\x3b\x34\x2f\x43\x46',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0c08),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x00),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x03),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xe3),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xd788),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x8350),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x50),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x1f7f),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x601257a8),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xe5705392),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x2aee),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xc9ec),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x00a0e42d),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x3fee4168),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x00),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x26),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xeecf),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xc774),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x577f),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x0579),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0xee44),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0xef52),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x33\x26\x40\xa1\xe7\xf9\x7b\x3b\x34\x2f\x43\x46\x81\x00\x4c\x08\x08\x00\x03\xe3\xd7\x88\x83\x50\x00\x00\x50\x11\x1f\x7f\xe5\x70\x53\x92\x60\x12\x57\xa8\x05\x79\xee\x44\xef\x52\xc0\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test136(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0xd4910085bdf6
            srcAddr = 0x66c1ec537800
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0x535
            etherType = 0x0800
        ipv4 =
            version = 0x9
            ihl = 0xb
            diffserv = 0xe3
            totalLen = 0xa64a
            identification = 0xed7c
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0xab
            protocol = 0x11
            hdrChecksum = 0x427b
            srcAddr = 0x1e2e45c1
            dstAddr = 0x0036add9
        udp =
            srcPort = 0x9af5
            dstPort = 0xd19e
            hdr_length = 0x29c5
            checksum = 0x6e4d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 14:
        ethernet =
            dstAddr = 0xd4910085bdf6
            srcAddr = 0x66c1ec537800
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0x535
            etherType = 0x0800
        ipv4 =
            version = 0x9
            ihl = 0xb
            diffserv = 0xe3
            totalLen = 0xa64a
            identification = 0xed7c
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0xab
            protocol = 0x11
            hdrChecksum = 0x5343
            srcAddr = 0x1e2e45c1
            dstAddr = 0x0036add9
        udp =
            srcPort = 0x9af5
            dstPort = 0xd19e
            hdr_length = 0x29c5
            checksum = 0x6e4d
    """
    
    def setupCtrlPlane(self):
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xd4\x91\x00\x85\xbd\xf6',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x66\xc1\xec\x53\x78\x00',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0535),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x09),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0b),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xe3),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xa64a),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xed7c),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xab),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x427b),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x0036add9),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x1e2e45c1),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xd112),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x476e),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x531cb110),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x766402d5),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x02),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x0e),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x7dca),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x6e66),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xedcc),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x9af5),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0xd19e),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x29c5),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x000e),), 0))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\xd4\x91\x00\x85\xbd\xf6\x66\xc1\xec\x53\x78\x00\x81\x00\x85\x35\x08\x00\x9b\xe3\xa6\x4a\xed\x7c\xc0\x00\xab\x11\x42\x7b\x1e\x2e\x45\xc1\x00\x36\xad\xd9\x9a\xf5\xd1\x9e\x29\xc5\x6e\x4d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 14
        exp_pkt = b'\xd4\x91\x00\x85\xbd\xf6\x66\xc1\xec\x53\x78\x00\x81\x00\x85\x35\x08\x00\x9b\xe3\xa6\x4a\xed\x7c\xc0\x00\xab\x11\x53\x43\x1e\x2e\x45\xc1\x00\x36\xad\xd9\x9a\xf5\xd1\x9e\x29\xc5\x6e\x4d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test137(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x7a2e7631b3b5
            srcAddr = 0x7b3a2c9d377e
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0xcec
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0x0
            diffserv = 0xfa
            totalLen = 0xc430
            identification = 0x648d
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0x1b
            protocol = 0x11
            hdrChecksum = 0xfa78
            srcAddr = 0x4ac786bb
            dstAddr = 0x3d5ae982
        udp =
            srcPort = 0xcd54
            dstPort = 0x03c6
            hdr_length = 0x5faf
            checksum = 0x055b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 13:
        ethernet =
            dstAddr = 0x7a2e7631b3b5
            srcAddr = 0x7b3a2c9d377e
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0xcec
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0x0
            diffserv = 0xfa
            totalLen = 0xc430
            identification = 0x648d
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0x1b
            protocol = 0x11
            hdrChecksum = 0x12d5
            srcAddr = 0x4ac786bb
            dstAddr = 0x3d5ae982
        udp =
            srcPort = 0xcd54
            dstPort = 0x03c6
            hdr_length = 0x5faf
            checksum = 0x055b
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0cec),
            ipv4_srcAddr = hex_to_i32(0x4ac786bb),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x7a\x2e\x76\x31\xb3\xb5',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x7b\x3a\x2c\x9d\x37\x7e',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0cec),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0f),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x00),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xfa),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xc430),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x648d),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x1b),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xfa78),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x3d5ae982),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x4ac786bb),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x9716),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x1950),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x750cf3a4),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xff7f5595),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0b),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x05),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x26),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x6513),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xdadb),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x0452),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xcd54),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x03c6),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x5faf),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x000d),), 0))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x7a\x2e\x76\x31\xb3\xb5\x7b\x3a\x2c\x9d\x37\x7e\x81\x00\x8c\xec\x08\x00\xf0\xfa\xc4\x30\x64\x8d\xc0\x00\x1b\x11\xfa\x78\x4a\xc7\x86\xbb\x3d\x5a\xe9\x82\xcd\x54\x03\xc6\x5f\xaf\x05\x5b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 13
        exp_pkt = b'\x7a\x2e\x76\x31\xb3\xb5\x7b\x3a\x2c\x9d\x37\x7e\x81\x00\x8c\xec\x08\x00\xf0\xfa\xc4\x30\x64\x8d\xc0\x00\x1b\x11\x12\xd5\x4a\xc7\x86\xbb\x3d\x5a\xe9\x82\xcd\x54\x03\xc6\x5f\xaf\x05\x5b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test138(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x7525a37c3ed1
            srcAddr = 0xc5ec26adb613
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0xed9
            etherType = 0x0800
        ipv4 =
            version = 0x9
            ihl = 0xc
            diffserv = 0x86
            totalLen = 0x7dd5
            identification = 0xcc46
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0x2a
            protocol = 0x11
            hdrChecksum = 0xa6ed
            srcAddr = 0x9b233de1
            dstAddr = 0x4dc42447
        udp =
            srcPort = 0xb99f
            dstPort = 0xb1ed
            hdr_length = 0x00ca
            checksum = 0x6b56
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0ed9),
            ipv4_srcAddr = hex_to_i32(0x9b233de1),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x75\x25\xa3\x7c\x3e\xd1',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xc5\xec\x26\xad\xb6\x13',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0ed9),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x09),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0c),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x86),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x7dd5),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xcc46),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x2a),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xa6ed),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x4dc42447),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x9b233de1),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x8009),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x529c),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xfd84d6a4),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x199c02f9),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0c),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x19),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x51e0),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x6902),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xed2d),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xb99f),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0xb1ed),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x00ca),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x75\x25\xa3\x7c\x3e\xd1\xc5\xec\x26\xad\xb6\x13\x81\x00\x8e\xd9\x08\x00\x9c\x86\x7d\xd5\xcc\x46\x20\x00\x2a\x11\xa6\xed\x9b\x23\x3d\xe1\x4d\xc4\x24\x47\xb9\x9f\xb1\xed\x00\xca\x6b\x56\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test139(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x318443abbc97
            srcAddr = 0x7c99db1cbe13
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x81a
            etherType = 0x0800
        ipv4 =
            version = 0xd
            ihl = 0x9
            diffserv = 0xbb
            totalLen = 0x1db9
            identification = 0x4d46
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0x59
            protocol = 0x11
            hdrChecksum = 0xa63a
            srcAddr = 0x83662c72
            dstAddr = 0x92f39fdd
        udp =
            srcPort = 0xae08
            dstPort = 0xb738
            hdr_length = 0x1fcf
            checksum = 0xa6c2
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x3339),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x081a),
            ipv4_srcAddr = hex_to_i32(0x83662c72),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x31\x84\x43\xab\xbc\x97',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x7c\x99\xdb\x1c\xbe\x13',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x081a),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0d),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x09),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xbb),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x1db9),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x4d46),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x59),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xa63a),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x92f39fdd),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x83662c72),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x062f),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xb988),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xa846b8d3),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x7cb6ebe9),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x11),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xb081),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x4bb3),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x4b1f),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xae08),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0xb738),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x1fcf),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0124),), 0))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x31\x84\x43\xab\xbc\x97\x7c\x99\xdb\x1c\xbe\x13\x81\x00\xc8\x1a\x08\x00\xd9\xbb\x1d\xb9\x4d\x46\xc0\x00\x59\x11\xa6\x3a\x83\x66\x2c\x72\x92\xf3\x9f\xdd\xae\x08\xb7\x38\x1f\xcf\xa6\xc2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test140(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0xa3aeaed911d3
            srcAddr = 0xc159de31fa15
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x767
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0x7
            diffserv = 0x76
            totalLen = 0x5cbb
            identification = 0x0d03
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0x67
            protocol = 0x11
            hdrChecksum = 0x4376
            srcAddr = 0x49f6d1d2
            dstAddr = 0x9e64bd97
        udp =
            srcPort = 0x28a9
            dstPort = 0xeec6
            hdr_length = 0x74ea
            checksum = 0xc54e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 12:
        ethernet =
            dstAddr = 0xa3aeaed911d3
            srcAddr = 0xc159de31fa15
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x767
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0x7
            diffserv = 0x76
            totalLen = 0x5cbb
            identification = 0x4214
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0x67
            protocol = 0x11
            hdrChecksum = 0x3ae3
            srcAddr = 0x49f6d1d2
            dstAddr = 0x9e64bd97
        udp =
            srcPort = 0x28a9
            dstPort = 0xeec6
            hdr_length = 0x74ea
            checksum = 0xc54e
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x4214),
                action_egress_port = hex_to_i16(0x000c),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0767),
            ipv4_srcAddr = hex_to_i32(0x49f6d1d2),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xa3\xae\xae\xd9\x11\xd3',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xc1\x59\xde\x31\xfa\x15',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0767),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x02),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x07),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x76),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x5cbb),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x0d03),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x67),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x4376),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x9e64bd97),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x49f6d1d2),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xf882),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xd50f),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xc0bc2157),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x6d3324d0),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0a),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x01),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x2b),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x6db3),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x589f),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x7872),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x28a9),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0xeec6),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x74ea),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0085),), 0))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\xa3\xae\xae\xd9\x11\xd3\xc1\x59\xde\x31\xfa\x15\x81\x00\xc7\x67\x08\x00\x27\x76\x5c\xbb\x0d\x03\x20\x00\x67\x11\x43\x76\x49\xf6\xd1\xd2\x9e\x64\xbd\x97\x28\xa9\xee\xc6\x74\xea\xc5\x4e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 12
        exp_pkt = b'\xa3\xae\xae\xd9\x11\xd3\xc1\x59\xde\x31\xfa\x15\x81\x00\xc7\x67\x08\x00\x27\x76\x5c\xbb\x42\x14\x20\x00\x67\x11\x3a\xe3\x49\xf6\xd1\xd2\x9e\x64\xbd\x97\x28\xa9\xee\xc6\x74\xea\xc5\x4e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test141(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0xe824aa786681
            srcAddr = 0x17838baa38ad
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0xf6c
            etherType = 0x0800
        ipv4 =
            version = 0x8
            ihl = 0x1
            diffserv = 0xf0
            totalLen = 0x2414
            identification = 0x097b
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0x4f
            protocol = 0x11
            hdrChecksum = 0x7afe
            srcAddr = 0x275ef036
            dstAddr = 0xca08401f
        udp =
            srcPort = 0x9c74
            dstPort = 0x936a
            hdr_length = 0x2c40
            checksum = 0xcc3a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 12:
        ethernet =
            dstAddr = 0xe824aa786681
            srcAddr = 0x17838baa38ad
            etherType = 0x8100
        vlan_tag =
            pri = 0b010
            cfi = 0b0
            vlan_id = 0xf6c
            etherType = 0x0800
        ipv4 =
            version = 0x8
            ihl = 0x1
            diffserv = 0xf0
            totalLen = 0x2414
            identification = 0x097b
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0x4f
            protocol = 0x11
            hdrChecksum = 0x9fb1
            srcAddr = 0x275ef036
            dstAddr = 0xca08401f
        udp =
            srcPort = 0x9c74
            dstPort = 0x936a
            hdr_length = 0x2c40
            checksum = 0xcc3a
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0f6c),
            ipv4_dstAddr = hex_to_i32(0xca08401f),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x000c),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xe8\x24\xaa\x78\x66\x81',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x17\x83\x8b\xaa\x38\xad',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0f6c),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x08),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x01),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xf0),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x2414),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x097b),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x4f),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x7afe),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xca08401f),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x275ef036),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xc80a),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xbfa0),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x5b7732dd),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xc1a777aa),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x08),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x01),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x05),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x15),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xe68d),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xc394),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x5102),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x9c74),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x936a),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x2c40),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x00a4),), 0))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\xe8\x24\xaa\x78\x66\x81\x17\x83\x8b\xaa\x38\xad\x81\x00\x4f\x6c\x08\x00\x81\xf0\x24\x14\x09\x7b\x40\x00\x4f\x11\x7a\xfe\x27\x5e\xf0\x36\xca\x08\x40\x1f\x9c\x74\x93\x6a\x2c\x40\xcc\x3a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 12
        exp_pkt = b'\xe8\x24\xaa\x78\x66\x81\x17\x83\x8b\xaa\x38\xad\x81\x00\x4f\x6c\x08\x00\x81\xf0\x24\x14\x09\x7b\x40\x00\x4f\x11\x9f\xb1\x27\x5e\xf0\x36\xca\x08\x40\x1f\x9c\x74\x93\x6a\x2c\x40\xcc\x3a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test142(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0xf40dbc8e5fd5
            srcAddr = 0x9b379caa84ba
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0x659
            etherType = 0x0800
        ipv4 =
            version = 0x3
            ihl = 0x4
            diffserv = 0x82
            totalLen = 0xbb0f
            identification = 0x70c5
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0xe6
            protocol = 0x11
            hdrChecksum = 0xb0dc
            srcAddr = 0xaf74c29a
            dstAddr = 0xcae40ac1
        udp =
            srcPort = 0x5be2
            dstPort = 0xdba8
            hdr_length = 0x9958
            checksum = 0x0333
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0659),
            ipv4_dstAddr = hex_to_i32(0xcae40ac1),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xf4\x0d\xbc\x8e\x5f\xd5',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x9b\x37\x9c\xaa\x84\xba',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0659),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x03),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x04),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x82),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xbb0f),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x70c5),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xe6),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xb0dc),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xcae40ac1),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xaf74c29a),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xb0e8),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x2a03),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xd394b4c6),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x57aaec1d),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0b),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x0a),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x43ac),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xf1b7),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x836b),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x5be2),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0xdba8),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x9958),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0146),), 0))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\xf4\x0d\xbc\x8e\x5f\xd5\x9b\x37\x9c\xaa\x84\xba\x81\x00\xe6\x59\x08\x00\x34\x82\xbb\x0f\x70\xc5\xc0\x00\xe6\x11\xb0\xdc\xaf\x74\xc2\x9a\xca\xe4\x0a\xc1\x5b\xe2\xdb\xa8\x99\x58\x03\x33\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test143(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x1439b210def6
            srcAddr = 0x224c9f2456a8
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0xa93
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x6
            diffserv = 0x0f
            totalLen = 0x69c8
            identification = 0xd426
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0x1e
            protocol = 0x11
            hdrChecksum = 0x8026
            srcAddr = 0x37e61006
            dstAddr = 0xae75d39d
        udp =
            srcPort = 0x1ee7
            dstPort = 0x1086
            hdr_length = 0x9098
            checksum = 0xf768
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x1439b210def6
            srcAddr = 0x224c9f2456a8
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0xa93
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x6
            diffserv = 0x0f
            totalLen = 0x69c8
            identification = 0xd426
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0x1e
            protocol = 0x11
            hdrChecksum = 0x73ef
            srcAddr = 0x37e61006
            dstAddr = 0xae75d39d
        udp =
            srcPort = 0x1ee7
            dstPort = 0x1086
            hdr_length = 0x9098
            checksum = 0xf768
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0a93),
            ipv4_srcAddr = hex_to_i32(0x37e61006),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0a93),
            ipv4_dstAddr = hex_to_i32(0xae75d39d),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x14\x39\xb2\x10\xde\xf6',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x22\x4c\x9f\x24\x56\xa8',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0a93),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0a),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x06),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x0f),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x69c8),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xd426),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x1e),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x8026),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xae75d39d),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x37e61006),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x229a),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x66c7),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xe946f7e2),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x28277a52),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x02),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x37),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xbd40),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xaa55),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xe39d),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x1ee7),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x1086),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x9098),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0182),), 0))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x14\x39\xb2\x10\xde\xf6\x22\x4c\x9f\x24\x56\xa8\x81\x00\xea\x93\x08\x00\xa6\x0f\x69\xc8\xd4\x26\xc0\x00\x1e\x11\x80\x26\x37\xe6\x10\x06\xae\x75\xd3\x9d\x1e\xe7\x10\x86\x90\x98\xf7\x68\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x14\x39\xb2\x10\xde\xf6\x22\x4c\x9f\x24\x56\xa8\x81\x00\xea\x93\x08\x00\xa6\x0f\x69\xc8\xd4\x26\xc0\x00\x1e\x11\x73\xef\x37\xe6\x10\x06\xae\x75\xd3\x9d\x1e\xe7\x10\x86\x90\x98\xf7\x68\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test144(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x6852a7271581
            srcAddr = 0xa70992a84e7d
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0x127
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0xa
            diffserv = 0xe9
            totalLen = 0x2bf3
            identification = 0xb647
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0x5d
            protocol = 0x11
            hdrChecksum = 0x297a
            srcAddr = 0x023c444f
            dstAddr = 0x4d1fc1ac
        udp =
            srcPort = 0x5796
            dstPort = 0x54bb
            hdr_length = 0xf5a7
            checksum = 0x9f2c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0127),
            ipv4_srcAddr = hex_to_i32(0x023c444f),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0127),
            ipv4_dstAddr = hex_to_i32(0x4d1fc1ac),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x68\x52\xa7\x27\x15\x81',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xa7\x09\x92\xa8\x4e\x7d',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0127),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x02),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0a),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xe9),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x2bf3),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xb647),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x5d),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x297a),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x4d1fc1ac),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x023c444f),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x1c10),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xee51),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x78522617),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xcd2c5a84),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0a),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x05),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x22),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x29d1),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xfc6b),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xf1a8),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x5796),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x54bb),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0xf5a7),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x00a8),), 0))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x68\x52\xa7\x27\x15\x81\xa7\x09\x92\xa8\x4e\x7d\x81\x00\x21\x27\x08\x00\x2a\xe9\x2b\xf3\xb6\x47\x40\x00\x5d\x11\x29\x7a\x02\x3c\x44\x4f\x4d\x1f\xc1\xac\x57\x96\x54\xbb\xf5\xa7\x9f\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test145(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x3584789b3c11
            srcAddr = 0x032e128d92d6
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0x4ba
            etherType = 0x0800
        ipv4 =
            version = 0x1
            ihl = 0xe
            diffserv = 0x03
            totalLen = 0xc426
            identification = 0xb63a
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0x02
            protocol = 0x11
            hdrChecksum = 0xfb8e
            srcAddr = 0xdcc84633
            dstAddr = 0x98e6075b
        udp =
            srcPort = 0xc82d
            dstPort = 0xfaf6
            hdr_length = 0x731d
            checksum = 0xad2e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 14:
        ethernet =
            dstAddr = 0x3584789b3c11
            srcAddr = 0x032e128d92d6
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0x4ba
            etherType = 0x0800
        ipv4 =
            version = 0x1
            ihl = 0xe
            diffserv = 0x03
            totalLen = 0xc426
            identification = 0xfa27
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0x02
            protocol = 0x11
            hdrChecksum = 0xfe5e
            srcAddr = 0xdcc84633
            dstAddr = 0x98e6075b
        udp =
            srcPort = 0xc82d
            dstPort = 0xfaf6
            hdr_length = 0x731d
            checksum = 0xad2e
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xfa27),
                action_egress_port = hex_to_i16(0x000e),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x04ba),
            ipv4_srcAddr = hex_to_i32(0xdcc84633),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x04ba),
            ipv4_dstAddr = hex_to_i32(0x98e6075b),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0157),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x35\x84\x78\x9b\x3c\x11',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x03\x2e\x12\x8d\x92\xd6',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x04ba),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x01),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0e),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x03),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xc426),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xb63a),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x03),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x02),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xfb8e),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x98e6075b),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xdcc84633),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xdd2a),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x6f78),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x1681dbe4),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x097af0c7),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0b),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x05),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x03),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x3a),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x3cb9),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xf675),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x5a0b),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xc82d),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0xfaf6),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x731d),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0091),), 0))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x35\x84\x78\x9b\x3c\x11\x03\x2e\x12\x8d\x92\xd6\x81\x00\x64\xba\x08\x00\x1e\x03\xc4\x26\xb6\x3a\x60\x00\x02\x11\xfb\x8e\xdc\xc8\x46\x33\x98\xe6\x07\x5b\xc8\x2d\xfa\xf6\x73\x1d\xad\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 14
        exp_pkt = b'\x35\x84\x78\x9b\x3c\x11\x03\x2e\x12\x8d\x92\xd6\x81\x00\x64\xba\x08\x00\x1e\x03\xc4\x26\xfa\x27\x60\x00\x02\x11\xfe\x5e\xdc\xc8\x46\x33\x98\xe6\x07\x5b\xc8\x2d\xfa\xf6\x73\x1d\xad\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test146(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x74ca7de9b7ff
            srcAddr = 0x03aa2a96ec3d
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x4ab
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0x4
            diffserv = 0xf2
            totalLen = 0xd2c7
            identification = 0x9a78
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0xe3
            protocol = 0x11
            hdrChecksum = 0x592d
            srcAddr = 0xd544fb28
            dstAddr = 0xec8e5850
        udp =
            srcPort = 0x7b24
            dstPort = 0x2e87
            hdr_length = 0x79e0
            checksum = 0x69db
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x5f33),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x04ab),
            ipv4_srcAddr = hex_to_i32(0xd544fb28),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x04ab),
            ipv4_dstAddr = hex_to_i32(0xec8e5850),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x016a),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x74\xca\x7d\xe9\xb7\xff',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x03\xaa\x2a\x96\xec\x3d',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x04ab),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x06),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x04),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xf2),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xd2c7),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x9a78),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xe3),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x592d),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xec8e5850),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xd544fb28),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xe679),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x785d),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x0425efe6),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xa6ff3160),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x07),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x05),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x35),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xdf80),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xc36f),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xaf83),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x7b24),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x2e87),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x79e0),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01dc),), 0))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x74\xca\x7d\xe9\xb7\xff\x03\xaa\x2a\x96\xec\x3d\x81\x00\xc4\xab\x08\x00\x64\xf2\xd2\xc7\x9a\x78\x40\x00\xe3\x11\x59\x2d\xd5\x44\xfb\x28\xec\x8e\x58\x50\x7b\x24\x2e\x87\x79\xe0\x69\xdb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test147(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x45dba2ab7995
            srcAddr = 0xefdcdeaff6ef
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0x2db
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0xd
            diffserv = 0xe2
            totalLen = 0x2bd4
            identification = 0x92c4
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0x6d
            protocol = 0x11
            hdrChecksum = 0xb150
            srcAddr = 0x470779eb
            dstAddr = 0xa4452f85
        udp =
            srcPort = 0xac80
            dstPort = 0x3d06
            hdr_length = 0xcda4
            checksum = 0x3173
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x02db),
            ipv4_srcAddr = hex_to_i32(0x470779eb),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x02db),
            ipv4_dstAddr = hex_to_i32(0xa4452f85),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x45\xdb\xa2\xab\x79\x95',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xef\xdc\xde\xaf\xf6\xef',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x02db),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x04),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0d),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xe2),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x2bd4),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x92c4),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x04),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x6d),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xb150),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xa4452f85),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x470779eb),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xdf70),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x8c3a),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xbe0d6d1e),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xc32718a2),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x07),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x15),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xfd4e),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xd6d9),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xc9d6),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xac80),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x3d06),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0xcda4),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x45\xdb\xa2\xab\x79\x95\xef\xdc\xde\xaf\xf6\xef\x81\x00\x22\xdb\x08\x00\x4d\xe2\x2b\xd4\x92\xc4\x80\x00\x6d\x11\xb1\x50\x47\x07\x79\xeb\xa4\x45\x2f\x85\xac\x80\x3d\x06\xcd\xa4\x31\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test148(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0xe58dfd29e05a
            srcAddr = 0x480d2d5ce823
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0xb8d
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x7
            diffserv = 0x62
            totalLen = 0x37e1
            identification = 0x2061
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0x5b
            protocol = 0x11
            hdrChecksum = 0xec43
            srcAddr = 0xfd886b9e
            dstAddr = 0x2bc874df
        udp =
            srcPort = 0x252c
            dstPort = 0xdb65
            hdr_length = 0xafe5
            checksum = 0x29a5
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 0:
        ethernet =
            dstAddr = 0xe58dfd29e05a
            srcAddr = 0x480d2d5ce823
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0xb8d
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x7
            diffserv = 0x62
            totalLen = 0x37e1
            identification = 0x2061
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0x5b
            protocol = 0x11
            hdrChecksum = 0x5b7a
            srcAddr = 0xfd886b9e
            dstAddr = 0x2bc874df
        udp =
            srcPort = 0x252c
            dstPort = 0xdb65
            hdr_length = 0xafe5
            checksum = 0x29a5
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0b8d),
            ipv4_srcAddr = hex_to_i32(0xfd886b9e),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0b8d),
            ipv4_dstAddr = hex_to_i32(0x2bc874df),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xe5\x8d\xfd\x29\xe0\x5a',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x48\x0d\x2d\x5c\xe8\x23',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0b8d),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0a),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x07),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x62),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x37e1),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x2061),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x5b),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xec43),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x2bc874df),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xfd886b9e),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xb25d),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xaa2a),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x70ac3e7e),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x78f709c8),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x1d),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x8372),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x68a6),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x65da),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x252c),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0xdb65),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0xafe5),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0000),), 0))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\xe5\x8d\xfd\x29\xe0\x5a\x48\x0d\x2d\x5c\xe8\x23\x81\x00\x2b\x8d\x08\x00\xa7\x62\x37\xe1\x20\x61\x40\x00\x5b\x11\xec\x43\xfd\x88\x6b\x9e\x2b\xc8\x74\xdf\x25\x2c\xdb\x65\xaf\xe5\x29\xa5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 0
        exp_pkt = b'\xe5\x8d\xfd\x29\xe0\x5a\x48\x0d\x2d\x5c\xe8\x23\x81\x00\x2b\x8d\x08\x00\xa7\x62\x37\xe1\x20\x61\x40\x00\x5b\x11\x5b\x7a\xfd\x88\x6b\x9e\x2b\xc8\x74\xdf\x25\x2c\xdb\x65\xaf\xe5\x29\xa5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test149(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0xf38193fa142b
            srcAddr = 0xcc4adfd16434
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0x201
            etherType = 0x0800
        ipv4 =
            version = 0xd
            ihl = 0x9
            diffserv = 0xdd
            totalLen = 0xb870
            identification = 0xe4a8
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0xff
            protocol = 0x11
            hdrChecksum = 0x3f4c
            srcAddr = 0xaf4cfed3
            dstAddr = 0xdc2bb1bb
        udp =
            srcPort = 0x2ac4
            dstPort = 0x5c40
            hdr_length = 0x3d76
            checksum = 0xcedb
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xc343),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0201),
            ipv4_srcAddr = hex_to_i32(0xaf4cfed3),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0201),
            ipv4_dstAddr = hex_to_i32(0xdc2bb1bb),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xf3\x81\x93\xfa\x14\x2b',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xcc\x4a\xdf\xd1\x64\x34',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0201),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x0d),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x09),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xdd),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xb870),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xe4a8),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xff),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x3f4c),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xdc2bb1bb),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xaf4cfed3),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x7b29),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x4bea),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x62034232),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x59f4fe8f),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x03),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x05),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x25),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x7b92),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xe31d),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xdf17),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x2ac4),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x5c40),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x3d76),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0051),), 0))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\xf3\x81\x93\xfa\x14\x2b\xcc\x4a\xdf\xd1\x64\x34\x81\x00\x22\x01\x08\x00\xd9\xdd\xb8\x70\xe4\xa8\xe0\x00\xff\x11\x3f\x4c\xaf\x4c\xfe\xd3\xdc\x2b\xb1\xbb\x2a\xc4\x5c\x40\x3d\x76\xce\xdb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test150(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0xeede27f7487b
            srcAddr = 0xc630f6406e28
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x14d
            etherType = 0x0800
        ipv4 =
            version = 0x5
            ihl = 0x7
            diffserv = 0x4e
            totalLen = 0x7cc6
            identification = 0x5665
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0x71
            protocol = 0x11
            hdrChecksum = 0x7b60
            srcAddr = 0x8e19cf18
            dstAddr = 0xa67e5e99
        udp =
            srcPort = 0x360a
            dstPort = 0x305b
            hdr_length = 0x1360
            checksum = 0xeefa
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xeede27f7487b
            srcAddr = 0xc630f6406e28
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x14d
            etherType = 0x0800
        ipv4 =
            version = 0x5
            ihl = 0x7
            diffserv = 0x4e
            totalLen = 0x7cc6
            identification = 0x9815
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0x71
            protocol = 0x11
            hdrChecksum = 0xa079
            srcAddr = 0x8e19cf18
            dstAddr = 0xa67e5e99
        udp =
            srcPort = 0x360a
            dstPort = 0x305b
            hdr_length = 0x1360
            checksum = 0xeefa
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x9815),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x014d),
            ipv4_srcAddr = hex_to_i32(0x8e19cf18),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x014d),
            ipv4_dstAddr = hex_to_i32(0xa67e5e99),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xee\xde\x27\xf7\x48\x7b',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xc6\x30\xf6\x40\x6e\x28',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x014d),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x05),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x07),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x4e),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x7cc6),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x5665),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x71),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x7b60),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xa67e5e99),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x8e19cf18),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x1e23),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xea9f),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x99214a1e),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x9292c59e),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0e),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x10),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x9d64),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xae0b),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x3540),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x360a),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x305b),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x1360),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x013c),), 0))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\xee\xde\x27\xf7\x48\x7b\xc6\x30\xf6\x40\x6e\x28\x81\x00\xc1\x4d\x08\x00\x57\x4e\x7c\xc6\x56\x65\x20\x00\x71\x11\x7b\x60\x8e\x19\xcf\x18\xa6\x7e\x5e\x99\x36\x0a\x30\x5b\x13\x60\xee\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xee\xde\x27\xf7\x48\x7b\xc6\x30\xf6\x40\x6e\x28\x81\x00\xc1\x4d\x08\x00\x57\x4e\x7c\xc6\x98\x15\x20\x00\x71\x11\xa0\x79\x8e\x19\xcf\x18\xa6\x7e\x5e\x99\x36\x0a\x30\x5b\x13\x60\xee\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test151(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x719f4cca02e0
            srcAddr = 0x48c96f3d3e35
            etherType = 0x8100
        vlan_tag =
            pri = 0b000
            cfi = 0b0
            vlan_id = 0x5a2
            etherType = 0x0800
        ipv4 =
            version = 0x5
            ihl = 0xd
            diffserv = 0x48
            totalLen = 0x743e
            identification = 0x2db3
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0x32
            protocol = 0x11
            hdrChecksum = 0xdbd4
            srcAddr = 0x8c2a1511
            dstAddr = 0x43f03b3e
        udp =
            srcPort = 0xd26f
            dstPort = 0x13db
            hdr_length = 0x8d77
            checksum = 0x51c1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 6:
        ethernet =
            dstAddr = 0x719f4cca02e0
            srcAddr = 0x48c96f3d3e35
            etherType = 0x8100
        vlan_tag =
            pri = 0b000
            cfi = 0b0
            vlan_id = 0x5a2
            etherType = 0x0800
        ipv4 =
            version = 0x5
            ihl = 0xd
            diffserv = 0x48
            totalLen = 0x743e
            identification = 0x2db3
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0x32
            protocol = 0x11
            hdrChecksum = 0x4e4a
            srcAddr = 0x8c2a1511
            dstAddr = 0x43f03b3e
        udp =
            srcPort = 0xd26f
            dstPort = 0x13db
            hdr_length = 0x8d77
            checksum = 0x51c1
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x05a2),
            ipv4_dstAddr = hex_to_i32(0x43f03b3e),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x71\x9f\x4c\xca\x02\xe0',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x48\xc9\x6f\x3d\x3e\x35',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x00),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x05a2),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x05),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0d),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x48),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x743e),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x2db3),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x03),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x32),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xdbd4),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x43f03b3e),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x8c2a1511),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x90f5),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xfab0),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x2c75c7ac),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x0f0f09d1),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x1c),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x61fd),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x6538),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x1038),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xd26f),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x13db),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x8d77),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0006),), 0))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x71\x9f\x4c\xca\x02\xe0\x48\xc9\x6f\x3d\x3e\x35\x81\x00\x05\xa2\x08\x00\x5d\x48\x74\x3e\x2d\xb3\x60\x00\x32\x11\xdb\xd4\x8c\x2a\x15\x11\x43\xf0\x3b\x3e\xd2\x6f\x13\xdb\x8d\x77\x51\xc1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 6
        exp_pkt = b'\x71\x9f\x4c\xca\x02\xe0\x48\xc9\x6f\x3d\x3e\x35\x81\x00\x05\xa2\x08\x00\x5d\x48\x74\x3e\x2d\xb3\x60\x00\x32\x11\x4e\x4a\x8c\x2a\x15\x11\x43\xf0\x3b\x3e\xd2\x6f\x13\xdb\x8d\x77\x51\xc1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test152(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x6c91e3d3acc2
            srcAddr = 0xb70fe88349fd
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x20a
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0xb
            diffserv = 0x85
            totalLen = 0xc16b
            identification = 0xb7e8
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0xb0
            protocol = 0x11
            hdrChecksum = 0x6b97
            srcAddr = 0x504eda21
            dstAddr = 0x3f60f27c
        udp =
            srcPort = 0xe3ae
            dstPort = 0xcf5a
            hdr_length = 0xc23e
            checksum = 0x7771
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x020a),
            ipv4_dstAddr = hex_to_i32(0x3f60f27c),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x6c\x91\xe3\xd3\xac\xc2',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xb7\x0f\xe8\x83\x49\xfd',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8100),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x07),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x020a),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0fff),
            vlan_tag_etherType = hex_to_i16(0x0800),
            vlan_tag_etherType_mask = hex_to_i16(0xffff),
            ipv4_version = hex_to_byte(0x02),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0b),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x85),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xc16b),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xb7e8),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xb0),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x6b97),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x3f60f27c),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x504eda21),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xd594),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x1260),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x6d1ab05d),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x54a6695e),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0d),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x12),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xb18c),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x344c),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x40be),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xe3ae),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0xcf5a),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0xc23e),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x6c\x91\xe3\xd3\xac\xc2\xb7\x0f\xe8\x83\x49\xfd\x81\x00\xc2\x0a\x08\x00\x2b\x85\xc1\x6b\xb7\xe8\xe0\x00\xb0\x11\x6b\x97\x50\x4e\xda\x21\x3f\x60\xf2\x7c\xe3\xae\xcf\x5a\xc2\x3e\x77\x71\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test153(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x209402be952f
            srcAddr = 0x6fa3b149b3b6
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x02f
            etherType = 0x0800
        ipv4 =
            version = 0x9
            ihl = 0x6
            diffserv = 0x2c
            totalLen = 0x0b64
            identification = 0xcfed
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0x20
            protocol = 0x11
            hdrChecksum = 0x59e4
            srcAddr = 0xee3ae313
            dstAddr = 0xa7991204
        udp =
            srcPort = 0x1a77
            dstPort = 0xc73b
            hdr_length = 0xc757
            checksum = 0x3f61
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x002f),
            ipv4_srcAddr = hex_to_i32(0xee3ae313),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x002f),
            ipv4_dstAddr = hex_to_i32(0xa7991204),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x20\x94\x02\xbe\x95\x2f\x6f\xa3\xb1\x49\xb3\xb6\x81\x00\xc0\x2f\x08\x00\x96\x2c\x0b\x64\xcf\xed\xe0\x00\x20\x11\x59\xe4\xee\x3a\xe3\x13\xa7\x99\x12\x04\x1a\x77\xc7\x3b\xc7\x57\x3f\x61\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test154(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x3d4fcc34bd7b
            srcAddr = 0x1c2762b02875
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0xaea
            etherType = 0x0800
        ipv4 =
            version = 0x9
            ihl = 0xc
            diffserv = 0x6e
            totalLen = 0x2dff
            identification = 0x1cd2
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0x2f
            protocol = 0x11
            hdrChecksum = 0x2be6
            srcAddr = 0x2af5c7e2
            dstAddr = 0xfb80acdf
        udp =
            srcPort = 0x6df7
            dstPort = 0x00a5
            hdr_length = 0x2641
            checksum = 0x5ed7
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x3d4fcc34bd7b
            srcAddr = 0x1c2762b02875
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0xaea
            etherType = 0x0800
        ipv4 =
            version = 0x9
            ihl = 0xc
            diffserv = 0x6e
            totalLen = 0x2dff
            identification = 0x1cd2
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0x2f
            protocol = 0x11
            hdrChecksum = 0xee75
            srcAddr = 0x2af5c7e2
            dstAddr = 0xfb80acdf
        udp =
            srcPort = 0x6df7
            dstPort = 0x00a5
            hdr_length = 0x2641
            checksum = 0x5ed7
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0aea),
            ipv4_srcAddr = hex_to_i32(0x2af5c7e2),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0aea),
            ipv4_dstAddr = hex_to_i32(0xfb80acdf),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x3d\x4f\xcc\x34\xbd\x7b\x1c\x27\x62\xb0\x28\x75\x81\x00\xea\xea\x08\x00\x9c\x6e\x2d\xff\x1c\xd2\x60\x00\x2f\x11\x2b\xe6\x2a\xf5\xc7\xe2\xfb\x80\xac\xdf\x6d\xf7\x00\xa5\x26\x41\x5e\xd7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x3d\x4f\xcc\x34\xbd\x7b\x1c\x27\x62\xb0\x28\x75\x81\x00\xea\xea\x08\x00\x9c\x6e\x2d\xff\x1c\xd2\x60\x00\x2f\x11\xee\x75\x2a\xf5\xc7\xe2\xfb\x80\xac\xdf\x6d\xf7\x00\xa5\x26\x41\x5e\xd7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test155(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0xfe300d4e64ba
            srcAddr = 0x7e64688f9af1
            etherType = 0x8100
        vlan_tag =
            pri = 0b011
            cfi = 0b0
            vlan_id = 0x5ab
            etherType = 0x0800
        ipv4 =
            version = 0x5
            ihl = 0x0
            diffserv = 0x5d
            totalLen = 0xf4b9
            identification = 0x1ee9
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0x4e
            protocol = 0x11
            hdrChecksum = 0x2916
            srcAddr = 0x5b5877f9
            dstAddr = 0x750a7c53
        udp =
            srcPort = 0x21dc
            dstPort = 0x2aea
            hdr_length = 0x065c
            checksum = 0x1836
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x5f1a),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x05ab),
            ipv4_srcAddr = hex_to_i32(0x5b5877f9),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x05ab),
            ipv4_dstAddr = hex_to_i32(0x750a7c53),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0176),)))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\xfe\x30\x0d\x4e\x64\xba\x7e\x64\x68\x8f\x9a\xf1\x81\x00\x65\xab\x08\x00\x50\x5d\xf4\xb9\x1e\xe9\x60\x00\x4e\x11\x29\x16\x5b\x58\x77\xf9\x75\x0a\x7c\x53\x21\xdc\x2a\xea\x06\x5c\x18\x36\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test156(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0x2811fa5d3778
            srcAddr = 0xdefadc4ccb8d
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0x987
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0xf
            diffserv = 0xce
            totalLen = 0x2b53
            identification = 0x42fb
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0x12
            protocol = 0x11
            hdrChecksum = 0x77da
            srcAddr = 0x033fc24f
            dstAddr = 0xc4ba1af5
        udp =
            srcPort = 0x8140
            dstPort = 0x3764
            hdr_length = 0x1a3f
            checksum = 0xa578
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x2811fa5d3778
            srcAddr = 0xdefadc4ccb8d
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0x987
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0xf
            diffserv = 0xce
            totalLen = 0x2b53
            identification = 0xafb7
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0x12
            protocol = 0x11
            hdrChecksum = 0x9dd6
            srcAddr = 0x033fc24f
            dstAddr = 0xc4ba1af5
        udp =
            srcPort = 0x8140
            dstPort = 0x3764
            hdr_length = 0x1a3f
            checksum = 0xa578
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xafb7),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0987),
            ipv4_srcAddr = hex_to_i32(0x033fc24f),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0987),
            ipv4_dstAddr = hex_to_i32(0xc4ba1af5),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0065),)))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\x28\x11\xfa\x5d\x37\x78\xde\xfa\xdc\x4c\xcb\x8d\x81\x00\xe9\x87\x08\x00\x2f\xce\x2b\x53\x42\xfb\xa0\x00\x12\x11\x77\xda\x03\x3f\xc2\x4f\xc4\xba\x1a\xf5\x81\x40\x37\x64\x1a\x3f\xa5\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x28\x11\xfa\x5d\x37\x78\xde\xfa\xdc\x4c\xcb\x8d\x81\x00\xe9\x87\x08\x00\x2f\xce\x2b\x53\xaf\xb7\xa0\x00\x12\x11\x9d\xd6\x03\x3f\xc2\x4f\xc4\xba\x1a\xf5\x81\x40\x37\x64\x1a\x3f\xa5\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test157(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0xc4c224b7b400
            srcAddr = 0xee76ea7df8df
            etherType = 0x8100
        vlan_tag =
            pri = 0b000
            cfi = 0b0
            vlan_id = 0xc48
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0x7
            diffserv = 0x71
            totalLen = 0x5121
            identification = 0x3fdb
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0x3a
            protocol = 0x11
            hdrChecksum = 0xc016
            srcAddr = 0x67c32523
            dstAddr = 0xb4b5c36c
        udp =
            srcPort = 0x4217
            dstPort = 0x22e7
            hdr_length = 0xc5f5
            checksum = 0x0119
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 1:
        ethernet =
            dstAddr = 0xc4c224b7b400
            srcAddr = 0xee76ea7df8df
            etherType = 0x8100
        vlan_tag =
            pri = 0b000
            cfi = 0b0
            vlan_id = 0xc48
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0x7
            diffserv = 0x71
            totalLen = 0x5121
            identification = 0x3fdb
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0x3a
            protocol = 0x11
            hdrChecksum = 0x8877
            srcAddr = 0x67c32523
            dstAddr = 0xb4b5c36c
        udp =
            srcPort = 0x4217
            dstPort = 0x22e7
            hdr_length = 0xc5f5
            checksum = 0x0119
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0c48),
            ipv4_dstAddr = hex_to_i32(0xb4b5c36c),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0001),)))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\xc4\xc2\x24\xb7\xb4\x00\xee\x76\xea\x7d\xf8\xdf\x81\x00\x0c\x48\x08\x00\x07\x71\x51\x21\x3f\xdb\xa0\x00\x3a\x11\xc0\x16\x67\xc3\x25\x23\xb4\xb5\xc3\x6c\x42\x17\x22\xe7\xc5\xf5\x01\x19\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 1
        exp_pkt = b'\xc4\xc2\x24\xb7\xb4\x00\xee\x76\xea\x7d\xf8\xdf\x81\x00\x0c\x48\x08\x00\x07\x71\x51\x21\x3f\xdb\xa0\x00\x3a\x11\x88\x77\x67\xc3\x25\x23\xb4\xb5\xc3\x6c\x42\x17\x22\xe7\xc5\xf5\x01\x19\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test158(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x56d0f87ad50e
            srcAddr = 0x0e5ba20ea241
            etherType = 0x8100
        vlan_tag =
            pri = 0b000
            cfi = 0b0
            vlan_id = 0x078
            etherType = 0x0800
        ipv4 =
            version = 0xe
            ihl = 0xf
            diffserv = 0xc1
            totalLen = 0x83b0
            identification = 0xca95
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0xa1
            protocol = 0x11
            hdrChecksum = 0xa9e3
            srcAddr = 0xd87bc98f
            dstAddr = 0x77cd4bc9
        udp =
            srcPort = 0x15d1
            dstPort = 0x1ed5
            hdr_length = 0xd747
            checksum = 0x1397
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0078),
            ipv4_dstAddr = hex_to_i32(0x77cd4bc9),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x56\xd0\xf8\x7a\xd5\x0e\x0e\x5b\xa2\x0e\xa2\x41\x81\x00\x00\x78\x08\x00\xef\xc1\x83\xb0\xca\x95\x40\x00\xa1\x11\xa9\xe3\xd8\x7b\xc9\x8f\x77\xcd\x4b\xc9\x15\xd1\x1e\xd5\xd7\x47\x13\x97\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test159(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x02e55bed7506
            srcAddr = 0x6798dcc02ff6
            etherType = 0x8100
        vlan_tag =
            pri = 0b100
            cfi = 0b0
            vlan_id = 0xe7b
            etherType = 0x0800
        ipv4 =
            version = 0xb
            ihl = 0x0
            diffserv = 0x5f
            totalLen = 0x5b3a
            identification = 0x0862
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0x4b
            protocol = 0x11
            hdrChecksum = 0x7355
            srcAddr = 0x9de51684
            dstAddr = 0x243bd0c9
        udp =
            srcPort = 0x0b28
            dstPort = 0x381b
            hdr_length = 0xaa03
            checksum = 0x555a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0e7b),
            ipv4_srcAddr = hex_to_i32(0x9de51684),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0e7b),
            ipv4_dstAddr = hex_to_i32(0x243bd0c9),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x02\xe5\x5b\xed\x75\x06\x67\x98\xdc\xc0\x2f\xf6\x81\x00\x8e\x7b\x08\x00\xb0\x5f\x5b\x3a\x08\x62\xa0\x00\x4b\x11\x73\x55\x9d\xe5\x16\x84\x24\x3b\xd0\xc9\x0b\x28\x38\x1b\xaa\x03\x55\x5a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test160(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0x5b0bf7e5749c
            srcAddr = 0x05ec1fd79a06
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0xdcf
            etherType = 0x0800
        ipv4 =
            version = 0x7
            ihl = 0x8
            diffserv = 0x1a
            totalLen = 0xcccf
            identification = 0x193d
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0xb2
            protocol = 0x11
            hdrChecksum = 0x2c3c
            srcAddr = 0x0dbca875
            dstAddr = 0x2d8810b9
        udp =
            srcPort = 0xfb74
            dstPort = 0x07e5
            hdr_length = 0xa5b3
            checksum = 0x3c3d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 0:
        ethernet =
            dstAddr = 0x5b0bf7e5749c
            srcAddr = 0x05ec1fd79a06
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0xdcf
            etherType = 0x0800
        ipv4 =
            version = 0x7
            ihl = 0x8
            diffserv = 0x1a
            totalLen = 0xcccf
            identification = 0x56dc
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0xb2
            protocol = 0x11
            hdrChecksum = 0x5db4
            srcAddr = 0x0dbca875
            dstAddr = 0x2d8810b9
        udp =
            srcPort = 0xfb74
            dstPort = 0x07e5
            hdr_length = 0xa5b3
            checksum = 0x3c3d
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x56dc),
                action_egress_port = hex_to_i16(0x0000),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0dcf),
            ipv4_srcAddr = hex_to_i32(0x0dbca875),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0dcf),
            ipv4_dstAddr = hex_to_i32(0x2d8810b9),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\x5b\x0b\xf7\xe5\x74\x9c\x05\xec\x1f\xd7\x9a\x06\x81\x00\xcd\xcf\x08\x00\x78\x1a\xcc\xcf\x19\x3d\x60\x00\xb2\x11\x2c\x3c\x0d\xbc\xa8\x75\x2d\x88\x10\xb9\xfb\x74\x07\xe5\xa5\xb3\x3c\x3d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 0
        exp_pkt = b'\x5b\x0b\xf7\xe5\x74\x9c\x05\xec\x1f\xd7\x9a\x06\x81\x00\xcd\xcf\x08\x00\x78\x1a\xcc\xcf\x56\xdc\x60\x00\xb2\x11\x5d\xb4\x0d\xbc\xa8\x75\x2d\x88\x10\xb9\xfb\x74\x07\xe5\xa5\xb3\x3c\x3d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test161(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0xd942a33e4b8a
            srcAddr = 0x767043da94a8
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x586
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0x2
            diffserv = 0xae
            totalLen = 0x2153
            identification = 0xc24a
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0x07
            protocol = 0x11
            hdrChecksum = 0xa85e
            srcAddr = 0x1637c764
            dstAddr = 0x5799f9e3
        udp =
            srcPort = 0xa9fb
            dstPort = 0x0d96
            hdr_length = 0x7bf4
            checksum = 0xf566
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xa201),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0586),
            ipv4_srcAddr = hex_to_i32(0x1637c764),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0586),
            ipv4_dstAddr = hex_to_i32(0x5799f9e3),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\xd9\x42\xa3\x3e\x4b\x8a\x76\x70\x43\xda\x94\xa8\x81\x00\xc5\x86\x08\x00\x62\xae\x21\x53\xc2\x4a\x00\x00\x07\x11\xa8\x5e\x16\x37\xc7\x64\x57\x99\xf9\xe3\xa9\xfb\x0d\x96\x7b\xf4\xf5\x66\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test162(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x5b5a50b29ecc
            srcAddr = 0x70e00434db8d
            etherType = 0x8100
        vlan_tag =
            pri = 0b111
            cfi = 0b0
            vlan_id = 0xb7b
            etherType = 0x0800
        ipv4 =
            version = 0x5
            ihl = 0x4
            diffserv = 0x6a
            totalLen = 0xf2c6
            identification = 0x5260
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0x1e
            protocol = 0x11
            hdrChecksum = 0xc641
            srcAddr = 0xb1388877
            dstAddr = 0x0c5501cf
        udp =
            srcPort = 0xdc7a
            dstPort = 0x1dcf
            hdr_length = 0x7e89
            checksum = 0x848e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
            tcp_valid = hex_to_byte(0x00),
            tcp_valid_mask = hex_to_byte(0x01),
            vlan_tag_vlan_id = hex_to_i16(0x0b7b),
            ipv4_dstAddr = hex_to_i32(0x0c5501cf),
            ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_tbl'].append(
            self.client.atcam_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x5b\x5a\x50\xb2\x9e\xcc\x70\xe0\x04\x34\xdb\x8d\x81\x00\xeb\x7b\x08\x00\x54\x6a\xf2\xc6\x52\x60\x00\x00\x1e\x11\xc6\x41\xb1\x38\x88\x77\x0c\x55\x01\xcf\xdc\x7a\x1d\xcf\x7e\x89\x84\x8e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test163(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0xfa8d644ed513
            srcAddr = 0x2354dd3548f0
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0xd98
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0x8
            diffserv = 0x62
            totalLen = 0xaa4f
            identification = 0x99a8
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0x79
            protocol = 0x11
            hdrChecksum = 0x96bb
            srcAddr = 0xa6bdd206
            dstAddr = 0x2c2ebb6b
        udp =
            srcPort = 0x7505
            dstPort = 0xea7c
            hdr_length = 0x6502
            checksum = 0x841d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        pass
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\xfa\x8d\x64\x4e\xd5\x13\x23\x54\xdd\x35\x48\xf0\x81\x00\x2d\x98\x08\x00\x28\x62\xaa\x4f\x99\xa8\xc0\x00\x79\x11\x96\xbb\xa6\xbd\xd2\x06\x2c\x2e\xbb\x6b\x75\x05\xea\x7c\x65\x02\x84\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test164(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0xfa8d644ed513
            srcAddr = 0x2354dd3548f0
            etherType = 0x8100
        vlan_tag =
            pri = 0b001
            cfi = 0b0
            vlan_id = 0xd98
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0x8
            diffserv = 0x62
            totalLen = 0xaa4f
            identification = 0x99a8
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0x79
            protocol = 0x11
            hdrChecksum = 0x96bb
            srcAddr = 0xa6bdd206
            dstAddr = 0x2c2ebb6b
        udp =
            srcPort = 0x7505
            dstPort = 0xea7c
            hdr_length = 0x6502
            checksum = 0x841d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0d98),
            ipv4_srcAddr = hex_to_i32(0xa6bdd206),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\xfa\x8d\x64\x4e\xd5\x13\x23\x54\xdd\x35\x48\xf0\x81\x00\x2d\x98\x08\x00\x28\x62\xaa\x4f\x99\xa8\xc0\x00\x79\x11\x96\xbb\xa6\xbd\xd2\x06\x2c\x2e\xbb\x6b\x75\x05\xea\x7c\x65\x02\x84\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test165(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0xb400f7e141bb
            srcAddr = 0x5159d7c3baac
            etherType = 0x8100
        vlan_tag =
            pri = 0b000
            cfi = 0b0
            vlan_id = 0xcb7
            etherType = 0x0800
        ipv4 =
            version = 0x8
            ihl = 0xc
            diffserv = 0x28
            totalLen = 0x5dcf
            identification = 0x6243
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0xd9
            protocol = 0x11
            hdrChecksum = 0x5047
            srcAddr = 0x511006de
            dstAddr = 0xa6b6e856
        udp =
            srcPort = 0x4b77
            dstPort = 0xdd39
            hdr_length = 0x749f
            checksum = 0xb671
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 1:
        ethernet =
            dstAddr = 0xb400f7e141bb
            srcAddr = 0x5159d7c3baac
            etherType = 0x8100
        vlan_tag =
            pri = 0b000
            cfi = 0b0
            vlan_id = 0xcb7
            etherType = 0x0800
        ipv4 =
            version = 0x8
            ihl = 0xc
            diffserv = 0x28
            totalLen = 0x5dcf
            identification = 0xdfd0
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0xd9
            protocol = 0x11
            hdrChecksum = 0x3629
            srcAddr = 0x511006de
            dstAddr = 0xa6b6e856
        udp =
            srcPort = 0x4b77
            dstPort = 0xdd39
            hdr_length = 0x749f
            checksum = 0xb671
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xdfd0),
                action_egress_port = hex_to_i16(0x0001),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0cb7),
            ipv4_srcAddr = hex_to_i32(0x511006de),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\xb4\x00\xf7\xe1\x41\xbb\x51\x59\xd7\xc3\xba\xac\x81\x00\x0c\xb7\x08\x00\x8c\x28\x5d\xcf\x62\x43\x40\x00\xd9\x11\x50\x47\x51\x10\x06\xde\xa6\xb6\xe8\x56\x4b\x77\xdd\x39\x74\x9f\xb6\x71\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 1
        exp_pkt = b'\xb4\x00\xf7\xe1\x41\xbb\x51\x59\xd7\xc3\xba\xac\x81\x00\x0c\xb7\x08\x00\x8c\x28\x5d\xcf\xdf\xd0\x40\x00\xd9\x11\x36\x29\x51\x10\x06\xde\xa6\xb6\xe8\x56\x4b\x77\xdd\x39\x74\x9f\xb6\x71\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test166(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0xeca38ae1de3c
            srcAddr = 0xd4d2d50d4eb4
            etherType = 0x8100
        vlan_tag =
            pri = 0b110
            cfi = 0b0
            vlan_id = 0x224
            etherType = 0x0800
        ipv4 =
            version = 0xc
            ihl = 0x4
            diffserv = 0x9f
            totalLen = 0xc048
            identification = 0x0687
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0x58
            protocol = 0x11
            hdrChecksum = 0xabe8
            srcAddr = 0x0a7aafb5
            dstAddr = 0xdabbc8ea
        udp =
            srcPort = 0x2cdb
            dstPort = 0xf6db
            hdr_length = 0x4eaa
            checksum = 0x90a2
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan_tag
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xda2a),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
            vlan_tag_vlan_id = hex_to_i16(0x0224),
            ipv4_srcAddr = hex_to_i32(0x0a7aafb5),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
        self.match_entries['atcam_indirect_tbl'].append(
            self.client.atcam_indirect_tbl_add_entry(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                action_hdl))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\xec\xa3\x8a\xe1\xde\x3c\xd4\xd2\xd5\x0d\x4e\xb4\x81\x00\xc2\x24\x08\x00\xc4\x9f\xc0\x48\x06\x87\x80\x00\x58\x11\xab\xe8\x0a\x7a\xaf\xb5\xda\xbb\xc8\xea\x2c\xdb\xf6\xdb\x4e\xaa\x90\xa2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test167(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x797b40a0d407
            srcAddr = 0x64758931c4d7
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0xb
            diffserv = 0xf3
            totalLen = 0xcc72
            identification = 0xa931
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0xa0
            protocol = 0x11
            hdrChecksum = 0x8bc5
            srcAddr = 0x306a6b15
            dstAddr = 0x21a163a0
        udp =
            srcPort = 0xb0b2
            dstPort = 0x763b
            hdr_length = 0x97e3
            checksum = 0xc22e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x797b40a0d407
            srcAddr = 0x64758931c4d7
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0xb
            diffserv = 0xf3
            totalLen = 0xcc72
            identification = 0xa931
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0xa0
            protocol = 0x11
            hdrChecksum = 0xdd94
            srcAddr = 0x306a6b15
            dstAddr = 0x21a163a0
        udp =
            srcPort = 0xb0b2
            dstPort = 0x763b
            hdr_length = 0x97e3
            checksum = 0xc22e
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x21a163a0),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0040),)))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x79\x7b\x40\xa0\xd4\x07\x64\x75\x89\x31\xc4\xd7\x08\x00\x0b\xf3\xcc\x72\xa9\x31\xe0\x00\xa0\x11\x8b\xc5\x30\x6a\x6b\x15\x21\xa1\x63\xa0\xb0\xb2\x76\x3b\x97\xe3\xc2\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x79\x7b\x40\xa0\xd4\x07\x64\x75\x89\x31\xc4\xd7\x08\x00\x0b\xf3\xcc\x72\xa9\x31\xe0\x00\xa0\x11\xdd\x94\x30\x6a\x6b\x15\x21\xa1\x63\xa0\xb0\xb2\x76\x3b\x97\xe3\xc2\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test168(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x9b4709246e59
            srcAddr = 0x03cc45029abf
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0xa
            diffserv = 0x60
            totalLen = 0xd311
            identification = 0xe4dd
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0x00
            protocol = 0x11
            hdrChecksum = 0x7461
            srcAddr = 0xffd765e9
            dstAddr = 0xf502a05f
        udp =
            srcPort = 0xfe54
            dstPort = 0xa42b
            hdr_length = 0xf6e6
            checksum = 0xc94c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xf502a05f),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01ff),)))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x9b\x47\x09\x24\x6e\x59\x03\xcc\x45\x02\x9a\xbf\x08\x00\xaa\x60\xd3\x11\xe4\xdd\x20\x00\x00\x11\x74\x61\xff\xd7\x65\xe9\xf5\x02\xa0\x5f\xfe\x54\xa4\x2b\xf6\xe6\xc9\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test169(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x275c06179e2a
            srcAddr = 0x6c9c3cc21c6a
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0xe
            diffserv = 0x03
            totalLen = 0xb7f7
            identification = 0xb0e1
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0xef
            protocol = 0x11
            hdrChecksum = 0xfaa2
            srcAddr = 0x6656035a
            dstAddr = 0x2dc80019
        udp =
            srcPort = 0x2d7b
            dstPort = 0xb082
            hdr_length = 0x6161
            checksum = 0x8ef8
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x275c06179e2a
            srcAddr = 0x6c9c3cc21c6a
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0xe
            diffserv = 0x03
            totalLen = 0xb7f7
            identification = 0xb0e1
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0xef
            protocol = 0x11
            hdrChecksum = 0x327e
            srcAddr = 0x6656035a
            dstAddr = 0x2dc80019
        udp =
            srcPort = 0x2d7b
            dstPort = 0xb082
            hdr_length = 0x6161
            checksum = 0x8ef8
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x6656035a),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x2dc80019),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0040),)))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x27\x5c\x06\x17\x9e\x2a\x6c\x9c\x3c\xc2\x1c\x6a\x08\x00\xfe\x03\xb7\xf7\xb0\xe1\xe0\x00\xef\x11\xfa\xa2\x66\x56\x03\x5a\x2d\xc8\x00\x19\x2d\x7b\xb0\x82\x61\x61\x8e\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x27\x5c\x06\x17\x9e\x2a\x6c\x9c\x3c\xc2\x1c\x6a\x08\x00\xfe\x03\xb7\xf7\xb0\xe1\xe0\x00\xef\x11\x32\x7e\x66\x56\x03\x5a\x2d\xc8\x00\x19\x2d\x7b\xb0\x82\x61\x61\x8e\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test170(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0x48ae24c9360c
            srcAddr = 0x7a620eda3aab
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0xf
            diffserv = 0x0a
            totalLen = 0xc971
            identification = 0x680c
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0x37
            protocol = 0x11
            hdrChecksum = 0x4f83
            srcAddr = 0x909527a7
            dstAddr = 0x86245e01
        udp =
            srcPort = 0x5b1a
            dstPort = 0x72f6
            hdr_length = 0xe062
            checksum = 0xd006
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x909527a7),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x86245e01),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01ff),)))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\x48\xae\x24\xc9\x36\x0c\x7a\x62\x0e\xda\x3a\xab\x08\x00\xff\x0a\xc9\x71\x68\x0c\x60\x00\x37\x11\x4f\x83\x90\x95\x27\xa7\x86\x24\x5e\x01\x5b\x1a\x72\xf6\xe0\x62\xd0\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test171(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xaebdb3ffc64a
            srcAddr = 0xe25cd612ad22
            etherType = 0x0800
        ipv4 =
            version = 0x3
            ihl = 0x0
            diffserv = 0x5d
            totalLen = 0x14fe
            identification = 0xf981
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0xc0
            protocol = 0x11
            hdrChecksum = 0x5650
            srcAddr = 0x201820df
            dstAddr = 0xa43431eb
        udp =
            srcPort = 0x4324
            dstPort = 0x5d63
            hdr_length = 0x0045
            checksum = 0xf858
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xaebdb3ffc64a
            srcAddr = 0xe25cd612ad22
            etherType = 0x0800
        ipv4 =
            version = 0x3
            ihl = 0x0
            diffserv = 0x5d
            totalLen = 0x14fe
            identification = 0x476a
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0xc0
            protocol = 0x11
            hdrChecksum = 0x5c11
            srcAddr = 0x201820df
            dstAddr = 0xa43431eb
        udp =
            srcPort = 0x4324
            dstPort = 0x5d63
            hdr_length = 0x0045
            checksum = 0xf858
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x476a),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x201820df),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xa43431eb),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x00e7),)))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xae\xbd\xb3\xff\xc6\x4a\xe2\x5c\xd6\x12\xad\x22\x08\x00\x30\x5d\x14\xfe\xf9\x81\x40\x00\xc0\x11\x56\x50\x20\x18\x20\xdf\xa4\x34\x31\xeb\x43\x24\x5d\x63\x00\x45\xf8\x58\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xae\xbd\xb3\xff\xc6\x4a\xe2\x5c\xd6\x12\xad\x22\x08\x00\x30\x5d\x14\xfe\x47\x6a\x40\x00\xc0\x11\x5c\x11\x20\x18\x20\xdf\xa4\x34\x31\xeb\x43\x24\x5d\x63\x00\x45\xf8\x58\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test172(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x6e943de49a35
            srcAddr = 0x817ba21e883f
            etherType = 0x0800
        ipv4 =
            version = 0x7
            ihl = 0x9
            diffserv = 0x9e
            totalLen = 0xa47c
            identification = 0xf7f9
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0xcc
            protocol = 0x11
            hdrChecksum = 0x4626
            srcAddr = 0x83078c7e
            dstAddr = 0x979ebc71
        udp =
            srcPort = 0x54c7
            dstPort = 0x3130
            hdr_length = 0xe92b
            checksum = 0x5b5d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x43e3),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x83078c7e),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x979ebc71),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x00e7),)))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x6e\x94\x3d\xe4\x9a\x35\x81\x7b\xa2\x1e\x88\x3f\x08\x00\x79\x9e\xa4\x7c\xf7\xf9\xc0\x00\xcc\x11\x46\x26\x83\x07\x8c\x7e\x97\x9e\xbc\x71\x54\xc7\x31\x30\xe9\x2b\x5b\x5d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test173(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x15147601d237
            srcAddr = 0x9186167555f4
            etherType = 0x0800
        ipv4 =
            version = 0x3
            ihl = 0x8
            diffserv = 0x5d
            totalLen = 0x0aeb
            identification = 0x1c9d
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0x11
            protocol = 0x11
            hdrChecksum = 0x0aff
            srcAddr = 0xa34d36b6
            dstAddr = 0x0bd3feb4
        udp =
            srcPort = 0x329a
            dstPort = 0x8d77
            hdr_length = 0x2fbb
            checksum = 0x06c9
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x15147601d237
            srcAddr = 0x9186167555f4
            etherType = 0x0800
        ipv4 =
            version = 0x3
            ihl = 0x8
            diffserv = 0x5d
            totalLen = 0x0aeb
            identification = 0x8a6a
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0x11
            protocol = 0x11
            hdrChecksum = 0xbcaf
            srcAddr = 0xa34d36b6
            dstAddr = 0x0bd3feb4
        udp =
            srcPort = 0x329a
            dstPort = 0x8d77
            hdr_length = 0x2fbb
            checksum = 0x06c9
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x8a6a),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xa34d36b6),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x0bd3feb4),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x15\x14\x76\x01\xd2\x37\x91\x86\x16\x75\x55\xf4\x08\x00\x38\x5d\x0a\xeb\x1c\x9d\x80\x00\x11\x11\x0a\xff\xa3\x4d\x36\xb6\x0b\xd3\xfe\xb4\x32\x9a\x8d\x77\x2f\xbb\x06\xc9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x15\x14\x76\x01\xd2\x37\x91\x86\x16\x75\x55\xf4\x08\x00\x38\x5d\x0a\xeb\x8a\x6a\x80\x00\x11\x11\xbc\xaf\xa3\x4d\x36\xb6\x0b\xd3\xfe\xb4\x32\x9a\x8d\x77\x2f\xbb\x06\xc9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test174(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0xa679b2ce3041
            srcAddr = 0xab2002bbb451
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0x4
            diffserv = 0x1d
            totalLen = 0xad6d
            identification = 0xa523
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0x09
            protocol = 0x11
            hdrChecksum = 0xd95a
            srcAddr = 0xfb5039e4
            dstAddr = 0x078e6a3f
        udp =
            srcPort = 0x0aba
            dstPort = 0x8947
            hdr_length = 0x9e2d
            checksum = 0x0053
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x275b),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xfb5039e4),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x078e6a3f),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\xa6\x79\xb2\xce\x30\x41\xab\x20\x02\xbb\xb4\x51\x08\x00\x24\x1d\xad\x6d\xa5\x23\x60\x00\x09\x11\xd9\x5a\xfb\x50\x39\xe4\x07\x8e\x6a\x3f\x0a\xba\x89\x47\x9e\x2d\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test175(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0x3a651bd9233c
            srcAddr = 0x91914be18934
            etherType = 0x0800
        ipv4 =
            version = 0xb
            ihl = 0x6
            diffserv = 0x60
            totalLen = 0x19c6
            identification = 0xedb6
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0x2b
            protocol = 0x11
            hdrChecksum = 0xd874
            srcAddr = 0x2cc4554b
            dstAddr = 0x9e83246e
        udp =
            srcPort = 0x5d8e
            dstPort = 0xfc6a
            hdr_length = 0x3078
            checksum = 0xfc7d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x2cc4554b),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x9e83246e),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\x3a\x65\x1b\xd9\x23\x3c\x91\x91\x4b\xe1\x89\x34\x08\x00\xb6\x60\x19\xc6\xed\xb6\x80\x00\x2b\x11\xd8\x74\x2c\xc4\x55\x4b\x9e\x83\x24\x6e\x5d\x8e\xfc\x6a\x30\x78\xfc\x7d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test176(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x44eaf4a675e4
            srcAddr = 0xc5ef1140183e
            etherType = 0x0800
        ipv4 =
            version = 0xc
            ihl = 0x2
            diffserv = 0x34
            totalLen = 0xd1b1
            identification = 0x2764
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0x9b
            protocol = 0x11
            hdrChecksum = 0xd15b
            srcAddr = 0x4b064f85
            dstAddr = 0x72c297be
        udp =
            srcPort = 0x7c8b
            dstPort = 0xba11
            hdr_length = 0x6489
            checksum = 0x4f51
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x72c297be),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x44\xea\xf4\xa6\x75\xe4\xc5\xef\x11\x40\x18\x3e\x08\x00\xc2\x34\xd1\xb1\x27\x64\xa0\x00\x9b\x11\xd1\x5b\x4b\x06\x4f\x85\x72\xc2\x97\xbe\x7c\x8b\xba\x11\x64\x89\x4f\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test177(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x06ace303c70a
            srcAddr = 0xe06158eda009
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0xe
            diffserv = 0x23
            totalLen = 0x2e6d
            identification = 0xa5d9
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0x1d
            protocol = 0x11
            hdrChecksum = 0xbf3d
            srcAddr = 0x20d5c11b
            dstAddr = 0xf777160b
        udp =
            srcPort = 0x7c38
            dstPort = 0x374f
            hdr_length = 0xe848
            checksum = 0x7cef
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x06ace303c70a
            srcAddr = 0xe06158eda009
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0xe
            diffserv = 0x23
            totalLen = 0x2e6d
            identification = 0x16ed
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0x1d
            protocol = 0x11
            hdrChecksum = 0xfffc
            srcAddr = 0x20d5c11b
            dstAddr = 0xf777160b
        udp =
            srcPort = 0x7c38
            dstPort = 0x374f
            hdr_length = 0xe848
            checksum = 0x7cef
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x16ed),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x20d5c11b),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x06\xac\xe3\x03\xc7\x0a\xe0\x61\x58\xed\xa0\x09\x08\x00\x0e\x23\x2e\x6d\xa5\xd9\xa0\x00\x1d\x11\xbf\x3d\x20\xd5\xc1\x1b\xf7\x77\x16\x0b\x7c\x38\x37\x4f\xe8\x48\x7c\xef\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x06\xac\xe3\x03\xc7\x0a\xe0\x61\x58\xed\xa0\x09\x08\x00\x0e\x23\x2e\x6d\x16\xed\xa0\x00\x1d\x11\xff\xfc\x20\xd5\xc1\x1b\xf7\x77\x16\x0b\x7c\x38\x37\x4f\xe8\x48\x7c\xef\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test178(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x362551984c72
            srcAddr = 0x8b15569ba7f9
            etherType = 0x0800
        ipv4 =
            version = 0x5
            ihl = 0xb
            diffserv = 0x8a
            totalLen = 0x2e63
            identification = 0x077d
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0x3c
            protocol = 0x11
            hdrChecksum = 0x575c
            srcAddr = 0x253edea8
            dstAddr = 0xccd2e8b3
        udp =
            srcPort = 0x5ff3
            dstPort = 0x6b4f
            hdr_length = 0x301c
            checksum = 0xfa86
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xc426),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x253edea8),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x36\x25\x51\x98\x4c\x72\x8b\x15\x56\x9b\xa7\xf9\x08\x00\x5b\x8a\x2e\x63\x07\x7d\xe0\x00\x3c\x11\x57\x5c\x25\x3e\xde\xa8\xcc\xd2\xe8\xb3\x5f\xf3\x6b\x4f\x30\x1c\xfa\x86\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test179(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x4812be97e14d
            srcAddr = 0xfab03ea52c43
            etherType = 0x0800
        ipv4 =
            version = 0xd
            ihl = 0xe
            diffserv = 0x8c
            totalLen = 0xee60
            identification = 0xdb76
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0x20
            protocol = 0x11
            hdrChecksum = 0x5f43
            srcAddr = 0x8d75c9bb
            dstAddr = 0x90f2c014
        udp =
            srcPort = 0xaaa4
            dstPort = 0xe915
            hdr_length = 0xf91f
            checksum = 0x4136
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x8d75c9bb),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x48\x12\xbe\x97\xe1\x4d\xfa\xb0\x3e\xa5\x2c\x43\x08\x00\xde\x8c\xee\x60\xdb\x76\x20\x00\x20\x11\x5f\x43\x8d\x75\xc9\xbb\x90\xf2\xc0\x14\xaa\xa4\xe9\x15\xf9\x1f\x41\x36\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test180(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0xd89b4cdf34ac
            srcAddr = 0xf6574c2e0aee
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0xc
            diffserv = 0xde
            totalLen = 0xf877
            identification = 0x50f5
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0x28
            protocol = 0x11
            hdrChecksum = 0x337c
            srcAddr = 0xfc0d9856
            dstAddr = 0x052cfeb3
        udp =
            srcPort = 0x4d75
            dstPort = 0x6e3c
            hdr_length = 0x5e24
            checksum = 0xd51e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        pass
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\xd8\x9b\x4c\xdf\x34\xac\xf6\x57\x4c\x2e\x0a\xee\x08\x00\x4c\xde\xf8\x77\x50\xf5\x40\x00\x28\x11\x33\x7c\xfc\x0d\x98\x56\x05\x2c\xfe\xb3\x4d\x75\x6e\x3c\x5e\x24\xd5\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test181(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0xab41fed5d198
            srcAddr = 0x8faf2df6c50a
            etherType = 0x0800
        ipv4 =
            version = 0xd
            ihl = 0x4
            diffserv = 0x51
            totalLen = 0xf9fc
            identification = 0xa3af
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0xad
            protocol = 0x11
            hdrChecksum = 0xda1d
            srcAddr = 0x7c49d920
            dstAddr = 0xe6864398
        udp =
            srcPort = 0xee7c
            dstPort = 0xe0c4
            hdr_length = 0x4914
            checksum = 0xd07c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 14:
        ethernet =
            dstAddr = 0xab41fed5d198
            srcAddr = 0x8faf2df6c50a
            etherType = 0x0800
        ipv4 =
            version = 0xd
            ihl = 0x4
            diffserv = 0x51
            totalLen = 0xf9fc
            identification = 0x6ae9
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0xad
            protocol = 0x11
            hdrChecksum = 0xfa2b
            srcAddr = 0x7c49d920
            dstAddr = 0xe6864398
        udp =
            srcPort = 0xee7c
            dstPort = 0xe0c4
            hdr_length = 0x4914
            checksum = 0xd07c
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x6ae9),
                action_egress_port = hex_to_i16(0x000e),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x7c49d920),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xab\x41\xfe\xd5\xd1\x98',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x8f\xaf\x2d\xf6\xc5\x0a',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0ee4),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xdd0f),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0d),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x04),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x51),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xf9fc),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xa3af),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x05),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xad),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xda1d),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xe6864398),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x7c49d920),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xe470),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xa988),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x800febd8),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x7528fc34),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0c),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x05),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x05),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x34),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xfb20),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x28af),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x3cec),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xee7c),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0xe0c4),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x4914),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0061),), 0))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\xab\x41\xfe\xd5\xd1\x98\x8f\xaf\x2d\xf6\xc5\x0a\x08\x00\xd4\x51\xf9\xfc\xa3\xaf\xa0\x00\xad\x11\xda\x1d\x7c\x49\xd9\x20\xe6\x86\x43\x98\xee\x7c\xe0\xc4\x49\x14\xd0\x7c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 14
        exp_pkt = b'\xab\x41\xfe\xd5\xd1\x98\x8f\xaf\x2d\xf6\xc5\x0a\x08\x00\xd4\x51\xf9\xfc\x6a\xe9\xa0\x00\xad\x11\xfa\x2b\x7c\x49\xd9\x20\xe6\x86\x43\x98\xee\x7c\xe0\xc4\x49\x14\xd0\x7c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test182(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0xb25ede7b1224
            srcAddr = 0xa8543b249820
            etherType = 0x0800
        ipv4 =
            version = 0xe
            ihl = 0xa
            diffserv = 0x2c
            totalLen = 0xeb18
            identification = 0x0150
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0xc3
            protocol = 0x11
            hdrChecksum = 0x9d99
            srcAddr = 0x5c797b1e
            dstAddr = 0xe7510ba8
        udp =
            srcPort = 0xcf5a
            dstPort = 0x4c29
            hdr_length = 0xc209
            checksum = 0x5e44
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x2a0f),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x5c797b1e),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xb2\x5e\xde\x7b\x12\x24',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xa8\x54\x3b\x24\x98\x20',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0011),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xb24e),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0e),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0a),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x2c),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xeb18),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x0150),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xc3),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x9d99),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xe7510ba8),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x5c797b1e),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xe0f4),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xce88),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x17840ac7),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x22652eb5),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x09),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x03),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x35),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x7920),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x23dc),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x0d1c),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xcf5a),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x4c29),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0xc209),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0014),), 0))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\xb2\x5e\xde\x7b\x12\x24\xa8\x54\x3b\x24\x98\x20\x08\x00\xea\x2c\xeb\x18\x01\x50\x00\x00\xc3\x11\x9d\x99\x5c\x79\x7b\x1e\xe7\x51\x0b\xa8\xcf\x5a\x4c\x29\xc2\x09\x5e\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test183(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x2d8a66d2369c
            srcAddr = 0xd39844597df8
            etherType = 0x0800
        ipv4 =
            version = 0x8
            ihl = 0xb
            diffserv = 0x58
            totalLen = 0x4c1e
            identification = 0xa8e6
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0x5b
            protocol = 0x11
            hdrChecksum = 0x6353
            srcAddr = 0x4641e8d3
            dstAddr = 0x2c041d8d
        udp =
            srcPort = 0x9045
            dstPort = 0xdec0
            hdr_length = 0xc18c
            checksum = 0x7675
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x4641e8d3),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x2d\x8a\x66\xd2\x36\x9c',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xd3\x98\x44\x59\x7d\xf8',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x03ba),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x435b),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x08),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0b),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x58),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x4c1e),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xa8e6),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x5b),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x6353),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x2c041d8d),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x4641e8d3),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x1bd8),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xf375),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x5dedf023),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x074e4f44),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x03),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x3f),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x0d9b),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x3b35),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x5222),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x9045),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0xdec0),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0xc18c),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x2d\x8a\x66\xd2\x36\x9c\xd3\x98\x44\x59\x7d\xf8\x08\x00\x8b\x58\x4c\x1e\xa8\xe6\x20\x00\x5b\x11\x63\x53\x46\x41\xe8\xd3\x2c\x04\x1d\x8d\x90\x45\xde\xc0\xc1\x8c\x76\x75\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test184(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x5d2b955f270b
            srcAddr = 0x24e3e5ba74bb
            etherType = 0x0800
        ipv4 =
            version = 0xc
            ihl = 0x6
            diffserv = 0x75
            totalLen = 0x0d35
            identification = 0xf798
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0xe2
            protocol = 0x11
            hdrChecksum = 0x473f
            srcAddr = 0x6889ad5c
            dstAddr = 0x7622f91c
        udp =
            srcPort = 0x53b9
            dstPort = 0xb7c3
            hdr_length = 0x6b90
            checksum = 0x5717
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 10:
        ethernet =
            dstAddr = 0x5d2b955f270b
            srcAddr = 0x24e3e5ba74bb
            etherType = 0x0800
        ipv4 =
            version = 0xc
            ihl = 0x6
            diffserv = 0x75
            totalLen = 0x0d35
            identification = 0xf798
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0xe2
            protocol = 0x11
            hdrChecksum = 0x0d84
            srcAddr = 0x6889ad5c
            dstAddr = 0x7622f91c
        udp =
            srcPort = 0x53b9
            dstPort = 0xb7c3
            hdr_length = 0x6b90
            checksum = 0x5717
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x6889ad5c),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x5d\x2b\x95\x5f\x27\x0b',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x24\xe3\xe5\xba\x74\xbb',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x02c3),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x9974),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0c),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x06),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x75),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x0d35),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xf798),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xe2),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x473f),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x7622f91c),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x6889ad5c),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x49d0),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x9b3c),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x864f7e78),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x767d7157),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0d),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x01),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x21),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x66fe),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xdf6e),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x0ae3),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x53b9),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0xb7c3),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x6b90),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x000a),), 0))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x5d\x2b\x95\x5f\x27\x0b\x24\xe3\xe5\xba\x74\xbb\x08\x00\xc6\x75\x0d\x35\xf7\x98\xc0\x00\xe2\x11\x47\x3f\x68\x89\xad\x5c\x76\x22\xf9\x1c\x53\xb9\xb7\xc3\x6b\x90\x57\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 10
        exp_pkt = b'\x5d\x2b\x95\x5f\x27\x0b\x24\xe3\xe5\xba\x74\xbb\x08\x00\xc6\x75\x0d\x35\xf7\x98\xc0\x00\xe2\x11\x0d\x84\x68\x89\xad\x5c\x76\x22\xf9\x1c\x53\xb9\xb7\xc3\x6b\x90\x57\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test185(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x62aa65b6a223
            srcAddr = 0x2bdf8e046897
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0x0
            diffserv = 0x9a
            totalLen = 0xa7ec
            identification = 0xaa4b
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0xb5
            protocol = 0x11
            hdrChecksum = 0x2ec4
            srcAddr = 0x66c36a4e
            dstAddr = 0xd9086fc0
        udp =
            srcPort = 0xa6f7
            dstPort = 0xac06
            hdr_length = 0x7c60
            checksum = 0x0800
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x62aa65b6a223
            srcAddr = 0x2bdf8e046897
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0x0
            diffserv = 0x9a
            totalLen = 0xa7ec
            identification = 0xaa4b
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0xb5
            protocol = 0x11
            hdrChecksum = 0xee3f
            srcAddr = 0x66c36a4e
            dstAddr = 0xd9086fc0
        udp =
            srcPort = 0xa6f7
            dstPort = 0xac06
            hdr_length = 0x7c60
            checksum = 0x0800
    """
    
    def setupCtrlPlane(self):
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x62\xaa\x65\xb6\xa2\x23',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x2b\xdf\x8e\x04\x68\x97',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0f42),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x15ed),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0f),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x00),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x9a),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xa7ec),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xaa4b),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xb5),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x2ec4),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xd9086fc0),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x66c36a4e),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x6b08),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x3390),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xd90e478b),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xff51ab20),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x35),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x2719),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x9e16),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x2530),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xa6f7),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0xac06),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x7c60),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),), 0))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x62\xaa\x65\xb6\xa2\x23\x2b\xdf\x8e\x04\x68\x97\x08\x00\xf0\x9a\xa7\xec\xaa\x4b\x00\x00\xb5\x11\x2e\xc4\x66\xc3\x6a\x4e\xd9\x08\x6f\xc0\xa6\xf7\xac\x06\x7c\x60\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x62\xaa\x65\xb6\xa2\x23\x2b\xdf\x8e\x04\x68\x97\x08\x00\xf0\x9a\xa7\xec\xaa\x4b\x00\x00\xb5\x11\xee\x3f\x66\xc3\x6a\x4e\xd9\x08\x6f\xc0\xa6\xf7\xac\x06\x7c\x60\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test186(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x98154af0acb5
            srcAddr = 0xf6d99dab0cb5
            etherType = 0x0800
        ipv4 =
            version = 0x5
            ihl = 0x1
            diffserv = 0x0d
            totalLen = 0x1bbc
            identification = 0x00b2
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0xb8
            protocol = 0x11
            hdrChecksum = 0xf79e
            srcAddr = 0x2303144a
            dstAddr = 0x9fbcbe0d
        udp =
            srcPort = 0xb19d
            dstPort = 0x2e73
            hdr_length = 0x3dc7
            checksum = 0x9d51
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x98\x15\x4a\xf0\xac\xb5',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xf6\xd9\x9d\xab\x0c\xb5',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0433),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xca48),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x05),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x01),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x0d),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x1bbc),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x00b2),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xb8),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xf79e),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x9fbcbe0d),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x2303144a),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xb92e),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x8889),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x318eb5b8),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x61559c13),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x09),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x01),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x05),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x02),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x7232),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x0022),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x37c0),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xb19d),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x2e73),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x3dc7),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x98\x15\x4a\xf0\xac\xb5\xf6\xd9\x9d\xab\x0c\xb5\x08\x00\x51\x0d\x1b\xbc\x00\xb2\x20\x00\xb8\x11\xf7\x9e\x23\x03\x14\x4a\x9f\xbc\xbe\x0d\xb1\x9d\x2e\x73\x3d\xc7\x9d\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test187(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x6f23c4b24b98
            srcAddr = 0xb0e30db866e3
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0x7
            diffserv = 0xd9
            totalLen = 0xf1bb
            identification = 0xa24e
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0x27
            protocol = 0x11
            hdrChecksum = 0x5729
            srcAddr = 0xae05948f
            dstAddr = 0x719c3d9a
        udp =
            srcPort = 0x09c6
            dstPort = 0x630f
            hdr_length = 0x41b1
            checksum = 0x43eb
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x719c3d9a),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x6f\x23\xc4\xb2\x4b\x98',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xb0\xe3\x0d\xb8\x66\xe3',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0506),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x383c),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x02),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x07),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xd9),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xf1bb),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xa24e),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x27),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x5729),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x719c3d9a),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xae05948f),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xda66),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x69b3),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x298f34a5),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xc7d7be07),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x05),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x32),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x61f3),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xa2b3),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x3282),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x09c6),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x630f),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x41b1),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x6f\x23\xc4\xb2\x4b\x98\xb0\xe3\x0d\xb8\x66\xe3\x08\x00\x27\xd9\xf1\xbb\xa2\x4e\x00\x00\x27\x11\x57\x29\xae\x05\x94\x8f\x71\x9c\x3d\x9a\x09\xc6\x63\x0f\x41\xb1\x43\xeb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test188(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0xc3274f96b8ba
            srcAddr = 0xbf8c93ceb551
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0x3
            diffserv = 0x8e
            totalLen = 0x2dda
            identification = 0x2172
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0x91
            protocol = 0x11
            hdrChecksum = 0x71b9
            srcAddr = 0x391ca885
            dstAddr = 0x5d083676
        udp =
            srcPort = 0xcabb
            dstPort = 0xe446
            hdr_length = 0x1b98
            checksum = 0x31b2
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 13:
        ethernet =
            dstAddr = 0xc3274f96b8ba
            srcAddr = 0xbf8c93ceb551
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0x3
            diffserv = 0x8e
            totalLen = 0x2dda
            identification = 0x2172
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0x91
            protocol = 0x11
            hdrChecksum = 0x06f3
            srcAddr = 0x391ca885
            dstAddr = 0x5d083676
        udp =
            srcPort = 0xcabb
            dstPort = 0xe446
            hdr_length = 0x1b98
            checksum = 0x31b2
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x5d083676),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xc3\x27\x4f\x96\xb8\xba',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xbf\x8c\x93\xce\xb5\x51',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x05),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0383),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x3955),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x02),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x03),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x8e),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x2dda),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x2172),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x04),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x91),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x71b9),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x5d083676),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x391ca885),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xebb0),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xd0cf),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x97fdc404),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x4428ddb2),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x01),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x01),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x03),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x13),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x41f3),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xaba0),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x6560),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xcabb),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0xe446),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x1b98),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x000d),), 0))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\xc3\x27\x4f\x96\xb8\xba\xbf\x8c\x93\xce\xb5\x51\x08\x00\x23\x8e\x2d\xda\x21\x72\x80\x00\x91\x11\x71\xb9\x39\x1c\xa8\x85\x5d\x08\x36\x76\xca\xbb\xe4\x46\x1b\x98\x31\xb2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 13
        exp_pkt = b'\xc3\x27\x4f\x96\xb8\xba\xbf\x8c\x93\xce\xb5\x51\x08\x00\x23\x8e\x2d\xda\x21\x72\x80\x00\x91\x11\x06\xf3\x39\x1c\xa8\x85\x5d\x08\x36\x76\xca\xbb\xe4\x46\x1b\x98\x31\xb2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test189(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x79c28c147869
            srcAddr = 0xb9d8a99b32c1
            etherType = 0x0800
        ipv4 =
            version = 0x8
            ihl = 0xf
            diffserv = 0x6a
            totalLen = 0x96c1
            identification = 0x731f
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0xcd
            protocol = 0x11
            hdrChecksum = 0x2f83
            srcAddr = 0xb0f0caa6
            dstAddr = 0x06fa5c04
        udp =
            srcPort = 0xa5a9
            dstPort = 0x5b02
            hdr_length = 0x2822
            checksum = 0xafad
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x79c28c147869
            srcAddr = 0xb9d8a99b32c1
            etherType = 0x0800
        ipv4 =
            version = 0x8
            ihl = 0xf
            diffserv = 0x6a
            totalLen = 0x96c1
            identification = 0x98d5
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0xcd
            protocol = 0x11
            hdrChecksum = 0x1556
            srcAddr = 0xb0f0caa6
            dstAddr = 0x06fa5c04
        udp =
            srcPort = 0xa5a9
            dstPort = 0x5b02
            hdr_length = 0x2822
            checksum = 0xafad
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x98d5),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xb0f0caa6),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x06fa5c04),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x79\xc2\x8c\x14\x78\x69',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xb9\xd8\xa9\x9b\x32\xc1',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0be4),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x1427),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x08),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0f),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x6a),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x96c1),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x731f),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x04),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xcd),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x2f83),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x06fa5c04),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xb0f0caa6),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xc00b),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x259b),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xc49e738f),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xd193b657),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x06),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x1d),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xe20b),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xdd9c),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x8514),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xa5a9),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x5b02),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x2822),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x00f0),), 0))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x79\xc2\x8c\x14\x78\x69\xb9\xd8\xa9\x9b\x32\xc1\x08\x00\x8f\x6a\x96\xc1\x73\x1f\x80\x00\xcd\x11\x2f\x83\xb0\xf0\xca\xa6\x06\xfa\x5c\x04\xa5\xa9\x5b\x02\x28\x22\xaf\xad\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x79\xc2\x8c\x14\x78\x69\xb9\xd8\xa9\x9b\x32\xc1\x08\x00\x8f\x6a\x96\xc1\x98\xd5\x80\x00\xcd\x11\x15\x56\xb0\xf0\xca\xa6\x06\xfa\x5c\x04\xa5\xa9\x5b\x02\x28\x22\xaf\xad\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test190(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x8f33451c8e53
            srcAddr = 0xb7caedb8c41d
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0xf
            diffserv = 0x50
            totalLen = 0x4db8
            identification = 0x28e5
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0xdb
            protocol = 0x11
            hdrChecksum = 0xae17
            srcAddr = 0xada033e2
            dstAddr = 0x1357a87a
        udp =
            srcPort = 0x4a7b
            dstPort = 0x2ca9
            hdr_length = 0x52fa
            checksum = 0x37b0
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x0edd),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xada033e2),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x1357a87a),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x8f\x33\x45\x1c\x8e\x53',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xb7\xca\xed\xb8\xc4\x1d',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x087f),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x8368),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x00),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0f),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x50),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x4db8),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x28e5),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xdb),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xae17),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x1357a87a),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xada033e2),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x12d4),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x7756),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xb876ebda),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xb74be5d4),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x05),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x12),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xf033),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x9070),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x7846),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x4a7b),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x2ca9),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x52fa),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x00f1),), 0))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x8f\x33\x45\x1c\x8e\x53\xb7\xca\xed\xb8\xc4\x1d\x08\x00\x0f\x50\x4d\xb8\x28\xe5\x00\x00\xdb\x11\xae\x17\xad\xa0\x33\xe2\x13\x57\xa8\x7a\x4a\x7b\x2c\xa9\x52\xfa\x37\xb0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test191(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x5664b07b2924
            srcAddr = 0x08723bed5a9b
            etherType = 0x0800
        ipv4 =
            version = 0x7
            ihl = 0x6
            diffserv = 0x5e
            totalLen = 0x8d0c
            identification = 0x0356
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0xb3
            protocol = 0x11
            hdrChecksum = 0xf481
            srcAddr = 0x45403ff0
            dstAddr = 0xab47a2c7
        udp =
            srcPort = 0x86f5
            dstPort = 0x1a48
            hdr_length = 0x144c
            checksum = 0xdc93
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x45403ff0),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xab47a2c7),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x56\x64\xb0\x7b\x29\x24',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x08\x72\x3b\xed\x5a\x9b',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0166),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x6952),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x07),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x06),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x5e),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x8d0c),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x0356),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xb3),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xf481),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xab47a2c7),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x45403ff0),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xb647),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xb0ed),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xa2e4d4a0),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x65b63f47),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x09),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x24),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xa13c),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x694e),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xc2fc),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x86f5),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x1a48),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x144c),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x56\x64\xb0\x7b\x29\x24\x08\x72\x3b\xed\x5a\x9b\x08\x00\x76\x5e\x8d\x0c\x03\x56\x00\x00\xb3\x11\xf4\x81\x45\x40\x3f\xf0\xab\x47\xa2\xc7\x86\xf5\x1a\x48\x14\x4c\xdc\x93\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test192(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x451e0e0e2678
            srcAddr = 0x63206cadff18
            etherType = 0x0800
        ipv4 =
            version = 0x8
            ihl = 0x4
            diffserv = 0xf7
            totalLen = 0x366e
            identification = 0x48f1
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0x48
            protocol = 0x11
            hdrChecksum = 0x04cd
            srcAddr = 0x4605a9a2
            dstAddr = 0x085cd4e7
        udp =
            srcPort = 0xf79a
            dstPort = 0x0613
            hdr_length = 0x8073
            checksum = 0xa164
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x451e0e0e2678
            srcAddr = 0x63206cadff18
            etherType = 0x0800
        ipv4 =
            version = 0x8
            ihl = 0x4
            diffserv = 0xf7
            totalLen = 0x366e
            identification = 0x48f1
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0x48
            protocol = 0x11
            hdrChecksum = 0x46ab
            srcAddr = 0x4605a9a2
            dstAddr = 0x085cd4e7
        udp =
            srcPort = 0xf79a
            dstPort = 0x0613
            hdr_length = 0x8073
            checksum = 0xa164
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x4605a9a2),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x085cd4e7),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x45\x1e\x0e\x0e\x26\x78',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x63\x20\x6c\xad\xff\x18',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x044d),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x82b8),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x08),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x04),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xf7),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x366e),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x48f1),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x05),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x48),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x04cd),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x085cd4e7),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x4605a9a2),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x1b53),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xd37a),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xa222f249),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xa479ffec),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x08),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x0e),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x8761),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xc80d),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xd04e),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xf79a),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x0613),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x8073),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),), 0))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x45\x1e\x0e\x0e\x26\x78\x63\x20\x6c\xad\xff\x18\x08\x00\x84\xf7\x36\x6e\x48\xf1\xa0\x00\x48\x11\x04\xcd\x46\x05\xa9\xa2\x08\x5c\xd4\xe7\xf7\x9a\x06\x13\x80\x73\xa1\x64\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x45\x1e\x0e\x0e\x26\x78\x63\x20\x6c\xad\xff\x18\x08\x00\x84\xf7\x36\x6e\x48\xf1\xa0\x00\x48\x11\x46\xab\x46\x05\xa9\xa2\x08\x5c\xd4\xe7\xf7\x9a\x06\x13\x80\x73\xa1\x64\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test193(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x1a7910d27ca2
            srcAddr = 0x3d178409667e
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0xf
            diffserv = 0x9b
            totalLen = 0x2e0a
            identification = 0x3d32
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0x62
            protocol = 0x11
            hdrChecksum = 0x6bbb
            srcAddr = 0xe32418b1
            dstAddr = 0xd10d8fbb
        udp =
            srcPort = 0x25dd
            dstPort = 0xa181
            hdr_length = 0x44aa
            checksum = 0xfb2e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xe32418b1),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xd10d8fbb),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x1a\x79\x10\xd2\x7c\xa2',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x3d\x17\x84\x09\x66\x7e',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0fca),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xd555),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0a),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0f),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x9b),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x2e0a),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x3d32),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x62),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x6bbb),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xd10d8fbb),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xe32418b1),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x8c59),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x47df),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xb2a7cb7d),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x5ba26f93),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0e),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x03),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x0f),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xf300),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x122f),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xb4fc),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x25dd),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0xa181),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x44aa),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0079),), 0))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x1a\x79\x10\xd2\x7c\xa2\x3d\x17\x84\x09\x66\x7e\x08\x00\xaf\x9b\x2e\x0a\x3d\x32\xc0\x00\x62\x11\x6b\xbb\xe3\x24\x18\xb1\xd1\x0d\x8f\xbb\x25\xdd\xa1\x81\x44\xaa\xfb\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test194(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xc9826cd2df1d
            srcAddr = 0xa158b0de7df7
            etherType = 0x0800
        ipv4 =
            version = 0x3
            ihl = 0xb
            diffserv = 0xd7
            totalLen = 0xaeb4
            identification = 0x4e4a
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0x7f
            protocol = 0x11
            hdrChecksum = 0x122c
            srcAddr = 0xd09e2ec6
            dstAddr = 0x620429d4
        udp =
            srcPort = 0xde52
            dstPort = 0x3987
            hdr_length = 0x5f45
            checksum = 0xa0ac
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xc9826cd2df1d
            srcAddr = 0xa158b0de7df7
            etherType = 0x0800
        ipv4 =
            version = 0x3
            ihl = 0xb
            diffserv = 0xd7
            totalLen = 0xaeb4
            identification = 0x4e4a
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0x7f
            protocol = 0x11
            hdrChecksum = 0xfcd9
            srcAddr = 0xd09e2ec6
            dstAddr = 0x620429d4
        udp =
            srcPort = 0xde52
            dstPort = 0x3987
            hdr_length = 0x5f45
            checksum = 0xa0ac
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xd09e2ec6),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x620429d4),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0040),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xc9\x82\x6c\xd2\xdf\x1d',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xa1\x58\xb0\xde\x7d\xf7',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x00),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0c09),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x310e),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x03),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0b),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xd7),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xaeb4),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x4e4a),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x7f),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x122c),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x620429d4),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xd09e2ec6),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x4790),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x78fd),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x3ca554a2),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x6f8bca7a),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x02),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x05),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x19),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xa1d2),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xc406),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x5a2b),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xde52),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x3987),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x5f45),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x00ea),), 0))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xc9\x82\x6c\xd2\xdf\x1d\xa1\x58\xb0\xde\x7d\xf7\x08\x00\x3b\xd7\xae\xb4\x4e\x4a\xc0\x00\x7f\x11\x12\x2c\xd0\x9e\x2e\xc6\x62\x04\x29\xd4\xde\x52\x39\x87\x5f\x45\xa0\xac\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xc9\x82\x6c\xd2\xdf\x1d\xa1\x58\xb0\xde\x7d\xf7\x08\x00\x3b\xd7\xae\xb4\x4e\x4a\xc0\x00\x7f\x11\xfc\xd9\xd0\x9e\x2e\xc6\x62\x04\x29\xd4\xde\x52\x39\x87\x5f\x45\xa0\xac\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test195(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0xcf5973b29aeb
            srcAddr = 0x224acdf00293
            etherType = 0x0800
        ipv4 =
            version = 0x1
            ihl = 0xa
            diffserv = 0xa1
            totalLen = 0xb878
            identification = 0x710b
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0x39
            protocol = 0x11
            hdrChecksum = 0xd04e
            srcAddr = 0x6b6606d8
            dstAddr = 0xccacf720
        udp =
            srcPort = 0xfbff
            dstPort = 0xcdba
            hdr_length = 0x6c39
            checksum = 0x10a5
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xed36),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x6b6606d8),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xccacf720),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01c4),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xcf\x59\x73\xb2\x9a\xeb',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x22\x4a\xcd\xf0\x02\x93',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0b3f),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x185a),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x01),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0a),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xa1),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xb878),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x710b),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x39),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xd04e),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xccacf720),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x6b6606d8),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x2c91),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x868d),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xee54ac70),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x39cbc680),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x07),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x0f),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x8713),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x2f23),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x4be1),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xfbff),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0xcdba),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x6c39),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x013f),), 0))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\xcf\x59\x73\xb2\x9a\xeb\x22\x4a\xcd\xf0\x02\x93\x08\x00\x1a\xa1\xb8\x78\x71\x0b\x00\x00\x39\x11\xd0\x4e\x6b\x66\x06\xd8\xcc\xac\xf7\x20\xfb\xff\xcd\xba\x6c\x39\x10\xa5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test196(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0xe5d8e229df75
            srcAddr = 0xdd2b9d1b453f
            etherType = 0x0800
        ipv4 =
            version = 0x7
            ihl = 0x4
            diffserv = 0x1e
            totalLen = 0xfccf
            identification = 0x84b2
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0x4c
            protocol = 0x11
            hdrChecksum = 0x7d6e
            srcAddr = 0xe86a274c
            dstAddr = 0x0192057e
        udp =
            srcPort = 0x3435
            dstPort = 0xcb21
            hdr_length = 0xefbc
            checksum = 0x5345
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 3:
        ethernet =
            dstAddr = 0xe5d8e229df75
            srcAddr = 0xdd2b9d1b453f
            etherType = 0x0800
        ipv4 =
            version = 0x7
            ihl = 0x4
            diffserv = 0x1e
            totalLen = 0xfccf
            identification = 0xf74c
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0x4c
            protocol = 0x11
            hdrChecksum = 0xb4eb
            srcAddr = 0xe86a274c
            dstAddr = 0x0192057e
        udp =
            srcPort = 0x3435
            dstPort = 0xcb21
            hdr_length = 0xefbc
            checksum = 0x5345
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xf74c),
                action_egress_port = hex_to_i16(0x0003),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xe86a274c),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x0192057e),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x011f),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xe5\xd8\xe2\x29\xdf\x75',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xdd\x2b\x9d\x1b\x45\x3f',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0fef),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x0036),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x07),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x04),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x1e),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xfccf),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x84b2),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x04),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x4c),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x7d6e),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x0192057e),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xe86a274c),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x4b90),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x31fd),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x66d00dbf),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x74d4c4c7),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0e),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x05),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x19),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xb5b3),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x9f27),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xe84f),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x3435),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0xcb21),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0xefbc),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x009b),), 0))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\xe5\xd8\xe2\x29\xdf\x75\xdd\x2b\x9d\x1b\x45\x3f\x08\x00\x74\x1e\xfc\xcf\x84\xb2\x80\x00\x4c\x11\x7d\x6e\xe8\x6a\x27\x4c\x01\x92\x05\x7e\x34\x35\xcb\x21\xef\xbc\x53\x45\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 3
        exp_pkt = b'\xe5\xd8\xe2\x29\xdf\x75\xdd\x2b\x9d\x1b\x45\x3f\x08\x00\x74\x1e\xfc\xcf\xf7\x4c\x80\x00\x4c\x11\xb4\xeb\xe8\x6a\x27\x4c\x01\x92\x05\x7e\x34\x35\xcb\x21\xef\xbc\x53\x45\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test197(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0xf23f1ae5a637
            srcAddr = 0x238e1411fb7d
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0x0
            diffserv = 0xda
            totalLen = 0x1fc0
            identification = 0xb67f
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0x11
            protocol = 0x11
            hdrChecksum = 0x3d61
            srcAddr = 0x511e6f4b
            dstAddr = 0xb0b6ea08
        udp =
            srcPort = 0x22b6
            dstPort = 0xa700
            hdr_length = 0x3345
            checksum = 0xb8f9
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xb0b6ea08),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xf2\x3f\x1a\xe5\xa6\x37',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x23\x8e\x14\x11\xfb\x7d',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0df6),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x5ea9),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0f),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x00),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xda),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x1fc0),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xb67f),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x03),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x11),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x3d61),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xb0b6ea08),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x511e6f4b),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xf493),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xa035),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x7843696e),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x47757093),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x09),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x1b),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x49c1),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xc159),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x4d9b),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x22b6),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0xa700),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x3345),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01c0),), 0))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\xf2\x3f\x1a\xe5\xa6\x37\x23\x8e\x14\x11\xfb\x7d\x08\x00\xf0\xda\x1f\xc0\xb6\x7f\x60\x00\x11\x11\x3d\x61\x51\x1e\x6f\x4b\xb0\xb6\xea\x08\x22\xb6\xa7\x00\x33\x45\xb8\xf9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test198(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x68d4757ac09b
            srcAddr = 0xd4d07e43af2c
            etherType = 0x0800
        ipv4 =
            version = 0x1
            ihl = 0x1
            diffserv = 0x40
            totalLen = 0x3187
            identification = 0x582e
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0xef
            protocol = 0x11
            hdrChecksum = 0x05ec
            srcAddr = 0x403eb764
            dstAddr = 0x0efd1fd2
        udp =
            srcPort = 0x99d6
            dstPort = 0x5c4d
            hdr_length = 0xd333
            checksum = 0xc6f2
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 9:
        ethernet =
            dstAddr = 0x68d4757ac09b
            srcAddr = 0xd4d07e43af2c
            etherType = 0x0800
        ipv4 =
            version = 0x1
            ihl = 0x1
            diffserv = 0x40
            totalLen = 0x3187
            identification = 0x582e
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0xef
            protocol = 0x11
            hdrChecksum = 0x2f86
            srcAddr = 0x403eb764
            dstAddr = 0x0efd1fd2
        udp =
            srcPort = 0x99d6
            dstPort = 0x5c4d
            hdr_length = 0xd333
            checksum = 0xc6f2
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x0efd1fd2),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0009),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x68\xd4\x75\x7a\xc0\x9b',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xd4\xd0\x7e\x43\xaf\x2c',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0973),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x8b7d),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x01),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x01),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x40),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x3187),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x582e),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xef),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x05ec),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x0efd1fd2),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x403eb764),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x6946),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x0618),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x80206f19),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xd710e60f),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0d),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x0c),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x2aa9),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x48a5),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xac74),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x99d6),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x5c4d),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0xd333),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0121),), 0))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x68\xd4\x75\x7a\xc0\x9b\xd4\xd0\x7e\x43\xaf\x2c\x08\x00\x11\x40\x31\x87\x58\x2e\x20\x00\xef\x11\x05\xec\x40\x3e\xb7\x64\x0e\xfd\x1f\xd2\x99\xd6\x5c\x4d\xd3\x33\xc6\xf2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 9
        exp_pkt = b'\x68\xd4\x75\x7a\xc0\x9b\xd4\xd0\x7e\x43\xaf\x2c\x08\x00\x11\x40\x31\x87\x58\x2e\x20\x00\xef\x11\x2f\x86\x40\x3e\xb7\x64\x0e\xfd\x1f\xd2\x99\xd6\x5c\x4d\xd3\x33\xc6\xf2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test199(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0xce6b7acaeee6
            srcAddr = 0xbc1ab7feda1d
            etherType = 0x0800
        ipv4 =
            version = 0x9
            ihl = 0xa
            diffserv = 0xd2
            totalLen = 0xf81b
            identification = 0x4c0b
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0xef
            protocol = 0x11
            hdrChecksum = 0x2605
            srcAddr = 0x71d662a2
            dstAddr = 0x24ca041f
        udp =
            srcPort = 0x6f8d
            dstPort = 0xb3e5
            hdr_length = 0x8615
            checksum = 0x728f
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xce\x6b\x7a\xca\xee\xe6',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xbc\x1a\xb7\xfe\xda\x1d',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0fcc),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x9a92),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x09),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0a),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xd2),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xf81b),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x4c0b),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xef),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x2605),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x24ca041f),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x71d662a2),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x883c),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x8ec0),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x471738c2),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x62aeaa3e),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x09),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x03),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x24),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x0270),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x1f03),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x23a4),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x6f8d),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0xb3e5),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x8615),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\xce\x6b\x7a\xca\xee\xe6\xbc\x1a\xb7\xfe\xda\x1d\x08\x00\x9a\xd2\xf8\x1b\x4c\x0b\x40\x00\xef\x11\x26\x05\x71\xd6\x62\xa2\x24\xca\x04\x1f\x6f\x8d\xb3\xe5\x86\x15\x72\x8f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test200(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xd19773796828
            srcAddr = 0x098915a47884
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0x1
            diffserv = 0x13
            totalLen = 0x7805
            identification = 0x8622
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0x2e
            protocol = 0x11
            hdrChecksum = 0x8b99
            srcAddr = 0x3f90c441
            dstAddr = 0xea307931
        udp =
            srcPort = 0xed5f
            dstPort = 0x263b
            hdr_length = 0x6cf0
            checksum = 0xf804
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 0:
        ethernet =
            dstAddr = 0xd19773796828
            srcAddr = 0x098915a47884
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0x1
            diffserv = 0x13
            totalLen = 0x7805
            identification = 0xedd4
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0x2e
            protocol = 0x11
            hdrChecksum = 0xe3cb
            srcAddr = 0x3f90c441
            dstAddr = 0xea307931
        udp =
            srcPort = 0xed5f
            dstPort = 0x263b
            hdr_length = 0x6cf0
            checksum = 0xf804
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xedd4),
                action_egress_port = hex_to_i16(0x0000),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x3f90c441),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xd1\x97\x73\x79\x68\x28',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x09\x89\x15\xa4\x78\x84',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x019a),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xe1e7),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x04),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x01),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x13),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x7805),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x8622),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x2e),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x8b99),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xea307931),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x3f90c441),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x950e),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x7e16),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xc14f7f79),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xfa9b19cf),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x3d),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x6b26),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x50a1),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xcc82),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xed5f),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x263b),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x6cf0),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xd1\x97\x73\x79\x68\x28\x09\x89\x15\xa4\x78\x84\x08\x00\x41\x13\x78\x05\x86\x22\xe0\x00\x2e\x11\x8b\x99\x3f\x90\xc4\x41\xea\x30\x79\x31\xed\x5f\x26\x3b\x6c\xf0\xf8\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 0
        exp_pkt = b'\xd1\x97\x73\x79\x68\x28\x09\x89\x15\xa4\x78\x84\x08\x00\x41\x13\x78\x05\xed\xd4\xe0\x00\x2e\x11\xe3\xcb\x3f\x90\xc4\x41\xea\x30\x79\x31\xed\x5f\x26\x3b\x6c\xf0\xf8\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test201(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x3cc1ecbcde76
            srcAddr = 0x87d93205978d
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0xa
            diffserv = 0x69
            totalLen = 0xb9d3
            identification = 0x3ed9
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0xe1
            protocol = 0x11
            hdrChecksum = 0xaac9
            srcAddr = 0x31aa8a56
            dstAddr = 0x6ddba58b
        udp =
            srcPort = 0x02b9
            dstPort = 0x772f
            hdr_length = 0xd042
            checksum = 0x1302
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x7f00),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x31aa8a56),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x3c\xc1\xec\xbc\xde\x76',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x87\xd9\x32\x05\x97\x8d',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x005a),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x2621),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x04),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0a),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x69),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xb9d3),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x3ed9),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xe1),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xaac9),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x6ddba58b),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x31aa8a56),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xf023),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xe0d8),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x85e595c0),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x582b7d80),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x05),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x05),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x00),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xed37),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xf23d),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xaaf8),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x02b9),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x772f),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0xd042),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x3c\xc1\xec\xbc\xde\x76\x87\xd9\x32\x05\x97\x8d\x08\x00\x4a\x69\xb9\xd3\x3e\xd9\x40\x00\xe1\x11\xaa\xc9\x31\xaa\x8a\x56\x6d\xdb\xa5\x8b\x02\xb9\x77\x2f\xd0\x42\x13\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test202(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x07a22b6dfcaa
            srcAddr = 0xf5ae8764b7ff
            etherType = 0x0800
        ipv4 =
            version = 0xe
            ihl = 0xb
            diffserv = 0x8e
            totalLen = 0x3050
            identification = 0x2574
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0x6c
            protocol = 0x11
            hdrChecksum = 0xb045
            srcAddr = 0xce8fda66
            dstAddr = 0x121b8b2c
        udp =
            srcPort = 0x6ede
            dstPort = 0x67a6
            hdr_length = 0x84b2
            checksum = 0x1512
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xce8fda66),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x07\xa2\x2b\x6d\xfc\xaa',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xf5\xae\x87\x64\xb7\xff',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x03aa),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xdf08),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0e),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0b),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x8e),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x3050),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x2574),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x03),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x6c),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xb045),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x121b8b2c),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xce8fda66),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x33e3),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xb614),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xb2640242),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x53511651),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x06),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x3a),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x6b3e),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xbd14),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x0173),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x6ede),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x67a6),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x84b2),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x07\xa2\x2b\x6d\xfc\xaa\xf5\xae\x87\x64\xb7\xff\x08\x00\xeb\x8e\x30\x50\x25\x74\x60\x00\x6c\x11\xb0\x45\xce\x8f\xda\x66\x12\x1b\x8b\x2c\x6e\xde\x67\xa6\x84\xb2\x15\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test203(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x1eb708077525
            srcAddr = 0x291c8c5c7cd6
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0xe
            diffserv = 0x77
            totalLen = 0x2a26
            identification = 0x6478
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0xb7
            protocol = 0x11
            hdrChecksum = 0x8ec2
            srcAddr = 0x00ae6a46
            dstAddr = 0x1a8c6c7c
        udp =
            srcPort = 0xa808
            dstPort = 0x4bc4
            hdr_length = 0x463c
            checksum = 0x696e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 0:
        ethernet =
            dstAddr = 0x1eb708077525
            srcAddr = 0x291c8c5c7cd6
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0xe
            diffserv = 0x77
            totalLen = 0x2a26
            identification = 0x6478
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0xb7
            protocol = 0x11
            hdrChecksum = 0x99db
            srcAddr = 0x00ae6a46
            dstAddr = 0x1a8c6c7c
        udp =
            srcPort = 0xa808
            dstPort = 0x4bc4
            hdr_length = 0x463c
            checksum = 0x696e
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x1a8c6c7c),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0000),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x1e\xb7\x08\x07\x75\x25',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x29\x1c\x8c\x5c\x7c\xd6',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x05e6),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x7f35),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x00),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0e),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x77),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x2a26),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x6478),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xb7),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x8ec2),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x1a8c6c7c),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x00ae6a46),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x4db2),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x7174),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x692d9622),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x3e4f8d3a),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x03),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x19),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xee2c),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x1431),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xcf79),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xa808),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x4bc4),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x463c),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x1e\xb7\x08\x07\x75\x25\x29\x1c\x8c\x5c\x7c\xd6\x08\x00\x0e\x77\x2a\x26\x64\x78\x20\x00\xb7\x11\x8e\xc2\x00\xae\x6a\x46\x1a\x8c\x6c\x7c\xa8\x08\x4b\xc4\x46\x3c\x69\x6e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 0
        exp_pkt = b'\x1e\xb7\x08\x07\x75\x25\x29\x1c\x8c\x5c\x7c\xd6\x08\x00\x0e\x77\x2a\x26\x64\x78\x20\x00\xb7\x11\x99\xdb\x00\xae\x6a\x46\x1a\x8c\x6c\x7c\xa8\x08\x4b\xc4\x46\x3c\x69\x6e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test204(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x93d2264d4b77
            srcAddr = 0x68323b4cc731
            etherType = 0x0800
        ipv4 =
            version = 0xd
            ihl = 0x6
            diffserv = 0xcc
            totalLen = 0x4ad6
            identification = 0x1126
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0x34
            protocol = 0x11
            hdrChecksum = 0x493d
            srcAddr = 0xd49d8d38
            dstAddr = 0xcd953903
        udp =
            srcPort = 0xc3ff
            dstPort = 0x6277
            hdr_length = 0xa8df
            checksum = 0xa7ad
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xcd953903),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x93\xd2\x26\x4d\x4b\x77',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x68\x32\x3b\x4c\xc7\x31',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0218),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x300f),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0d),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x06),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xcc),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x4ad6),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x1126),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x34),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x493d),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xcd953903),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xd49d8d38),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x3f7c),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x09c4),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xdc47a217),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xbe4036f4),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x09),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x26),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x0cad),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x3f70),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x7a17),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xc3ff),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x6277),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0xa8df),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x93\xd2\x26\x4d\x4b\x77\x68\x32\x3b\x4c\xc7\x31\x08\x00\xd6\xcc\x4a\xd6\x11\x26\x40\x00\x34\x11\x49\x3d\xd4\x9d\x8d\x38\xcd\x95\x39\x03\xc3\xff\x62\x77\xa8\xdf\xa7\xad\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test205(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x847d01ba2d6b
            srcAddr = 0x7d7c9f0e9fae
            etherType = 0x0800
        ipv4 =
            version = 0x3
            ihl = 0x5
            diffserv = 0x78
            totalLen = 0x6bab
            identification = 0xd438
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0x9d
            protocol = 0x11
            hdrChecksum = 0x9cf6
            srcAddr = 0xa44262b7
            dstAddr = 0xb3c1b0b0
        udp =
            srcPort = 0x19f5
            dstPort = 0x93d4
            hdr_length = 0x0b75
            checksum = 0x7f95
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xda23),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xa44262b7),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xb3c1b0b0),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0046),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x84\x7d\x01\xba\x2d\x6b',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x7d\x7c\x9f\x0e\x9f\xae',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0412),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xd502),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x03),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x05),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x78),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x6bab),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xd438),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x04),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x9d),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x9cf6),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xb3c1b0b0),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xa44262b7),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x8594),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x0ff9),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x835d4cf8),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xf6f3e2cb),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0c),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x01),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x0d),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xb35e),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xf1c4),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x71bd),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x19f5),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x93d4),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x0b75),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x84\x7d\x01\xba\x2d\x6b\x7d\x7c\x9f\x0e\x9f\xae\x08\x00\x35\x78\x6b\xab\xd4\x38\x80\x00\x9d\x11\x9c\xf6\xa4\x42\x62\xb7\xb3\xc1\xb0\xb0\x19\xf5\x93\xd4\x0b\x75\x7f\x95\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test206(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x3f9481b65604
            srcAddr = 0xfd7eeb2cc159
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0x9
            diffserv = 0xb5
            totalLen = 0x3a2a
            identification = 0x4c3f
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0x5a
            protocol = 0x11
            hdrChecksum = 0x5dc8
            srcAddr = 0x190d6140
            dstAddr = 0x956a25b6
        udp =
            srcPort = 0xec5e
            dstPort = 0x7c6c
            hdr_length = 0xe09b
            checksum = 0x306a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x3f9481b65604
            srcAddr = 0xfd7eeb2cc159
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0x9
            diffserv = 0xb5
            totalLen = 0x3a2a
            identification = 0x8620
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0x5a
            protocol = 0x11
            hdrChecksum = 0x2680
            srcAddr = 0x190d6140
            dstAddr = 0x956a25b6
        udp =
            srcPort = 0xec5e
            dstPort = 0x7c6c
            hdr_length = 0xe09b
            checksum = 0x306a
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x8620),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x190d6140),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x956a25b6),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01f1),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x3f\x94\x81\xb6\x56\x04',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xfd\x7e\xeb\x2c\xc1\x59',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0083),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xe497),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x04),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x09),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xb5),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x3a2a),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x4c3f),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x5a),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x5dc8),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x956a25b6),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x190d6140),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xa1df),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xd143),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xd7deb8a2),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xe64007b2),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x01),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x0c),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x774a),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xbe61),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xc672),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xec5e),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x7c6c),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0xe09b),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x3f\x94\x81\xb6\x56\x04\xfd\x7e\xeb\x2c\xc1\x59\x08\x00\x49\xb5\x3a\x2a\x4c\x3f\x40\x00\x5a\x11\x5d\xc8\x19\x0d\x61\x40\x95\x6a\x25\xb6\xec\x5e\x7c\x6c\xe0\x9b\x30\x6a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x3f\x94\x81\xb6\x56\x04\xfd\x7e\xeb\x2c\xc1\x59\x08\x00\x49\xb5\x3a\x2a\x86\x20\x40\x00\x5a\x11\x26\x80\x19\x0d\x61\x40\x95\x6a\x25\xb6\xec\x5e\x7c\x6c\xe0\x9b\x30\x6a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test207(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x877a9f6f6e93
            srcAddr = 0xc6c22924fb1a
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x3
            diffserv = 0xe9
            totalLen = 0xc43b
            identification = 0xa50e
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0x1d
            protocol = 0x11
            hdrChecksum = 0x89a9
            srcAddr = 0x6dc3154b
            dstAddr = 0x7cf9a5f5
        udp =
            srcPort = 0x5837
            dstPort = 0x3bca
            hdr_length = 0x6309
            checksum = 0x1ed5
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 11:
        ethernet =
            dstAddr = 0x877a9f6f6e93
            srcAddr = 0xc6c22924fb1a
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x3
            diffserv = 0xe9
            totalLen = 0xc43b
            identification = 0xa50e
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0x1d
            protocol = 0x11
            hdrChecksum = 0xafbc
            srcAddr = 0x6dc3154b
            dstAddr = 0x7cf9a5f5
        udp =
            srcPort = 0x5837
            dstPort = 0x3bca
            hdr_length = 0x6309
            checksum = 0x1ed5
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x6dc3154b),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x7cf9a5f5),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x000b),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x87\x7a\x9f\x6f\x6e\x93',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xc6\xc2\x29\x24\xfb\x1a',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x05),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0479),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xd5f3),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0a),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x03),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xe9),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xc43b),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xa50e),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x04),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x1d),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x89a9),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x7cf9a5f5),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x6dc3154b),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x073f),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xf916),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x5892d9c6),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xd2aeb28b),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0e),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x00),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x3650),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xa069),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xa568),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x5837),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x3bca),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x6309),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x87\x7a\x9f\x6f\x6e\x93\xc6\xc2\x29\x24\xfb\x1a\x08\x00\xa3\xe9\xc4\x3b\xa5\x0e\x80\x00\x1d\x11\x89\xa9\x6d\xc3\x15\x4b\x7c\xf9\xa5\xf5\x58\x37\x3b\xca\x63\x09\x1e\xd5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 11
        exp_pkt = b'\x87\x7a\x9f\x6f\x6e\x93\xc6\xc2\x29\x24\xfb\x1a\x08\x00\xa3\xe9\xc4\x3b\xa5\x0e\x80\x00\x1d\x11\xaf\xbc\x6d\xc3\x15\x4b\x7c\xf9\xa5\xf5\x58\x37\x3b\xca\x63\x09\x1e\xd5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test208(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x8689dd2e7d3e
            srcAddr = 0x406707b78249
            etherType = 0x0800
        ipv4 =
            version = 0x1
            ihl = 0xa
            diffserv = 0x26
            totalLen = 0x6a29
            identification = 0x2227
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0x41
            protocol = 0x11
            hdrChecksum = 0x1a0c
            srcAddr = 0xd8417efc
            dstAddr = 0x5a056b90
        udp =
            srcPort = 0x2dec
            dstPort = 0x160e
            hdr_length = 0xc97c
            checksum = 0xa7be
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xd8417efc),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x5a056b90),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x86\x89\xdd\x2e\x7d\x3e',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x40\x67\x07\xb7\x82\x49',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x00),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x04e3),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x60bb),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x01),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0a),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x26),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x6a29),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x2227),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x41),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x1a0c),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x5a056b90),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xd8417efc),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x534b),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x71e9),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x96b31106),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x274bc6da),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x05),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x31),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xbd98),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xd105),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x4e1f),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x2dec),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x160e),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0xc97c),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x86\x89\xdd\x2e\x7d\x3e\x40\x67\x07\xb7\x82\x49\x08\x00\x1a\x26\x6a\x29\x22\x27\x00\x00\x41\x11\x1a\x0c\xd8\x41\x7e\xfc\x5a\x05\x6b\x90\x2d\xec\x16\x0e\xc9\x7c\xa7\xbe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test209(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x5f350221623e
            srcAddr = 0x81d71ce9fdf8
            etherType = 0x0800
        ipv4 =
            version = 0xd
            ihl = 0xc
            diffserv = 0x56
            totalLen = 0x890d
            identification = 0xf496
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0x42
            protocol = 0x11
            hdrChecksum = 0xfb37
            srcAddr = 0x4e13510b
            dstAddr = 0xac5430fc
        udp =
            srcPort = 0xe5c0
            dstPort = 0xaf91
            hdr_length = 0x71c9
            checksum = 0xde72
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xac5430fc),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x5f\x35\x02\x21\x62\x3e',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x81\xd7\x1c\xe9\xfd\xf8',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0390),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x7a56),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0d),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0c),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x56),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x890d),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xf496),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x42),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xfb37),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xac5430fc),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x4e13510b),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x58b2),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xac5f),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x2f22d054),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x3112b45b),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0e),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x3a),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x4e32),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xdd63),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xe627),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xe5c0),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0xaf91),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x71c9),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x5f\x35\x02\x21\x62\x3e\x81\xd7\x1c\xe9\xfd\xf8\x08\x00\xdc\x56\x89\x0d\xf4\x96\xe0\x00\x42\x11\xfb\x37\x4e\x13\x51\x0b\xac\x54\x30\xfc\xe5\xc0\xaf\x91\x71\xc9\xde\x72\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test210(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x5f350221623e
            srcAddr = 0x81d71ce9fdf8
            etherType = 0x0800
        ipv4 =
            version = 0xd
            ihl = 0xc
            diffserv = 0x56
            totalLen = 0x890d
            identification = 0xf496
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0x42
            protocol = 0x11
            hdrChecksum = 0xfb37
            srcAddr = 0x4e13510b
            dstAddr = 0xac5430fc
        udp =
            srcPort = 0xe5c0
            dstPort = 0xaf91
            hdr_length = 0x71c9
            checksum = 0xde72
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x4e13510b),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xac5430fc),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x5f\x35\x02\x21\x62\x3e',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x81\xd7\x1c\xe9\xfd\xf8',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0390),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x7a56),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0d),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0c),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x56),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x890d),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xf496),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x42),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xfb37),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xac5430fc),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x4e13510b),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x58b2),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xac5f),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x2f22d054),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x3112b45b),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0e),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x3a),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x4e32),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xdd63),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xe627),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xe5c0),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0xaf91),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x71c9),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x5f\x35\x02\x21\x62\x3e\x81\xd7\x1c\xe9\xfd\xf8\x08\x00\xdc\x56\x89\x0d\xf4\x96\xe0\x00\x42\x11\xfb\x37\x4e\x13\x51\x0b\xac\x54\x30\xfc\xe5\xc0\xaf\x91\x71\xc9\xde\x72\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test211(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x83697473874e
            srcAddr = 0x4a5528066875
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0xd
            diffserv = 0x05
            totalLen = 0x500d
            identification = 0x4b0e
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0x67
            protocol = 0x11
            hdrChecksum = 0x2663
            srcAddr = 0xd430aa7b
            dstAddr = 0xb8e9c588
        udp =
            srcPort = 0x4e6c
            dstPort = 0xc194
            hdr_length = 0xe076
            checksum = 0xdaf3
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x7ab0),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xd430aa7b),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xb8e9c588),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x83\x69\x74\x73\x87\x4e',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x4a\x55\x28\x06\x68\x75',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0d53),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xecfa),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x04),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0d),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x05),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x500d),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x4b0e),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x67),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x2663),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xb8e9c588),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xd430aa7b),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xa632),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x4e81),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xbbc2d91f),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x76a89165),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x02),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x2e),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xacd5),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xaca2),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x6582),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x4e6c),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0xc194),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0xe076),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x83\x69\x74\x73\x87\x4e\x4a\x55\x28\x06\x68\x75\x08\x00\x4d\x05\x50\x0d\x4b\x0e\x20\x00\x67\x11\x26\x63\xd4\x30\xaa\x7b\xb8\xe9\xc5\x88\x4e\x6c\xc1\x94\xe0\x76\xda\xf3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test212(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0xf7c7153125ec
            srcAddr = 0x84282991da5b
            etherType = 0x0800
        ipv4 =
            version = 0x3
            ihl = 0x7
            diffserv = 0x93
            totalLen = 0x948b
            identification = 0x2b80
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0x1f
            protocol = 0x11
            hdrChecksum = 0x3166
            srcAddr = 0x4d7614ce
            dstAddr = 0x7e0d0e52
        udp =
            srcPort = 0xcc2a
            dstPort = 0x7dd8
            hdr_length = 0x65d4
            checksum = 0x6ef4
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_udp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xf7c7153125ec
            srcAddr = 0x84282991da5b
            etherType = 0x0800
        ipv4 =
            version = 0x3
            ihl = 0x7
            diffserv = 0x93
            totalLen = 0x948b
            identification = 0xa2e8
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0x1f
            protocol = 0x11
            hdrChecksum = 0x4343
            srcAddr = 0x4d7614ce
            dstAddr = 0x7e0d0e52
        udp =
            srcPort = 0xcc2a
            dstPort = 0x7dd8
            hdr_length = 0x65d4
            checksum = 0x6ef4
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xa2e8),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x4d7614ce),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x7e0d0e52),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xf7\xc7\x15\x31\x25\xec',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x84\x28\x29\x91\xda\x5b',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x09ca),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x342f),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x03),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x07),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x93),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x948b),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x2b80),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x1f),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x11),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x3166),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x7e0d0e52),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x4d7614ce),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xfb76),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xed65),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x2542f0fe),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x859a8077),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x07),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x03),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x3c),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xd8f1),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xd31b),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x57bc),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xcc2a),
            udp_srcPort_mask = hex_to_i16(0xffff),
            udp_dstPort = hex_to_i16(0x7dd8),
            udp_dstPort_mask = hex_to_i16(0xffff),
            udp_hdr_length = hex_to_i16(0x65d4),
            udp_hdr_length_mask = hex_to_i16(0xffff),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\xf7\xc7\x15\x31\x25\xec\x84\x28\x29\x91\xda\x5b\x08\x00\x37\x93\x94\x8b\x2b\x80\x40\x00\x1f\x11\x31\x66\x4d\x76\x14\xce\x7e\x0d\x0e\x52\xcc\x2a\x7d\xd8\x65\xd4\x6e\xf4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xf7\xc7\x15\x31\x25\xec\x84\x28\x29\x91\xda\x5b\x08\x00\x37\x93\x94\x8b\xa2\xe8\x40\x00\x1f\x11\x43\x43\x4d\x76\x14\xce\x7e\x0d\x0e\x52\xcc\x2a\x7d\xd8\x65\xd4\x6e\xf4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test213(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xb701b1da1093
            srcAddr = 0xa943b13b16ba
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0xb
            diffserv = 0x95
            totalLen = 0x050a
            identification = 0xbd1e
            flags = 0b010
            fragOffset = 0b0101000000000
            ttl = 0x8b
            protocol = 0xe6
            hdrChecksum = 0x6d4e
            srcAddr = 0x750ffddf
            dstAddr = 0xc16ef033
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 7:
        ethernet =
            dstAddr = 0xb701b1da1093
            srcAddr = 0xa943b13b16ba
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0xb
            diffserv = 0x95
            totalLen = 0x050a
            identification = 0xc5e0
            flags = 0b010
            fragOffset = 0b0101000000000
            ttl = 0x8b
            protocol = 0xe6
            hdrChecksum = 0x2f07
            srcAddr = 0x750ffddf
            dstAddr = 0xc16ef033
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xc5e0),
                action_egress_port = hex_to_i16(0x0007),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x750ffddf),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xb7\x01\xb1\xda\x10\x93\xa9\x43\xb1\x3b\x16\xba\x08\x00\x0b\x95\x05\x0a\xbd\x1e\x4a\x00\x8b\xe6\x6d\x4e\x75\x0f\xfd\xdf\xc1\x6e\xf0\x33\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 7
        exp_pkt = b'\xb7\x01\xb1\xda\x10\x93\xa9\x43\xb1\x3b\x16\xba\x08\x00\x0b\x95\x05\x0a\xc5\xe0\x4a\x00\x8b\xe6\x2f\x07\x75\x0f\xfd\xdf\xc1\x6e\xf0\x33\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test214(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x1c3951a75455
            srcAddr = 0x0acf353580c4
            etherType = 0x0800
        ipv4 =
            version = 0xe
            ihl = 0xc
            diffserv = 0x36
            totalLen = 0x1812
            identification = 0xb975
            flags = 0b001
            fragOffset = 0b1000111011110
            ttl = 0x99
            protocol = 0xf3
            hdrChecksum = 0x74a4
            srcAddr = 0xa63bb43c
            dstAddr = 0x1baeba1f
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xa0da),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xa63bb43c),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x1c\x39\x51\xa7\x54\x55\x0a\xcf\x35\x35\x80\xc4\x08\x00\xec\x36\x18\x12\xb9\x75\x31\xde\x99\xf3\x74\xa4\xa6\x3b\xb4\x3c\x1b\xae\xba\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test215(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0xaf7dbbc6d0e7
            srcAddr = 0xac99bea87ab1
            etherType = 0x0800
        ipv4 =
            version = 0x7
            ihl = 0x5
            diffserv = 0xc1
            totalLen = 0xe567
            identification = 0x0ca3
            flags = 0b000
            fragOffset = 0b1010001011000
            ttl = 0x3e
            protocol = 0x3a
            hdrChecksum = 0x30d1
            srcAddr = 0x4ffe2b52
            dstAddr = 0x58111ded
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x4ffe2b52),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\xaf\x7d\xbb\xc6\xd0\xe7\xac\x99\xbe\xa8\x7a\xb1\x08\x00\x75\xc1\xe5\x67\x0c\xa3\x14\x58\x3e\x3a\x30\xd1\x4f\xfe\x2b\x52\x58\x11\x1d\xed\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test216(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x77958fe89264
            srcAddr = 0xb5297e302d84
            etherType = 0x0800
        ipv4 =
            version = 0x8
            ihl = 0x8
            diffserv = 0x7c
            totalLen = 0x6bc7
            identification = 0x037c
            flags = 0b100
            fragOffset = 0b0000001000100
            ttl = 0xc2
            protocol = 0xc7
            hdrChecksum = 0x9c50
            srcAddr = 0xc54fbd38
            dstAddr = 0x97243b24
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        pass
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x77\x95\x8f\xe8\x92\x64\xb5\x29\x7e\x30\x2d\x84\x08\x00\x88\x7c\x6b\xc7\x03\x7c\x80\x44\xc2\xc7\x9c\x50\xc5\x4f\xbd\x38\x97\x24\x3b\x24\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test217(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x49527c880d22
            srcAddr = 0x7edf9c3d34df
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0x8
            diffserv = 0x8e
            totalLen = 0xec89
            identification = 0x3c0c
            flags = 0b100
            fragOffset = 0b0110000111010
            ttl = 0xd4
            protocol = 0x41
            hdrChecksum = 0xbece
            srcAddr = 0xde67a5de
            dstAddr = 0xd8be7eba
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x2e35),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xde67a5de),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xd8be7eba),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x49\x52\x7c\x88\x0d\x22\x7e\xdf\x9c\x3d\x34\xdf\x08\x00\x48\x8e\xec\x89\x3c\x0c\x8c\x3a\xd4\x41\xbe\xce\xde\x67\xa5\xde\xd8\xbe\x7e\xba\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test218(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0xbe622aea0414
            srcAddr = 0xf8b316334a8d
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0xe
            diffserv = 0x42
            totalLen = 0x0ade
            identification = 0xab1e
            flags = 0b100
            fragOffset = 0b1001101000010
            ttl = 0xcd
            protocol = 0xa7
            hdrChecksum = 0x540a
            srcAddr = 0x753976eb
            dstAddr = 0x5bb3490b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 11:
        ethernet =
            dstAddr = 0xbe622aea0414
            srcAddr = 0xf8b316334a8d
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0xe
            diffserv = 0x42
            totalLen = 0x0ade
            identification = 0x9372
            flags = 0b100
            fragOffset = 0b1001101000010
            ttl = 0xcd
            protocol = 0xa7
            hdrChecksum = 0x019f
            srcAddr = 0x753976eb
            dstAddr = 0x5bb3490b
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x9372),
                action_egress_port = hex_to_i16(0x000b),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x753976eb),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x5bb3490b),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\xbe\x62\x2a\xea\x04\x14\xf8\xb3\x16\x33\x4a\x8d\x08\x00\x6e\x42\x0a\xde\xab\x1e\x93\x42\xcd\xa7\x54\x0a\x75\x39\x76\xeb\x5b\xb3\x49\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 11
        exp_pkt = b'\xbe\x62\x2a\xea\x04\x14\xf8\xb3\x16\x33\x4a\x8d\x08\x00\x6e\x42\x0a\xde\x93\x72\x93\x42\xcd\xa7\x01\x9f\x75\x39\x76\xeb\x5b\xb3\x49\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test219(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0x65a1ccc30b73
            srcAddr = 0xab7d797e4601
            etherType = 0x0800
        ipv4 =
            version = 0xb
            ihl = 0xb
            diffserv = 0xde
            totalLen = 0x5fb7
            identification = 0xd546
            flags = 0b100
            fragOffset = 0b0111011110000
            ttl = 0x92
            protocol = 0x6e
            hdrChecksum = 0xb178
            srcAddr = 0x50b546d7
            dstAddr = 0xf2a62c16
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x50b546d7),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xf2a62c16),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\x65\xa1\xcc\xc3\x0b\x73\xab\x7d\x79\x7e\x46\x01\x08\x00\xbb\xde\x5f\xb7\xd5\x46\x8e\xf0\x92\x6e\xb1\x78\x50\xb5\x46\xd7\xf2\xa6\x2c\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test220(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0xdb1bc6f8ef2c
            srcAddr = 0xb5d9aac34f7f
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0x3
            diffserv = 0xe0
            totalLen = 0x141e
            identification = 0x2602
            flags = 0b010
            fragOffset = 0b0000000111010
            ttl = 0x87
            protocol = 0x02
            hdrChecksum = 0x4508
            srcAddr = 0x4affbfa6
            dstAddr = 0xc935b724
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xc935b724),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\xdb\x1b\xc6\xf8\xef\x2c\xb5\xd9\xaa\xc3\x4f\x7f\x08\x00\xf3\xe0\x14\x1e\x26\x02\x40\x3a\x87\x02\x45\x08\x4a\xff\xbf\xa6\xc9\x35\xb7\x24\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test221(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x7386b05326c7
            srcAddr = 0x443057830246
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x8
            diffserv = 0x0e
            totalLen = 0x9464
            identification = 0xd335
            flags = 0b010
            fragOffset = 0b1101110110001
            ttl = 0x5d
            protocol = 0xd5
            hdrChecksum = 0x7678
            srcAddr = 0x1bb40583
            dstAddr = 0x92e055c6
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 13:
        ethernet =
            dstAddr = 0x7386b05326c7
            srcAddr = 0x443057830246
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x8
            diffserv = 0x0e
            totalLen = 0x9464
            identification = 0xd335
            flags = 0b010
            fragOffset = 0b1101110110001
            ttl = 0x5d
            protocol = 0xd5
            hdrChecksum = 0x2cf2
            srcAddr = 0x1bb40583
            dstAddr = 0x92e055c6
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x1bb40583),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x92e055c6),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x000d),)))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x73\x86\xb0\x53\x26\xc7\x44\x30\x57\x83\x02\x46\x08\x00\xa8\x0e\x94\x64\xd3\x35\x5b\xb1\x5d\xd5\x76\x78\x1b\xb4\x05\x83\x92\xe0\x55\xc6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 13
        exp_pkt = b'\x73\x86\xb0\x53\x26\xc7\x44\x30\x57\x83\x02\x46\x08\x00\xa8\x0e\x94\x64\xd3\x35\x5b\xb1\x5d\xd5\x2c\xf2\x1b\xb4\x05\x83\x92\xe0\x55\xc6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test222(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x106c88a20554
            srcAddr = 0x3220c48d8716
            etherType = 0x0800
        ipv4 =
            version = 0x8
            ihl = 0xe
            diffserv = 0x73
            totalLen = 0xef71
            identification = 0xa368
            flags = 0b111
            fragOffset = 0b1110100110000
            ttl = 0xf1
            protocol = 0x18
            hdrChecksum = 0xaa8e
            srcAddr = 0x89de9c11
            dstAddr = 0xce4d48b0
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x89de9c11),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xce4d48b0),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01ff),)))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x10\x6c\x88\xa2\x05\x54\x32\x20\xc4\x8d\x87\x16\x08\x00\x8e\x73\xef\x71\xa3\x68\xfd\x30\xf1\x18\xaa\x8e\x89\xde\x9c\x11\xce\x4d\x48\xb0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test223(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0xda06da908b3a
            srcAddr = 0x11f796c10ba8
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0xb
            diffserv = 0xec
            totalLen = 0x454d
            identification = 0x2afc
            flags = 0b010
            fragOffset = 0b0111101001111
            ttl = 0x24
            protocol = 0xe9
            hdrChecksum = 0x1571
            srcAddr = 0x60041a34
            dstAddr = 0xf3b0dcbe
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x98ff),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x60041a34),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xf3b0dcbe),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0101),)))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\xda\x06\xda\x90\x8b\x3a\x11\xf7\x96\xc1\x0b\xa8\x08\x00\xfb\xec\x45\x4d\x2a\xfc\x4f\x4f\x24\xe9\x15\x71\x60\x04\x1a\x34\xf3\xb0\xdc\xbe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test224(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0xb78f9608e950
            srcAddr = 0xfe677c78fe6a
            etherType = 0x0800
        ipv4 =
            version = 0x1
            ihl = 0x9
            diffserv = 0xa8
            totalLen = 0x8a41
            identification = 0xd6d9
            flags = 0b010
            fragOffset = 0b1011011101101
            ttl = 0xdc
            protocol = 0x11
            hdrChecksum = 0x958a
            srcAddr = 0x11327be3
            dstAddr = 0x4ab821ae
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 13:
        ethernet =
            dstAddr = 0xb78f9608e950
            srcAddr = 0xfe677c78fe6a
            etherType = 0x0800
        ipv4 =
            version = 0x1
            ihl = 0x9
            diffserv = 0xa8
            totalLen = 0x8a41
            identification = 0x3dec
            flags = 0b010
            fragOffset = 0b1011011101101
            ttl = 0xdc
            protocol = 0x11
            hdrChecksum = 0xf1ae
            srcAddr = 0x11327be3
            dstAddr = 0x4ab821ae
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x3dec),
                action_egress_port = hex_to_i16(0x000d),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x11327be3),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x4ab821ae),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0033),)))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\xb7\x8f\x96\x08\xe9\x50\xfe\x67\x7c\x78\xfe\x6a\x08\x00\x19\xa8\x8a\x41\xd6\xd9\x56\xed\xdc\x11\x95\x8a\x11\x32\x7b\xe3\x4a\xb8\x21\xae\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 13
        exp_pkt = b'\xb7\x8f\x96\x08\xe9\x50\xfe\x67\x7c\x78\xfe\x6a\x08\x00\x19\xa8\x8a\x41\x3d\xec\x56\xed\xdc\x11\xf1\xae\x11\x32\x7b\xe3\x4a\xb8\x21\xae\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test225(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0xde826f2e0f21
            srcAddr = 0x5a85fd3689fb
            etherType = 0x0800
        ipv4 =
            version = 0x9
            ihl = 0x0
            diffserv = 0xef
            totalLen = 0xff21
            identification = 0xbccf
            flags = 0b011
            fragOffset = 0b0110000111101
            ttl = 0x97
            protocol = 0xf7
            hdrChecksum = 0x18d9
            srcAddr = 0xd65f9dd3
            dstAddr = 0x3ef2c497
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x3ef2c497),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01ff),)))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\xde\x82\x6f\x2e\x0f\x21\x5a\x85\xfd\x36\x89\xfb\x08\x00\x90\xef\xff\x21\xbc\xcf\x6c\x3d\x97\xf7\x18\xd9\xd6\x5f\x9d\xd3\x3e\xf2\xc4\x97\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test226(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x711bd20c9e83
            srcAddr = 0x90a4a22c469c
            etherType = 0x0800
        ipv4 =
            version = 0xe
            ihl = 0x0
            diffserv = 0x71
            totalLen = 0xc4bc
            identification = 0x513b
            flags = 0b000
            fragOffset = 0b1111010110100
            ttl = 0x2d
            protocol = 0xa4
            hdrChecksum = 0x8670
            srcAddr = 0xede89c38
            dstAddr = 0xa2a4f0f3
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x711bd20c9e83
            srcAddr = 0x90a4a22c469c
            etherType = 0x0800
        ipv4 =
            version = 0xe
            ihl = 0x0
            diffserv = 0x71
            totalLen = 0xc4bc
            identification = 0x513b
            flags = 0b000
            fragOffset = 0b1111010110100
            ttl = 0x2d
            protocol = 0xa4
            hdrChecksum = 0x9f83
            srcAddr = 0xede89c38
            dstAddr = 0xa2a4f0f3
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xa2a4f0f3),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0040),)))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x71\x1b\xd2\x0c\x9e\x83\x90\xa4\xa2\x2c\x46\x9c\x08\x00\xe0\x71\xc4\xbc\x51\x3b\x1e\xb4\x2d\xa4\x86\x70\xed\xe8\x9c\x38\xa2\xa4\xf0\xf3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x71\x1b\xd2\x0c\x9e\x83\x90\xa4\xa2\x2c\x46\x9c\x08\x00\xe0\x71\xc4\xbc\x51\x3b\x1e\xb4\x2d\xa4\x9f\x83\xed\xe8\x9c\x38\xa2\xa4\xf0\xf3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test227(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xf9de1fbd0e16
            srcAddr = 0xe085aa650d73
            etherType = 0x0800
        ipv4 =
            version = 0x5
            ihl = 0xc
            diffserv = 0x84
            totalLen = 0x6b32
            identification = 0xd08e
            flags = 0b010
            fragOffset = 0b1100001100111
            ttl = 0x19
            protocol = 0x5b
            hdrChecksum = 0x653f
            srcAddr = 0x2ef6fa32
            dstAddr = 0x8155d0ec
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x2ef6fa32),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x8155d0ec),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xf9\xde\x1f\xbd\x0e\x16',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xe0\x85\xaa\x65\x0d\x73',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x03f0),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x77f1),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x05),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0c),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x84),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x6b32),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xd08e),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x1867),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x19),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x5b),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x653f),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x8155d0ec),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x2ef6fa32),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xd00e),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xca4b),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xeb66ffdf),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xa26243d6),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x00),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x05),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x3e),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x7242),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x6eaa),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xaf57),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x9e4b),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x4ffd),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xb970),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01d0),), 0))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xf9\xde\x1f\xbd\x0e\x16\xe0\x85\xaa\x65\x0d\x73\x08\x00\x5c\x84\x6b\x32\xd0\x8e\x58\x67\x19\x5b\x65\x3f\x2e\xf6\xfa\x32\x81\x55\xd0\xec\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test228(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x749296785367
            srcAddr = 0xb8f36f7ec2a6
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x2
            diffserv = 0xa6
            totalLen = 0xabd0
            identification = 0xbf99
            flags = 0b110
            fragOffset = 0b0011110110000
            ttl = 0x0a
            protocol = 0x81
            hdrChecksum = 0xd3c5
            srcAddr = 0x42c690ea
            dstAddr = 0x596c7465
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 4:
        ethernet =
            dstAddr = 0x749296785367
            srcAddr = 0xb8f36f7ec2a6
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x2
            diffserv = 0xa6
            totalLen = 0xabd0
            identification = 0xbf99
            flags = 0b110
            fragOffset = 0b0011110110000
            ttl = 0x0a
            protocol = 0x81
            hdrChecksum = 0x7e3a
            srcAddr = 0x42c690ea
            dstAddr = 0x596c7465
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x42c690ea),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x596c7465),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0004),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x74\x92\x96\x78\x53\x67',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xb8\xf3\x6f\x7e\xc2\xa6',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x026e),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x7428),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0a),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x02),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xa6),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xabd0),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xbf99),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x07b0),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x0a),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x81),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xd3c5),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x596c7465),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x42c690ea),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x51eb),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x545f),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x29076f13),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xdd622a8b),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x09),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x37),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xb6e3),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x8068),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xeab6),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x0c37),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x9f26),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x7aec),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0184),), 0))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x74\x92\x96\x78\x53\x67\xb8\xf3\x6f\x7e\xc2\xa6\x08\x00\xa2\xa6\xab\xd0\xbf\x99\xc7\xb0\x0a\x81\xd3\xc5\x42\xc6\x90\xea\x59\x6c\x74\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 4
        exp_pkt = b'\x74\x92\x96\x78\x53\x67\xb8\xf3\x6f\x7e\xc2\xa6\x08\x00\xa2\xa6\xab\xd0\xbf\x99\xc7\xb0\x0a\x81\x7e\x3a\x42\xc6\x90\xea\x59\x6c\x74\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test229(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0xc99f4dcc25d0
            srcAddr = 0xf5c8d71198e4
            etherType = 0x0800
        ipv4 =
            version = 0x3
            ihl = 0x2
            diffserv = 0xe6
            totalLen = 0xaf47
            identification = 0xac71
            flags = 0b010
            fragOffset = 0b0000100111011
            ttl = 0xf6
            protocol = 0xb9
            hdrChecksum = 0xaeeb
            srcAddr = 0x0fecc6af
            dstAddr = 0x7c8a2339
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x9f12),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x0fecc6af),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x7c8a2339),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0176),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xc9\x9f\x4d\xcc\x25\xd0',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xf5\xc8\xd7\x11\x98\xe4',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x08aa),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x1013),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x03),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x02),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xe6),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xaf47),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xac71),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x013b),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xf6),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xb9),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xaeeb),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x7c8a2339),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x0fecc6af),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x6c4c),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xbbb8),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xf6c9040c),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x0fafa894),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0d),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x1b),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x654b),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x76b2),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xcb9d),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x136a),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x8db4),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xdf88),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x00f6),), 0))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\xc9\x9f\x4d\xcc\x25\xd0\xf5\xc8\xd7\x11\x98\xe4\x08\x00\x32\xe6\xaf\x47\xac\x71\x41\x3b\xf6\xb9\xae\xeb\x0f\xec\xc6\xaf\x7c\x8a\x23\x39\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test230(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x1f9fe7eee973
            srcAddr = 0xda97dd0f6a78
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0xa
            diffserv = 0x4d
            totalLen = 0xf322
            identification = 0x06a4
            flags = 0b000
            fragOffset = 0b1101110110101
            ttl = 0x48
            protocol = 0xb7
            hdrChecksum = 0xf2e1
            srcAddr = 0x0540caac
            dstAddr = 0xcc874b22
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 8:
        ethernet =
            dstAddr = 0x1f9fe7eee973
            srcAddr = 0xda97dd0f6a78
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0xa
            diffserv = 0x4d
            totalLen = 0xf322
            identification = 0x5d49
            flags = 0b000
            fragOffset = 0b1101110110101
            ttl = 0x48
            protocol = 0xb7
            hdrChecksum = 0x6942
            srcAddr = 0x0540caac
            dstAddr = 0xcc874b22
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x5d49),
                action_egress_port = hex_to_i16(0x0008),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x0540caac),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xcc874b22),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x00bd),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x1f\x9f\xe7\xee\xe9\x73',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xda\x97\xdd\x0f\x6a\x78',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0527),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x2425),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0f),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0a),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x4d),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xf322),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x06a4),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x1bb5),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x48),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xb7),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xf2e1),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xcc874b22),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x0540caac),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x8c23),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x3f24),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xd08805e3),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xb40b4916),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0c),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x25),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xe9d3),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x3162),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x4320),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xea4d),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xc3e9),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xe8d3),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x006a),), 0))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x1f\x9f\xe7\xee\xe9\x73\xda\x97\xdd\x0f\x6a\x78\x08\x00\xfa\x4d\xf3\x22\x06\xa4\x1b\xb5\x48\xb7\xf2\xe1\x05\x40\xca\xac\xcc\x87\x4b\x22\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 8
        exp_pkt = b'\x1f\x9f\xe7\xee\xe9\x73\xda\x97\xdd\x0f\x6a\x78\x08\x00\xfa\x4d\xf3\x22\x5d\x49\x1b\xb5\x48\xb7\x69\x42\x05\x40\xca\xac\xcc\x87\x4b\x22\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test231(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x5eec3b06c9a5
            srcAddr = 0x63cc3d871284
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0xe
            diffserv = 0x31
            totalLen = 0x6697
            identification = 0x94c7
            flags = 0b001
            fragOffset = 0b0111110001111
            ttl = 0x25
            protocol = 0x32
            hdrChecksum = 0x4a08
            srcAddr = 0xbae7df18
            dstAddr = 0x7540d2ac
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x7540d2ac),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x5e\xec\x3b\x06\xc9\xa5',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x63\xcc\x3d\x87\x12\x84',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x00),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0e4d),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x7ae6),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0a),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0e),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x31),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x6697),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x94c7),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0f8f),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x25),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x32),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x4a08),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x7540d2ac),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xbae7df18),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x7894),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xea4f),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xef15ad27),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x6559e768),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x09),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x05),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x03),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x33),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x8d79),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x1a69),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x682c),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xe692),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x6191),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xd749),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x00e1),), 0))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x5e\xec\x3b\x06\xc9\xa5\x63\xcc\x3d\x87\x12\x84\x08\x00\xae\x31\x66\x97\x94\xc7\x2f\x8f\x25\x32\x4a\x08\xba\xe7\xdf\x18\x75\x40\xd2\xac\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test232(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x6315421e3a0d
            srcAddr = 0xeab29babcb51
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x7
            diffserv = 0xc3
            totalLen = 0x5384
            identification = 0x8838
            flags = 0b110
            fragOffset = 0b0001010101010
            ttl = 0x9d
            protocol = 0x49
            hdrChecksum = 0x9e23
            srcAddr = 0xeee1cc67
            dstAddr = 0xbd01b26d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 11:
        ethernet =
            dstAddr = 0x6315421e3a0d
            srcAddr = 0xeab29babcb51
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x7
            diffserv = 0xc3
            totalLen = 0x5384
            identification = 0x8838
            flags = 0b110
            fragOffset = 0b0001010101010
            ttl = 0x9d
            protocol = 0x49
            hdrChecksum = 0xf1d1
            srcAddr = 0xeee1cc67
            dstAddr = 0xbd01b26d
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xbd01b26d),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x000b),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x63\x15\x42\x1e\x3a\x0d',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xea\xb2\x9b\xab\xcb\x51',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x003b),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xaa54),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0a),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x07),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xc3),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x5384),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x8838),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x02aa),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x9d),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x49),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x9e23),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xbd01b26d),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xeee1cc67),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xef5f),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x8222),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x38751e24),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xd5e49ec5),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x09),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x3f),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x2a21),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xd7e7),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xb3c0),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xa3f8),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xa200),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x8db2),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x014d),), 0))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x63\x15\x42\x1e\x3a\x0d\xea\xb2\x9b\xab\xcb\x51\x08\x00\xa7\xc3\x53\x84\x88\x38\xc2\xaa\x9d\x49\x9e\x23\xee\xe1\xcc\x67\xbd\x01\xb2\x6d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 11
        exp_pkt = b'\x63\x15\x42\x1e\x3a\x0d\xea\xb2\x9b\xab\xcb\x51\x08\x00\xa7\xc3\x53\x84\x88\x38\xc2\xaa\x9d\x49\xf1\xd1\xee\xe1\xcc\x67\xbd\x01\xb2\x6d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test233(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0xd3c95851594c
            srcAddr = 0x18f99bdbeefe
            etherType = 0x0800
        ipv4 =
            version = 0x1
            ihl = 0xb
            diffserv = 0xe4
            totalLen = 0xf7d1
            identification = 0xea99
            flags = 0b110
            fragOffset = 0b0101110011111
            ttl = 0x98
            protocol = 0xff
            hdrChecksum = 0x449c
            srcAddr = 0x515904ec
            dstAddr = 0x27f6392c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x27f6392c),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xd3\xc9\x58\x51\x59\x4c',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x18\xf9\x9b\xdb\xee\xfe',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0a08),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x7192),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x01),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0b),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xe4),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xf7d1),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xea99),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0b9f),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x98),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xff),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x449c),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x27f6392c),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x515904ec),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x62f3),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xbcca),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x964fe5ed),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x6101cb3c),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x02),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x04),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x523c),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x5eaf),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x2bd0),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xd2bb),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xcf67),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x4167),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\xd3\xc9\x58\x51\x59\x4c\x18\xf9\x9b\xdb\xee\xfe\x08\x00\x1b\xe4\xf7\xd1\xea\x99\xcb\x9f\x98\xff\x44\x9c\x51\x59\x04\xec\x27\xf6\x39\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test234(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0xc465b8ceef67
            srcAddr = 0x08a8b81113b2
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0x9
            diffserv = 0x6a
            totalLen = 0x43c5
            identification = 0xff46
            flags = 0b001
            fragOffset = 0b0101010111001
            ttl = 0xb7
            protocol = 0x88
            hdrChecksum = 0xac98
            srcAddr = 0xb400d994
            dstAddr = 0x6a7f5f26
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xc465b8ceef67
            srcAddr = 0x08a8b81113b2
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0x9
            diffserv = 0x6a
            totalLen = 0x43c5
            identification = 0xff46
            flags = 0b001
            fragOffset = 0b0101010111001
            ttl = 0xb7
            protocol = 0x88
            hdrChecksum = 0x8a0b
            srcAddr = 0xb400d994
            dstAddr = 0x6a7f5f26
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x6a7f5f26),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xc4\x65\xb8\xce\xef\x67',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x08\xa8\xb8\x11\x13\xb2',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x047b),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xfd09),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0f),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x09),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x6a),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x43c5),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xff46),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0ab9),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xb7),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x88),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xac98),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x6a7f5f26),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xb400d994),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x5f92),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x78d9),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x67b07cca),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x0ab7e5e8),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x09),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x71fd),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x1c6d),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xbd7b),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x1b29),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xdab1),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x056f),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),), 0))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\xc4\x65\xb8\xce\xef\x67\x08\xa8\xb8\x11\x13\xb2\x08\x00\xf9\x6a\x43\xc5\xff\x46\x2a\xb9\xb7\x88\xac\x98\xb4\x00\xd9\x94\x6a\x7f\x5f\x26\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xc4\x65\xb8\xce\xef\x67\x08\xa8\xb8\x11\x13\xb2\x08\x00\xf9\x6a\x43\xc5\xff\x46\x2a\xb9\xb7\x88\x8a\x0b\xb4\x00\xd9\x94\x6a\x7f\x5f\x26\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test235(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xe1c9cc57d8ac
            srcAddr = 0x2620304a6eca
            etherType = 0x0800
        ipv4 =
            version = 0x5
            ihl = 0xe
            diffserv = 0x63
            totalLen = 0x2be0
            identification = 0x03af
            flags = 0b101
            fragOffset = 0b0101111101110
            ttl = 0x9d
            protocol = 0xd2
            hdrChecksum = 0x0960
            srcAddr = 0x56daaa29
            dstAddr = 0xcdb210c1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 7:
        ethernet =
            dstAddr = 0xe1c9cc57d8ac
            srcAddr = 0x2620304a6eca
            etherType = 0x0800
        ipv4 =
            version = 0x5
            ihl = 0xe
            diffserv = 0x63
            totalLen = 0x2be0
            identification = 0x03af
            flags = 0b101
            fragOffset = 0b0101111101110
            ttl = 0x9d
            protocol = 0xd2
            hdrChecksum = 0x48d4
            srcAddr = 0x56daaa29
            dstAddr = 0xcdb210c1
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x56daaa29),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xcdb210c1),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xe1\xc9\xcc\x57\xd8\xac',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x26\x20\x30\x4a\x6e\xca',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0934),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x5ff6),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x05),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0e),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x63),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x2be0),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x03af),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x05),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0bee),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x9d),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xd2),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x0960),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xcdb210c1),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x56daaa29),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x9a2c),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x60ad),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x72efd0df),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x4edc3344),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x08),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x2d),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xbb41),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xaa3c),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x0d4c),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x3ae0),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x8a3c),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x0d2c),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0007),), 0))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xe1\xc9\xcc\x57\xd8\xac\x26\x20\x30\x4a\x6e\xca\x08\x00\x5e\x63\x2b\xe0\x03\xaf\xab\xee\x9d\xd2\x09\x60\x56\xda\xaa\x29\xcd\xb2\x10\xc1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 7
        exp_pkt = b'\xe1\xc9\xcc\x57\xd8\xac\x26\x20\x30\x4a\x6e\xca\x08\x00\x5e\x63\x2b\xe0\x03\xaf\xab\xee\x9d\xd2\x48\xd4\x56\xda\xaa\x29\xcd\xb2\x10\xc1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test236(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x865767a82d8a
            srcAddr = 0x69bd5e11e257
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0x4
            diffserv = 0x1b
            totalLen = 0xd00c
            identification = 0xd171
            flags = 0b010
            fragOffset = 0b0110000100100
            ttl = 0x0f
            protocol = 0x0e
            hdrChecksum = 0x2927
            srcAddr = 0x2f2f3292
            dstAddr = 0x6ad46de1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x2f2f3292),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x6ad46de1),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x86\x57\x67\xa8\x2d\x8a',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x69\xbd\x5e\x11\xe2\x57',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x05),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x03d1),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x8eb4),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0f),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x04),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x1b),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xd00c),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xd171),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0c24),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x0f),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x0e),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x2927),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x6ad46de1),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x2f2f3292),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x41c7),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x3e45),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xde225b41),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x836bad94),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x05),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x01),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x0a),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x7231),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xb195),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xf325),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x97b6),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xb877),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xc60a),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x86\x57\x67\xa8\x2d\x8a\x69\xbd\x5e\x11\xe2\x57\x08\x00\xf4\x1b\xd0\x0c\xd1\x71\x4c\x24\x0f\x0e\x29\x27\x2f\x2f\x32\x92\x6a\xd4\x6d\xe1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test237(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x5c36c93bb188
            srcAddr = 0xec83d5d3a28d
            etherType = 0x0800
        ipv4 =
            version = 0x7
            ihl = 0x3
            diffserv = 0xcc
            totalLen = 0x4c9e
            identification = 0xc2bd
            flags = 0b001
            fragOffset = 0b1001001011001
            ttl = 0x78
            protocol = 0xc4
            hdrChecksum = 0x78d6
            srcAddr = 0x0e18f5da
            dstAddr = 0x1384e6d6
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x5c36c93bb188
            srcAddr = 0xec83d5d3a28d
            etherType = 0x0800
        ipv4 =
            version = 0x7
            ihl = 0x3
            diffserv = 0xcc
            totalLen = 0x4c9e
            identification = 0x6853
            flags = 0b001
            fragOffset = 0b1001001011001
            ttl = 0x78
            protocol = 0xc4
            hdrChecksum = 0x2dd6
            srcAddr = 0x0e18f5da
            dstAddr = 0x1384e6d6
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x6853),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x0e18f5da),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x1384e6d6),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x5c\x36\xc9\x3b\xb1\x88',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xec\x83\xd5\xd3\xa2\x8d',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0948),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xa1a7),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x07),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x03),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xcc),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x4c9e),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xc2bd),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x1259),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x78),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xc4),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x78d6),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x1384e6d6),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x0e18f5da),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x7ae2),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xcd73),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xa2ee9842),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xaf9ab5a6),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x06),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x06),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x3a82),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xd522),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x1dee),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x36c4),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x27fb),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xd2bf),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0072),), 0))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x5c\x36\xc9\x3b\xb1\x88\xec\x83\xd5\xd3\xa2\x8d\x08\x00\x73\xcc\x4c\x9e\xc2\xbd\x32\x59\x78\xc4\x78\xd6\x0e\x18\xf5\xda\x13\x84\xe6\xd6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x5c\x36\xc9\x3b\xb1\x88\xec\x83\xd5\xd3\xa2\x8d\x08\x00\x73\xcc\x4c\x9e\x68\x53\x32\x59\x78\xc4\x2d\xd6\x0e\x18\xf5\xda\x13\x84\xe6\xd6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test238(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x4984a881665e
            srcAddr = 0x22547aa83884
            etherType = 0x0800
        ipv4 =
            version = 0xd
            ihl = 0xa
            diffserv = 0x85
            totalLen = 0x48a1
            identification = 0xbef9
            flags = 0b011
            fragOffset = 0b0101010000100
            ttl = 0xe2
            protocol = 0x85
            hdrChecksum = 0xd3ae
            srcAddr = 0x842b4eab
            dstAddr = 0x2f4e778f
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x4d78),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x842b4eab),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x2f4e778f),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x49\x84\xa8\x81\x66\x5e',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x22\x54\x7a\xa8\x38\x84',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0b87),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x558b),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0d),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0a),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x85),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x48a1),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xbef9),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x03),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0a84),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xe2),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x85),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xd3ae),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x2f4e778f),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x842b4eab),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x780b),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x5447),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x79ada702),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x0102b045),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0c),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x30),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x383c),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x4423),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xc50c),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x366e),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x526f),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x6ad0),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0083),), 0))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x49\x84\xa8\x81\x66\x5e\x22\x54\x7a\xa8\x38\x84\x08\x00\xda\x85\x48\xa1\xbe\xf9\x6a\x84\xe2\x85\xd3\xae\x84\x2b\x4e\xab\x2f\x4e\x77\x8f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test239(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0x773245c2c3b4
            srcAddr = 0xc31e658f1694
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0x9
            diffserv = 0x1c
            totalLen = 0xfabf
            identification = 0x9bcf
            flags = 0b000
            fragOffset = 0b1100000010111
            ttl = 0x94
            protocol = 0x85
            hdrChecksum = 0x40d3
            srcAddr = 0x38e6ef2e
            dstAddr = 0x0f182e6c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x38e6ef2e),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x77\x32\x45\xc2\xc3\xb4',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xc3\x1e\x65\x8f\x16\x94',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x00),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0775),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xf30c),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x06),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x09),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x1c),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xfabf),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x9bcf),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x1817),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x94),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x85),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x40d3),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x0f182e6c),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x38e6ef2e),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x84f7),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x6cd2),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x023e5c81),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x55f90377),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0e),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x03),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x20),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x61e1),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x8cc8),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x3b1c),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x5a52),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x533a),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x93b5),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\x77\x32\x45\xc2\xc3\xb4\xc3\x1e\x65\x8f\x16\x94\x08\x00\x69\x1c\xfa\xbf\x9b\xcf\x18\x17\x94\x85\x40\xd3\x38\xe6\xef\x2e\x0f\x18\x2e\x6c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test240(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0xcc722bd8d8c3
            srcAddr = 0xb2a3bc7251c3
            etherType = 0x0800
        ipv4 =
            version = 0x7
            ihl = 0x1
            diffserv = 0x5b
            totalLen = 0x340e
            identification = 0xa6e9
            flags = 0b001
            fragOffset = 0b0010110001100
            ttl = 0xcf
            protocol = 0xb2
            hdrChecksum = 0xb572
            srcAddr = 0x3f5d5370
            dstAddr = 0xe6f8ee8d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 9:
        ethernet =
            dstAddr = 0xcc722bd8d8c3
            srcAddr = 0xb2a3bc7251c3
            etherType = 0x0800
        ipv4 =
            version = 0x7
            ihl = 0x1
            diffserv = 0x5b
            totalLen = 0x340e
            identification = 0xa6e9
            flags = 0b001
            fragOffset = 0b0010110001100
            ttl = 0xcf
            protocol = 0xb2
            hdrChecksum = 0x5619
            srcAddr = 0x3f5d5370
            dstAddr = 0xe6f8ee8d
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x3f5d5370),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xcc\x72\x2b\xd8\xd8\xc3',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xb2\xa3\xbc\x72\x51\xc3',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0116),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x1e2d),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x07),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x01),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x5b),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x340e),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xa6e9),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x058c),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xcf),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xb2),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xb572),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xe6f8ee8d),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x3f5d5370),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x6ab5),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x4970),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x2a53b660),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x20a3cd1a),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x07),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x05),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x11),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xad72),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x76b2),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x1cdf),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x01b7),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xfc95),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x9f5b),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0009),), 0))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\xcc\x72\x2b\xd8\xd8\xc3\xb2\xa3\xbc\x72\x51\xc3\x08\x00\x71\x5b\x34\x0e\xa6\xe9\x25\x8c\xcf\xb2\xb5\x72\x3f\x5d\x53\x70\xe6\xf8\xee\x8d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 9
        exp_pkt = b'\xcc\x72\x2b\xd8\xd8\xc3\xb2\xa3\xbc\x72\x51\xc3\x08\x00\x71\x5b\x34\x0e\xa6\xe9\x25\x8c\xcf\xb2\x56\x19\x3f\x5d\x53\x70\xe6\xf8\xee\x8d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test241(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x6cd267da89a7
            srcAddr = 0xd991f3e6e4c7
            etherType = 0x0800
        ipv4 =
            version = 0x9
            ihl = 0x7
            diffserv = 0xf3
            totalLen = 0xedee
            identification = 0x9eb4
            flags = 0b001
            fragOffset = 0b1110111001011
            ttl = 0x00
            protocol = 0xf7
            hdrChecksum = 0x3d2f
            srcAddr = 0x6b6fb466
            dstAddr = 0x3d71f810
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x6cd267da89a7
            srcAddr = 0xd991f3e6e4c7
            etherType = 0x0800
        ipv4 =
            version = 0x9
            ihl = 0x7
            diffserv = 0xf3
            totalLen = 0xedee
            identification = 0x18f3
            flags = 0b001
            fragOffset = 0b1110111001011
            ttl = 0x00
            protocol = 0xf7
            hdrChecksum = 0xcd0f
            srcAddr = 0x6b6fb466
            dstAddr = 0x3d71f810
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x18f3),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x6b6fb466),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x6c\xd2\x67\xda\x89\xa7',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xd9\x91\xf3\xe6\xe4\xc7',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x00),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0c92),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xebfb),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x09),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x07),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xf3),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xedee),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x9eb4),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x1dcb),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x00),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xf7),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x3d2f),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x3d71f810),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x6b6fb466),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xc6a6),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x595d),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x4a09ff9a),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x7d25049d),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0a),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x05),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x3f),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x8b54),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x4d10),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x353e),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x02b9),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x572f),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xabfe),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0152),), 0))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x6c\xd2\x67\xda\x89\xa7\xd9\x91\xf3\xe6\xe4\xc7\x08\x00\x97\xf3\xed\xee\x9e\xb4\x3d\xcb\x00\xf7\x3d\x2f\x6b\x6f\xb4\x66\x3d\x71\xf8\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x6c\xd2\x67\xda\x89\xa7\xd9\x91\xf3\xe6\xe4\xc7\x08\x00\x97\xf3\xed\xee\x18\xf3\x3d\xcb\x00\xf7\xcd\x0f\x6b\x6f\xb4\x66\x3d\x71\xf8\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test242(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x02dcc1d4d83e
            srcAddr = 0xda08c990e101
            etherType = 0x0800
        ipv4 =
            version = 0xe
            ihl = 0x4
            diffserv = 0x6e
            totalLen = 0x6c2b
            identification = 0x10f8
            flags = 0b101
            fragOffset = 0b1000111100100
            ttl = 0xc4
            protocol = 0xb7
            hdrChecksum = 0x1b42
            srcAddr = 0xda5a64bf
            dstAddr = 0xfb49a817
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xe5f9),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xda5a64bf),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x02\xdc\xc1\xd4\xd8\x3e',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xda\x08\xc9\x90\xe1\x01',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0d5d),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x5092),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0e),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x04),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x6e),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x6c2b),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x10f8),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x05),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x11e4),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xc4),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xb7),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x1b42),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xfb49a817),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xda5a64bf),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x8597),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xfbfb),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xc4eddf87),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xfc329979),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0b),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x05),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x0b),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x8242),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xd5f9),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x9cd8),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x1136),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xbc0e),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x8ca8),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01b7),), 0))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x02\xdc\xc1\xd4\xd8\x3e\xda\x08\xc9\x90\xe1\x01\x08\x00\xe4\x6e\x6c\x2b\x10\xf8\xb1\xe4\xc4\xb7\x1b\x42\xda\x5a\x64\xbf\xfb\x49\xa8\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test243(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x65fb6f39d403
            srcAddr = 0x5fa8eb5fa389
            etherType = 0x0800
        ipv4 =
            version = 0xe
            ihl = 0xb
            diffserv = 0xcc
            totalLen = 0x5b42
            identification = 0x5cfc
            flags = 0b011
            fragOffset = 0b1000101110000
            ttl = 0x49
            protocol = 0x70
            hdrChecksum = 0x518b
            srcAddr = 0xb2790d08
            dstAddr = 0xa80c0194
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x65\xfb\x6f\x39\xd4\x03',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x5f\xa8\xeb\x5f\xa3\x89',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x05),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x05a9),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x4af6),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0e),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0b),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xcc),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x5b42),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x5cfc),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x03),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x1170),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x49),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x70),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x518b),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xa80c0194),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xb2790d08),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x0e8e),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x306f),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xfdb272b4),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x2404fd12),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0e),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x0c),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xa6d3),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x32c7),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x4c95),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x3ab4),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xc19b),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x7ce2),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x65\xfb\x6f\x39\xd4\x03\x5f\xa8\xeb\x5f\xa3\x89\x08\x00\xeb\xcc\x5b\x42\x5c\xfc\x71\x70\x49\x70\x51\x8b\xb2\x79\x0d\x08\xa8\x0c\x01\x94\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test244(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0xcd4aa6c544ef
            srcAddr = 0xdd27014bcd50
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x0
            diffserv = 0xd2
            totalLen = 0x2ce7
            identification = 0xd164
            flags = 0b111
            fragOffset = 0b1110010010000
            ttl = 0xef
            protocol = 0x6b
            hdrChecksum = 0x46e7
            srcAddr = 0x43641d5a
            dstAddr = 0xed051b48
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 12:
        ethernet =
            dstAddr = 0xcd4aa6c544ef
            srcAddr = 0xdd27014bcd50
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x0
            diffserv = 0xd2
            totalLen = 0x2ce7
            identification = 0xd164
            flags = 0b111
            fragOffset = 0b1110010010000
            ttl = 0xef
            protocol = 0x6b
            hdrChecksum = 0x0bd8
            srcAddr = 0x43641d5a
            dstAddr = 0xed051b48
    """
    
    def setupCtrlPlane(self):
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xcd\x4a\xa6\xc5\x44\xef',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xdd\x27\x01\x4b\xcd\x50',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x05),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x03d9),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xe5a8),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0a),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x00),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xd2),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x2ce7),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xd164),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x1c90),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xef),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x6b),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x46e7),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xed051b48),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x43641d5a),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x8775),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xab8e),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x399aeb48),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x92cbbb78),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x04),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x20),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x6cda),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xcc80),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x6497),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xb11b),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x1462),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x35c2),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x000c),), 0))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\xcd\x4a\xa6\xc5\x44\xef\xdd\x27\x01\x4b\xcd\x50\x08\x00\xa0\xd2\x2c\xe7\xd1\x64\xfc\x90\xef\x6b\x46\xe7\x43\x64\x1d\x5a\xed\x05\x1b\x48\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 12
        exp_pkt = b'\xcd\x4a\xa6\xc5\x44\xef\xdd\x27\x01\x4b\xcd\x50\x08\x00\xa0\xd2\x2c\xe7\xd1\x64\xfc\x90\xef\x6b\x0b\xd8\x43\x64\x1d\x5a\xed\x05\x1b\x48\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test245(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x210782e8b3c7
            srcAddr = 0x88c6309c251f
            etherType = 0x0800
        ipv4 =
            version = 0xd
            ihl = 0xb
            diffserv = 0x2e
            totalLen = 0x8889
            identification = 0xd6f8
            flags = 0b010
            fragOffset = 0b1100110110110
            ttl = 0x87
            protocol = 0xd0
            hdrChecksum = 0xeb3f
            srcAddr = 0xee8dad30
            dstAddr = 0x11dff585
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x11dff585),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x21\x07\x82\xe8\xb3\xc7',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x88\xc6\x30\x9c\x25\x1f',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0a26),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x4eaa),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0d),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0b),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x2e),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x8889),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xd6f8),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x19b6),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x87),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xd0),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xeb3f),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x11dff585),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xee8dad30),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x286d),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x387e),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x934106e1),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xd99cfcc5),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0c),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x03),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x39),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x014f),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xa13e),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x6242),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xd8cd),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x7112),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xfc15),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x21\x07\x82\xe8\xb3\xc7\x88\xc6\x30\x9c\x25\x1f\x08\x00\xdb\x2e\x88\x89\xd6\xf8\x59\xb6\x87\xd0\xeb\x3f\xee\x8d\xad\x30\x11\xdf\xf5\x85\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test246(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x210782e8b3c7
            srcAddr = 0x88c6309c251f
            etherType = 0x0800
        ipv4 =
            version = 0xd
            ihl = 0xb
            diffserv = 0x2e
            totalLen = 0x8889
            identification = 0xd6f8
            flags = 0b010
            fragOffset = 0b1100110110110
            ttl = 0x87
            protocol = 0xd0
            hdrChecksum = 0xeb3f
            srcAddr = 0xee8dad30
            dstAddr = 0x11dff585
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xee8dad30),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x11dff585),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x21\x07\x82\xe8\xb3\xc7',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x88\xc6\x30\x9c\x25\x1f',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0a26),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x4eaa),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0d),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0b),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x2e),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x8889),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xd6f8),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x19b6),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x87),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xd0),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xeb3f),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x11dff585),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xee8dad30),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x286d),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x387e),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x934106e1),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xd99cfcc5),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0c),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x03),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x39),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x014f),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xa13e),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x6242),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xd8cd),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x7112),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xfc15),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x21\x07\x82\xe8\xb3\xc7\x88\xc6\x30\x9c\x25\x1f\x08\x00\xdb\x2e\x88\x89\xd6\xf8\x59\xb6\x87\xd0\xeb\x3f\xee\x8d\xad\x30\x11\xdf\xf5\x85\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test247(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xb21b2de4768e
            srcAddr = 0x2aaae4cbcbc2
            etherType = 0x0800
        ipv4 =
            version = 0x8
            ihl = 0xc
            diffserv = 0x9f
            totalLen = 0x9452
            identification = 0x5e6a
            flags = 0b000
            fragOffset = 0b0101100100010
            ttl = 0x8f
            protocol = 0x25
            hdrChecksum = 0xbdc6
            srcAddr = 0x351b3f94
            dstAddr = 0x1a73a438
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xb21b2de4768e
            srcAddr = 0x2aaae4cbcbc2
            etherType = 0x0800
        ipv4 =
            version = 0x8
            ihl = 0xc
            diffserv = 0x9f
            totalLen = 0x9452
            identification = 0x47ab
            flags = 0b000
            fragOffset = 0b0101100100010
            ttl = 0x8f
            protocol = 0x25
            hdrChecksum = 0xc9bf
            srcAddr = 0x351b3f94
            dstAddr = 0x1a73a438
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x47ab),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x351b3f94),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x1a73a438),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xb2\x1b\x2d\xe4\x76\x8e',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x2a\xaa\xe4\xcb\xcb\xc2',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0d85),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x58cb),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x08),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0c),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x9f),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x9452),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x5e6a),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0b22),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x8f),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x25),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xbdc6),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x1a73a438),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x351b3f94),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x5098),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xbc49),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x98a35006),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x0cfea664),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x05),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x31),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xc31f),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xe25c),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x8022),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xabbe),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x651d),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x4500),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xb2\x1b\x2d\xe4\x76\x8e\x2a\xaa\xe4\xcb\xcb\xc2\x08\x00\x8c\x9f\x94\x52\x5e\x6a\x0b\x22\x8f\x25\xbd\xc6\x35\x1b\x3f\x94\x1a\x73\xa4\x38\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xb2\x1b\x2d\xe4\x76\x8e\x2a\xaa\xe4\xcb\xcb\xc2\x08\x00\x8c\x9f\x94\x52\x47\xab\x0b\x22\x8f\x25\xc9\xbf\x35\x1b\x3f\x94\x1a\x73\xa4\x38\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test248(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xd06617567fae
            srcAddr = 0xb17a0d90ae62
            etherType = 0x0800
        ipv4 =
            version = 0x9
            ihl = 0x3
            diffserv = 0xa5
            totalLen = 0xd892
            identification = 0x93a1
            flags = 0b000
            fragOffset = 0b0101001001110
            ttl = 0xe9
            protocol = 0xa5
            hdrChecksum = 0x5bb6
            srcAddr = 0xf99cba1c
            dstAddr = 0xabb7ce84
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x7f08),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xf99cba1c),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xabb7ce84),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xd0\x66\x17\x56\x7f\xae',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xb1\x7a\x0d\x90\xae\x62',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0cff),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xd7bf),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x09),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x03),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xa5),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xd892),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x93a1),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0a4e),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xe9),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xa5),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x5bb6),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xabb7ce84),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xf99cba1c),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x373b),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xbf23),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x1ef24f1f),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xed53494c),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x07),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x37),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xd93b),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xef4e),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xa08f),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x76a5),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x6408),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xa602),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xd0\x66\x17\x56\x7f\xae\xb1\x7a\x0d\x90\xae\x62\x08\x00\x93\xa5\xd8\x92\x93\xa1\x0a\x4e\xe9\xa5\x5b\xb6\xf9\x9c\xba\x1c\xab\xb7\xce\x84\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test249(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x44f223f21e1c
            srcAddr = 0x989443d55f60
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0x3
            diffserv = 0xa5
            totalLen = 0x9158
            identification = 0xecee
            flags = 0b111
            fragOffset = 0b1011101100001
            ttl = 0x7b
            protocol = 0x42
            hdrChecksum = 0x866e
            srcAddr = 0x85613f67
            dstAddr = 0xf1c79cce
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x2d9c),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x85613f67),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xf1c79cce),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0078),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x44\xf2\x23\xf2\x1e\x1c',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x98\x94\x43\xd5\x5f\x60',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x05),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x048e),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x7511),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x06),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x03),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xa5),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x9158),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xecee),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x1761),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x7b),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x42),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x866e),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xf1c79cce),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x85613f67),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xa37d),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x6e71),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x8b05507c),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xdd14a480),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x00),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x04),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x8ebf),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xfb33),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x8ce6),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xcf3e),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x49df),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x6808),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x44\xf2\x23\xf2\x1e\x1c\x98\x94\x43\xd5\x5f\x60\x08\x00\x63\xa5\x91\x58\xec\xee\xf7\x61\x7b\x42\x86\x6e\x85\x61\x3f\x67\xf1\xc7\x9c\xce\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test250(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0xb6adcdfc2a4e
            srcAddr = 0x2012fcb058de
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0x7
            diffserv = 0x7f
            totalLen = 0xf843
            identification = 0x158f
            flags = 0b001
            fragOffset = 0b0100100100011
            ttl = 0xff
            protocol = 0x43
            hdrChecksum = 0xef3b
            srcAddr = 0x617fdb52
            dstAddr = 0x2306b7ef
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xb6adcdfc2a4e
            srcAddr = 0x2012fcb058de
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0x7
            diffserv = 0x7f
            totalLen = 0xf843
            identification = 0x1f9e
            flags = 0b001
            fragOffset = 0b0100100100011
            ttl = 0xff
            protocol = 0x43
            hdrChecksum = 0x606f
            srcAddr = 0x617fdb52
            dstAddr = 0x2306b7ef
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x1f9e),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x617fdb52),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x2306b7ef),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0011),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xb6\xad\xcd\xfc\x2a\x4e',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x20\x12\xfc\xb0\x58\xde',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0867),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x1e34),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x04),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x07),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x7f),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xf843),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x158f),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0923),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xff),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x43),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xef3b),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x2306b7ef),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x617fdb52),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x7d52),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x49bf),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x2c2b8092),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xeb61ecc1),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0c),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x05),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x37),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x0a45),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xb7c9),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x20d0),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x9db0),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x9a29),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xa616),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\xb6\xad\xcd\xfc\x2a\x4e\x20\x12\xfc\xb0\x58\xde\x08\x00\x47\x7f\xf8\x43\x15\x8f\x29\x23\xff\x43\xef\x3b\x61\x7f\xdb\x52\x23\x06\xb7\xef\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xb6\xad\xcd\xfc\x2a\x4e\x20\x12\xfc\xb0\x58\xde\x08\x00\x47\x7f\xf8\x43\x1f\x9e\x29\x23\xff\x43\x60\x6f\x61\x7f\xdb\x52\x23\x06\xb7\xef\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test251(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x7522bb6b4231
            srcAddr = 0xb54eb5ac1eb2
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0x6
            diffserv = 0xf1
            totalLen = 0x969f
            identification = 0x73c8
            flags = 0b111
            fragOffset = 0b0101011011000
            ttl = 0x29
            protocol = 0xb8
            hdrChecksum = 0xe8f9
            srcAddr = 0x143362b2
            dstAddr = 0xab546280
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 14:
        ethernet =
            dstAddr = 0x7522bb6b4231
            srcAddr = 0xb54eb5ac1eb2
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0x6
            diffserv = 0xf1
            totalLen = 0x969f
            identification = 0x73c8
            flags = 0b111
            fragOffset = 0b0101011011000
            ttl = 0x29
            protocol = 0xb8
            hdrChecksum = 0x155b
            srcAddr = 0x143362b2
            dstAddr = 0xab546280
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x143362b2),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xab546280),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x000e),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x75\x22\xbb\x6b\x42\x31',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xb5\x4e\xb5\xac\x1e\xb2',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x00),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x03e7),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xf5ec),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x04),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x06),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xf1),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x969f),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x73c8),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0ad8),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x29),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xb8),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xe8f9),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xab546280),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x143362b2),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x9190),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x8fde),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xeaa7b431),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x67b30f44),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x01),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x33),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x1899),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x2f09),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x33ed),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x7b62),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x5f28),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x97be),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x75\x22\xbb\x6b\x42\x31\xb5\x4e\xb5\xac\x1e\xb2\x08\x00\x46\xf1\x96\x9f\x73\xc8\xea\xd8\x29\xb8\xe8\xf9\x14\x33\x62\xb2\xab\x54\x62\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 14
        exp_pkt = b'\x75\x22\xbb\x6b\x42\x31\xb5\x4e\xb5\xac\x1e\xb2\x08\x00\x46\xf1\x96\x9f\x73\xc8\xea\xd8\x29\xb8\x15\x5b\x14\x33\x62\xb2\xab\x54\x62\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test252(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x01f8f33e2aa5
            srcAddr = 0x69dd1e256d0e
            etherType = 0x0800
        ipv4 =
            version = 0xb
            ihl = 0x6
            diffserv = 0xa9
            totalLen = 0x259a
            identification = 0x29ea
            flags = 0b110
            fragOffset = 0b0110111011010
            ttl = 0xde
            protocol = 0x46
            hdrChecksum = 0x4461
            srcAddr = 0xb3e02d55
            dstAddr = 0x6d911599
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xb3e02d55),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x6d911599),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x01\xf8\xf3\x3e\x2a\xa5',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x69\xdd\x1e\x25\x6d\x0e',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x05),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x04ec),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x89e7),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0b),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x06),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xa9),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x259a),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x29ea),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0dda),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xde),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x46),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x4461),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x6d911599),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xb3e02d55),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xddf2),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xba76),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x1e0c8717),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x57afd7b8),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x08),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x3b),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xe8ad),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xdf93),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xf0ff),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x71e7),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x18ff),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x0cc7),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x01\xf8\xf3\x3e\x2a\xa5\x69\xdd\x1e\x25\x6d\x0e\x08\x00\xb6\xa9\x25\x9a\x29\xea\xcd\xda\xde\x46\x44\x61\xb3\xe0\x2d\x55\x6d\x91\x15\x99\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test253(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0xd40027063787
            srcAddr = 0x86bd05abb6b2
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0x7
            diffserv = 0xdb
            totalLen = 0xcef6
            identification = 0x6636
            flags = 0b011
            fragOffset = 0b0110000001100
            ttl = 0x9b
            protocol = 0xc5
            hdrChecksum = 0x801a
            srcAddr = 0xd07192ea
            dstAddr = 0x8854a2f2
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x8854a2f2),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xd4\x00\x27\x06\x37\x87',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x86\xbd\x05\xab\xb6\xb2',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x07ab),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x67ed),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0f),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x07),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xdb),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xcef6),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x6636),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x03),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0c0c),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x9b),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xc5),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x801a),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x8854a2f2),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xd07192ea),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x1f63),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xab3f),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x4736501e),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x58d18be0),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x00),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x1a),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x547c),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x7ee5),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xe51e),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x45a8),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x729a),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x4c96),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\xd4\x00\x27\x06\x37\x87\x86\xbd\x05\xab\xb6\xb2\x08\x00\xf7\xdb\xce\xf6\x66\x36\x6c\x0c\x9b\xc5\x80\x1a\xd0\x71\x92\xea\x88\x54\xa2\xf2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test254(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x791a324dbabd
            srcAddr = 0xdc0b8e2bea91
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0x4
            diffserv = 0xc1
            totalLen = 0x390c
            identification = 0xb072
            flags = 0b010
            fragOffset = 0b1100100000101
            ttl = 0x3f
            protocol = 0x12
            hdrChecksum = 0x7689
            srcAddr = 0x7039eb69
            dstAddr = 0x3b7001ee
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 3:
        ethernet =
            dstAddr = 0x791a324dbabd
            srcAddr = 0xdc0b8e2bea91
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0x4
            diffserv = 0xc1
            totalLen = 0x390c
            identification = 0xb072
            flags = 0b010
            fragOffset = 0b1100100000101
            ttl = 0x3f
            protocol = 0x12
            hdrChecksum = 0x80a6
            srcAddr = 0x7039eb69
            dstAddr = 0x3b7001ee
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x3b7001ee),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0003),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x79\x1a\x32\x4d\xba\xbd',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xdc\x0b\x8e\x2b\xea\x91',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0e68),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x2684),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x06),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x04),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xc1),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x390c),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xb072),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x1905),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x3f),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x12),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x7689),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x3b7001ee),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x7039eb69),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x4063),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x4b25),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x5bffa6dc),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x0fbeefc6),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x09),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x02),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x2af9),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x312c),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xc4dc),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x7887),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xfa55),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xfbfd),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x79\x1a\x32\x4d\xba\xbd\xdc\x0b\x8e\x2b\xea\x91\x08\x00\x64\xc1\x39\x0c\xb0\x72\x59\x05\x3f\x12\x76\x89\x70\x39\xeb\x69\x3b\x70\x01\xee\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 3
        exp_pkt = b'\x79\x1a\x32\x4d\xba\xbd\xdc\x0b\x8e\x2b\xea\x91\x08\x00\x64\xc1\x39\x0c\xb0\x72\x59\x05\x3f\x12\x80\xa6\x70\x39\xeb\x69\x3b\x70\x01\xee\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test255(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xefe5fcac4692
            srcAddr = 0x661e3ca8c9ef
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x7
            diffserv = 0xbd
            totalLen = 0xfdfe
            identification = 0x720e
            flags = 0b110
            fragOffset = 0b1101101001111
            ttl = 0x7a
            protocol = 0xf4
            hdrChecksum = 0xfcc9
            srcAddr = 0xd836f106
            dstAddr = 0x033de2b2
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 2:
        ethernet =
            dstAddr = 0xefe5fcac4692
            srcAddr = 0x661e3ca8c9ef
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x7
            diffserv = 0xbd
            totalLen = 0xfdfe
            identification = 0x1e1c
            flags = 0b110
            fragOffset = 0b1101101001111
            ttl = 0x7a
            protocol = 0xf4
            hdrChecksum = 0x36b5
            srcAddr = 0xd836f106
            dstAddr = 0x033de2b2
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x1e1c),
                action_egress_port = hex_to_i16(0x0002),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xd836f106),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xef\xe5\xfc\xac\x46\x92',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x66\x1e\x3c\xa8\xc9\xef',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x088e),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x510d),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0a),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x07),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xbd),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xfdfe),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x720e),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x1b4f),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x7a),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xf4),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xfcc9),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x033de2b2),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xd836f106),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x22a6),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x81a2),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x68a74a0f),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xc7796c14),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0c),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x37),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xd5f3),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xb7cf),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xed76),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x4dbf),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x121f),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x1fde),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xef\xe5\xfc\xac\x46\x92\x66\x1e\x3c\xa8\xc9\xef\x08\x00\xa7\xbd\xfd\xfe\x72\x0e\xdb\x4f\x7a\xf4\xfc\xc9\xd8\x36\xf1\x06\x03\x3d\xe2\xb2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 2
        exp_pkt = b'\xef\xe5\xfc\xac\x46\x92\x66\x1e\x3c\xa8\xc9\xef\x08\x00\xa7\xbd\xfd\xfe\x1e\x1c\xdb\x4f\x7a\xf4\x36\xb5\xd8\x36\xf1\x06\x03\x3d\xe2\xb2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test256(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x6c102552ca67
            srcAddr = 0x87a069a19b32
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0xf
            diffserv = 0x59
            totalLen = 0x9c8c
            identification = 0x364e
            flags = 0b010
            fragOffset = 0b1010110110001
            ttl = 0xa1
            protocol = 0xdc
            hdrChecksum = 0xfca6
            srcAddr = 0x6f2afb76
            dstAddr = 0x2ac06319
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x429e),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x6f2afb76),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x6c\x10\x25\x52\xca\x67',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x87\xa0\x69\xa1\x9b\x32',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x00),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x075f),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xbef3),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x02),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0f),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x59),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x9c8c),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x364e),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x15b1),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xa1),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0xdc),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xfca6),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x2ac06319),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x6f2afb76),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x5fd4),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x412c),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x54471467),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x44ac7f58),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x03),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x2a),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xfd03),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x61ff),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x53c4),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x26b4),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xb5c0),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x49ee),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x6c\x10\x25\x52\xca\x67\x87\xa0\x69\xa1\x9b\x32\x08\x00\x2f\x59\x9c\x8c\x36\x4e\x55\xb1\xa1\xdc\xfc\xa6\x6f\x2a\xfb\x76\x2a\xc0\x63\x19\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test257(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0xeee398aa2d3e
            srcAddr = 0x51b04c6fbdf6
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0xe
            diffserv = 0x44
            totalLen = 0x9dab
            identification = 0x0de6
            flags = 0b110
            fragOffset = 0b1111000100110
            ttl = 0x30
            protocol = 0x96
            hdrChecksum = 0x5937
            srcAddr = 0x22e4fb9e
            dstAddr = 0x772cd0f5
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x22e4fb9e),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xee\xe3\x98\xaa\x2d\x3e',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x51\xb0\x4c\x6f\xbd\xf6',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0840),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xef97),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x04),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0e),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x44),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x9dab),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x0de6),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x1e26),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x30),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x96),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x5937),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x772cd0f5),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x22e4fb9e),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xd598),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x3cb7),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x0f789374),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xa202e4a0),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x03),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x01),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x2d),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x3e7a),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x5d84),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x8ab3),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x3ef5),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x1dbb),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x989f),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\xee\xe3\x98\xaa\x2d\x3e\x51\xb0\x4c\x6f\xbd\xf6\x08\x00\x4e\x44\x9d\xab\x0d\xe6\xde\x26\x30\x96\x59\x37\x22\xe4\xfb\x9e\x77\x2c\xd0\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test258(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xb350ca88f02b
            srcAddr = 0xbbb998e06416
            etherType = 0x0800
        ipv4 =
            version = 0xb
            ihl = 0x8
            diffserv = 0x65
            totalLen = 0x9061
            identification = 0xc09b
            flags = 0b111
            fragOffset = 0b1011111101001
            ttl = 0x69
            protocol = 0x53
            hdrChecksum = 0x8e16
            srcAddr = 0x37479477
            dstAddr = 0x9e7dd298
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xb3\x50\xca\x88\xf0\x2b',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xbb\xb9\x98\xe0\x64\x16',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0c64),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xc288),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0b),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x08),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x65),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x9061),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xc09b),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x17e9),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x69),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x53),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x8e16),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x9e7dd298),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x37479477),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x3d6a),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x987a),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xf4ca1319),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xf95ea8c1),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x01),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x38),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x696e),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xe0df),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xf100),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xf1cb),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x6de6),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x5c8c),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xb3\x50\xca\x88\xf0\x2b\xbb\xb9\x98\xe0\x64\x16\x08\x00\xb8\x65\x90\x61\xc0\x9b\xf7\xe9\x69\x53\x8e\x16\x37\x47\x94\x77\x9e\x7d\xd2\x98\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test259(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x75f9e0b6f938
            srcAddr = 0x7f90b3cfa11f
            etherType = 0x0800
        ipv4 =
            version = 0x1
            ihl = 0x5
            diffserv = 0xa1
            totalLen = 0xc00d
            identification = 0x126d
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0x8d
            protocol = 0x06
            hdrChecksum = 0x9a5c
            srcAddr = 0x45990a5a
            dstAddr = 0x7a1bd3a8
        tcp =
            srcPort = 0x36b8
            dstPort = 0x0421
            seqNo = 0xa11dffcd
            ackNo = 0xe1149ff1
            dataOffset = 0xa
            res = 0b010
            ecn = 0b101
            ctrl = 0b100011
            window = 0x7672
            checksum = 0x479e
            urgentPtr = 0x3184
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x75f9e0b6f938
            srcAddr = 0x7f90b3cfa11f
            etherType = 0x0800
        ipv4 =
            version = 0x1
            ihl = 0x5
            diffserv = 0xa1
            totalLen = 0xc00d
            identification = 0x126d
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0x8d
            protocol = 0x06
            hdrChecksum = 0x2d25
            srcAddr = 0x45990a5a
            dstAddr = 0x7a1bd3a8
        tcp =
            srcPort = 0x36b8
            dstPort = 0x0421
            seqNo = 0xa11dffcd
            ackNo = 0xe1149ff1
            dataOffset = 0xa
            res = 0b010
            ecn = 0b101
            ctrl = 0b100011
            window = 0x7672
            checksum = 0x479e
            urgentPtr = 0x3184
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x7a1bd3a8),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x75\xf9\xe0\xb6\xf9\x38',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x7f\x90\xb3\xcf\xa1\x1f',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0770),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x7e31),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x01),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x05),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xa1),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xc00d),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x126d),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x8d),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x9a5c),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x7a1bd3a8),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x45990a5a),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x36b8),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x0421),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0xa11dffcd),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0xe1149ff1),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0a),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x05),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x23),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x7672),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x479e),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x3184),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x8f22),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xde2b),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x1ac8),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),), 0))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x75\xf9\xe0\xb6\xf9\x38\x7f\x90\xb3\xcf\xa1\x1f\x08\x00\x15\xa1\xc0\x0d\x12\x6d\xc0\x00\x8d\x06\x9a\x5c\x45\x99\x0a\x5a\x7a\x1b\xd3\xa8\x36\xb8\x04\x21\xa1\x1d\xff\xcd\xe1\x14\x9f\xf1\xa5\x63\x76\x72\x47\x9e\x31\x84\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x75\xf9\xe0\xb6\xf9\x38\x7f\x90\xb3\xcf\xa1\x1f\x08\x00\x15\xa1\xc0\x0d\x12\x6d\xc0\x00\x8d\x06\x2d\x25\x45\x99\x0a\x5a\x7a\x1b\xd3\xa8\x36\xb8\x04\x21\xa1\x1d\xff\xcd\xe1\x14\x9f\xf1\xa5\x63\x76\x72\x47\x9e\x31\x84\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test260(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0xf98a401d83ac
            srcAddr = 0x0053d2bcdab3
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x6
            diffserv = 0xcf
            totalLen = 0x8246
            identification = 0x90ef
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0x6c
            protocol = 0x06
            hdrChecksum = 0x9c86
            srcAddr = 0x4a8e6769
            dstAddr = 0xf3ac8553
        tcp =
            srcPort = 0x0b74
            dstPort = 0xf560
            seqNo = 0x42c6a187
            ackNo = 0x2df42a60
            dataOffset = 0xe
            res = 0b000
            ecn = 0b010
            ctrl = 0b111101
            window = 0xcf32
            checksum = 0xd790
            urgentPtr = 0x1097
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xf3ac8553),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xf9\x8a\x40\x1d\x83\xac',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x00\x53\xd2\xbc\xda\xb3',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x09fc),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x0274),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0a),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x06),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xcf),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x8246),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x90ef),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x04),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x6c),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x9c86),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xf3ac8553),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x4a8e6769),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x0b74),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0xf560),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x42c6a187),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x2df42a60),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0e),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x3d),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0xcf32),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0xd790),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x1097),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x44af),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xa34e),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xaf54),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\xf9\x8a\x40\x1d\x83\xac\x00\x53\xd2\xbc\xda\xb3\x08\x00\xa6\xcf\x82\x46\x90\xef\x80\x00\x6c\x06\x9c\x86\x4a\x8e\x67\x69\xf3\xac\x85\x53\x0b\x74\xf5\x60\x42\xc6\xa1\x87\x2d\xf4\x2a\x60\xe0\xbd\xcf\x32\xd7\x90\x10\x97\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test261(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x32db591d823a
            srcAddr = 0x8e70588d254f
            etherType = 0x0800
        ipv4 =
            version = 0x5
            ihl = 0x6
            diffserv = 0x48
            totalLen = 0x6ecf
            identification = 0x4cfe
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0xfc
            protocol = 0x06
            hdrChecksum = 0x75a9
            srcAddr = 0xa929e03e
            dstAddr = 0xbd9f17af
        tcp =
            srcPort = 0xdbc3
            dstPort = 0x3fef
            seqNo = 0x6663f3bd
            ackNo = 0xca136f92
            dataOffset = 0x0
            res = 0b011
            ecn = 0b110
            ctrl = 0b111000
            window = 0xbb7e
            checksum = 0x6625
            urgentPtr = 0x7eab
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xf25b),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xa929e03e),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xbd9f17af),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x32\xdb\x59\x1d\x82\x3a',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x8e\x70\x58\x8d\x25\x4f',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0d7d),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x99ec),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x05),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x06),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x48),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x6ecf),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x4cfe),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xfc),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x75a9),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xbd9f17af),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xa929e03e),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xdbc3),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x3fef),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x6663f3bd),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0xca136f92),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x00),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x38),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0xbb7e),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x6625),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x7eab),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x89d3),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x8752),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x6073),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0178),), 0))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x32\xdb\x59\x1d\x82\x3a\x8e\x70\x58\x8d\x25\x4f\x08\x00\x56\x48\x6e\xcf\x4c\xfe\xc0\x00\xfc\x06\x75\xa9\xa9\x29\xe0\x3e\xbd\x9f\x17\xaf\xdb\xc3\x3f\xef\x66\x63\xf3\xbd\xca\x13\x6f\x92\x07\xb8\xbb\x7e\x66\x25\x7e\xab\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test262(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0x7a4b2cea3e72
            srcAddr = 0xb9fddbe804e7
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0xf
            diffserv = 0x96
            totalLen = 0x427e
            identification = 0x598e
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0xda
            protocol = 0x06
            hdrChecksum = 0x2dde
            srcAddr = 0xe60a293a
            dstAddr = 0xe75d1586
        tcp =
            srcPort = 0xefcf
            dstPort = 0xf3b2
            seqNo = 0x2cc55c55
            ackNo = 0x971d54ac
            dataOffset = 0x1
            res = 0b001
            ecn = 0b110
            ctrl = 0b111100
            window = 0x5b38
            checksum = 0x335d
            urgentPtr = 0x8b74
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 4:
        ethernet =
            dstAddr = 0x7a4b2cea3e72
            srcAddr = 0xb9fddbe804e7
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0xf
            diffserv = 0x96
            totalLen = 0x427e
            identification = 0xac02
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0xda
            protocol = 0x06
            hdrChecksum = 0x7bb8
            srcAddr = 0xe60a293a
            dstAddr = 0xe75d1586
        tcp =
            srcPort = 0xefcf
            dstPort = 0xf3b2
            seqNo = 0x2cc55c55
            ackNo = 0x971d54ac
            dataOffset = 0x1
            res = 0b001
            ecn = 0b110
            ctrl = 0b111100
            window = 0x5b38
            checksum = 0x335d
            urgentPtr = 0x8b74
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xac02),
                action_egress_port = hex_to_i16(0x0004),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xe60a293a),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xe75d1586),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x7a\x4b\x2c\xea\x3e\x72',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xb9\xfd\xdb\xe8\x04\xe7',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x01a8),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xc3af),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x04),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0f),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x96),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x427e),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x598e),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x03),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xda),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x2dde),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xe75d1586),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xe60a293a),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xefcf),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0xf3b2),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x2cc55c55),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x971d54ac),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x01),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x01),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x3c),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x5b38),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x335d),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x8b74),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xbcbf),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x8798),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xfadc),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x00b1),), 0))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\x7a\x4b\x2c\xea\x3e\x72\xb9\xfd\xdb\xe8\x04\xe7\x08\x00\x4f\x96\x42\x7e\x59\x8e\x60\x00\xda\x06\x2d\xde\xe6\x0a\x29\x3a\xe7\x5d\x15\x86\xef\xcf\xf3\xb2\x2c\xc5\x5c\x55\x97\x1d\x54\xac\x13\xbc\x5b\x38\x33\x5d\x8b\x74\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 4
        exp_pkt = b'\x7a\x4b\x2c\xea\x3e\x72\xb9\xfd\xdb\xe8\x04\xe7\x08\x00\x4f\x96\x42\x7e\xac\x02\x60\x00\xda\x06\x7b\xb8\xe6\x0a\x29\x3a\xe7\x5d\x15\x86\xef\xcf\xf3\xb2\x2c\xc5\x5c\x55\x97\x1d\x54\xac\x13\xbc\x5b\x38\x33\x5d\x8b\x74\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test263(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0x2150c594b6f5
            srcAddr = 0x7f05958d9f23
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0xd
            diffserv = 0x11
            totalLen = 0x0e43
            identification = 0x733c
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0xbe
            protocol = 0x06
            hdrChecksum = 0xabf5
            srcAddr = 0x1c1da8e6
            dstAddr = 0x296763bb
        tcp =
            srcPort = 0x8ed1
            dstPort = 0xd69e
            seqNo = 0xb0750230
            ackNo = 0x32f35841
            dataOffset = 0xc
            res = 0b111
            ecn = 0b110
            ctrl = 0b110100
            window = 0x155d
            checksum = 0xcc99
            urgentPtr = 0xee4c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x2150c594b6f5
            srcAddr = 0x7f05958d9f23
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0xd
            diffserv = 0x11
            totalLen = 0x0e43
            identification = 0x733c
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0xbe
            protocol = 0x06
            hdrChecksum = 0x6142
            srcAddr = 0x1c1da8e6
            dstAddr = 0x296763bb
        tcp =
            srcPort = 0x8ed1
            dstPort = 0xd69e
            seqNo = 0xb0750230
            ackNo = 0x32f35841
            dataOffset = 0xc
            res = 0b111
            ecn = 0b110
            ctrl = 0b110100
            window = 0x155d
            checksum = 0xcc99
            urgentPtr = 0xee4c
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x1c1da8e6),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x296763bb),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x21\x50\xc5\x94\xb6\xf5',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x7f\x05\x95\x8d\x9f\x23',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0fbc),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x520e),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x00),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0d),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x11),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x0e43),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x733c),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xbe),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xabf5),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x296763bb),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x1c1da8e6),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x8ed1),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0xd69e),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0xb0750230),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x32f35841),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0c),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x34),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x155d),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0xcc99),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0xee4c),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xc10e),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xd648),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x3b41),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),), 0))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\x21\x50\xc5\x94\xb6\xf5\x7f\x05\x95\x8d\x9f\x23\x08\x00\x0d\x11\x0e\x43\x73\x3c\x00\x00\xbe\x06\xab\xf5\x1c\x1d\xa8\xe6\x29\x67\x63\xbb\x8e\xd1\xd6\x9e\xb0\x75\x02\x30\x32\xf3\x58\x41\xcf\xb4\x15\x5d\xcc\x99\xee\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x21\x50\xc5\x94\xb6\xf5\x7f\x05\x95\x8d\x9f\x23\x08\x00\x0d\x11\x0e\x43\x73\x3c\x00\x00\xbe\x06\x61\x42\x1c\x1d\xa8\xe6\x29\x67\x63\xbb\x8e\xd1\xd6\x9e\xb0\x75\x02\x30\x32\xf3\x58\x41\xcf\xb4\x15\x5d\xcc\x99\xee\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test264(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0xea912470d98b
            srcAddr = 0xc188718aa7f6
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0xd
            diffserv = 0x4b
            totalLen = 0xbf21
            identification = 0x9375
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0xd4
            protocol = 0x06
            hdrChecksum = 0xddbc
            srcAddr = 0x640a38d5
            dstAddr = 0x1d10cfc6
        tcp =
            srcPort = 0xf26e
            dstPort = 0x6b88
            seqNo = 0xf9cb8119
            ackNo = 0x1bb3927c
            dataOffset = 0x8
            res = 0b000
            ecn = 0b110
            ctrl = 0b100011
            window = 0x78a1
            checksum = 0x77b7
            urgentPtr = 0x20e3
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x640a38d5),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x1d10cfc6),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xea\x91\x24\x70\xd9\x8b',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xc1\x88\x71\x8a\xa7\xf6',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0341),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x4372),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x06),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0d),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x4b),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xbf21),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x9375),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xd4),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xddbc),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x1d10cfc6),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x640a38d5),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xf26e),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x6b88),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0xf9cb8119),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x1bb3927c),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x08),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x23),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x78a1),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x77b7),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x20e3),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xd747),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x45c7),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xf3c5),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\xea\x91\x24\x70\xd9\x8b\xc1\x88\x71\x8a\xa7\xf6\x08\x00\x6d\x4b\xbf\x21\x93\x75\xc0\x00\xd4\x06\xdd\xbc\x64\x0a\x38\xd5\x1d\x10\xcf\xc6\xf2\x6e\x6b\x88\xf9\xcb\x81\x19\x1b\xb3\x92\x7c\x81\xa3\x78\xa1\x77\xb7\x20\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test265(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x3a4de32889d1
            srcAddr = 0xd7bc999a0975
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0xb
            diffserv = 0xed
            totalLen = 0x57ca
            identification = 0xcd2c
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0xdb
            protocol = 0x06
            hdrChecksum = 0x2079
            srcAddr = 0x662f3831
            dstAddr = 0x801d7233
        tcp =
            srcPort = 0xd73c
            dstPort = 0xc722
            seqNo = 0x7729f9eb
            ackNo = 0xcd8dccf3
            dataOffset = 0x0
            res = 0b011
            ecn = 0b010
            ctrl = 0b101010
            window = 0x56f1
            checksum = 0x5596
            urgentPtr = 0x1f40
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x801d7233),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x3a\x4d\xe3\x28\x89\xd1',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xd7\xbc\x99\x9a\x09\x75',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x05),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0121),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xc16f),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0f),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0b),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xed),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x57ca),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xcd2c),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x04),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xdb),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x2079),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x801d7233),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x662f3831),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xd73c),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0xc722),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x7729f9eb),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0xcd8dccf3),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x00),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x2a),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x56f1),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x5596),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x1f40),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x3536),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x178f),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xb566),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0124),), 0))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x3a\x4d\xe3\x28\x89\xd1\xd7\xbc\x99\x9a\x09\x75\x08\x00\xfb\xed\x57\xca\xcd\x2c\x80\x00\xdb\x06\x20\x79\x66\x2f\x38\x31\x80\x1d\x72\x33\xd7\x3c\xc7\x22\x77\x29\xf9\xeb\xcd\x8d\xcc\xf3\x06\xaa\x56\xf1\x55\x96\x1f\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test266(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x3204904381b2
            srcAddr = 0x675b2023b3fc
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0xa
            diffserv = 0x5d
            totalLen = 0x0824
            identification = 0x8b00
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0xaa
            protocol = 0x06
            hdrChecksum = 0x0ae2
            srcAddr = 0x56fdf4c8
            dstAddr = 0x9df7d9eb
        tcp =
            srcPort = 0x430b
            dstPort = 0x1e40
            seqNo = 0xd0374ea9
            ackNo = 0xe52ed439
            dataOffset = 0xd
            res = 0b100
            ecn = 0b111
            ctrl = 0b100011
            window = 0x9109
            checksum = 0xe3b6
            urgentPtr = 0x3f7d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 6:
        ethernet =
            dstAddr = 0x3204904381b2
            srcAddr = 0x675b2023b3fc
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0xa
            diffserv = 0x5d
            totalLen = 0x0824
            identification = 0x8b00
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0xaa
            protocol = 0x06
            hdrChecksum = 0x74cd
            srcAddr = 0x56fdf4c8
            dstAddr = 0x9df7d9eb
        tcp =
            srcPort = 0x430b
            dstPort = 0x1e40
            seqNo = 0xd0374ea9
            ackNo = 0xe52ed439
            dataOffset = 0xd
            res = 0b100
            ecn = 0b111
            ctrl = 0b100011
            window = 0x9109
            checksum = 0xe3b6
            urgentPtr = 0x3f7d
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x9df7d9eb),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0006),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x32\x04\x90\x43\x81\xb2',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x67\x5b\x20\x23\xb3\xfc',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x05),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0504),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x74cb),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x00),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0a),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x5d),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x0824),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x8b00),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x04),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xaa),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x0ae2),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x9df7d9eb),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x56fdf4c8),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x430b),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x1e40),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0xd0374ea9),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0xe52ed439),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0d),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x23),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x9109),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0xe3b6),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x3f7d),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xa4f3),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x6fbb),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x30bf),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x012c),), 0))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x32\x04\x90\x43\x81\xb2\x67\x5b\x20\x23\xb3\xfc\x08\x00\x0a\x5d\x08\x24\x8b\x00\x80\x00\xaa\x06\x0a\xe2\x56\xfd\xf4\xc8\x9d\xf7\xd9\xeb\x43\x0b\x1e\x40\xd0\x37\x4e\xa9\xe5\x2e\xd4\x39\xd9\xe3\x91\x09\xe3\xb6\x3f\x7d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 6
        exp_pkt = b'\x32\x04\x90\x43\x81\xb2\x67\x5b\x20\x23\xb3\xfc\x08\x00\x0a\x5d\x08\x24\x8b\x00\x80\x00\xaa\x06\x74\xcd\x56\xfd\xf4\xc8\x9d\xf7\xd9\xeb\x43\x0b\x1e\x40\xd0\x37\x4e\xa9\xe5\x2e\xd4\x39\xd9\xe3\x91\x09\xe3\xb6\x3f\x7d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test267(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x557709c304e5
            srcAddr = 0x9577c7c6a955
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0xb
            diffserv = 0x47
            totalLen = 0x208b
            identification = 0x3a27
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0x7e
            protocol = 0x06
            hdrChecksum = 0xd108
            srcAddr = 0xdaa94038
            dstAddr = 0x1d29fb5f
        tcp =
            srcPort = 0x9f30
            dstPort = 0xf786
            seqNo = 0xb824027e
            ackNo = 0x7cec2efa
            dataOffset = 0xf
            res = 0b001
            ecn = 0b101
            ctrl = 0b100110
            window = 0x85b7
            checksum = 0x05bc
            urgentPtr = 0x6011
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 5:
        ethernet =
            dstAddr = 0x557709c304e5
            srcAddr = 0x9577c7c6a955
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0xb
            diffserv = 0x47
            totalLen = 0x208b
            identification = 0x14ca
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0x7e
            protocol = 0x06
            hdrChecksum = 0xfdf0
            srcAddr = 0xdaa94038
            dstAddr = 0x1d29fb5f
        tcp =
            srcPort = 0x9f30
            dstPort = 0xf786
            seqNo = 0xb824027e
            ackNo = 0x7cec2efa
            dataOffset = 0xf
            res = 0b001
            ecn = 0b101
            ctrl = 0b100110
            window = 0x85b7
            checksum = 0x05bc
            urgentPtr = 0x6011
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x14ca),
                action_egress_port = hex_to_i16(0x0005),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xdaa94038),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x1d29fb5f),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x007c),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x55\x77\x09\xc3\x04\xe5',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x95\x77\xc7\xc6\xa9\x55',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x01ab),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xecc8),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0f),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0b),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x47),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x208b),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x3a27),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x7e),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xd108),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x1d29fb5f),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xdaa94038),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x9f30),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0xf786),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0xb824027e),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x7cec2efa),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x01),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x05),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x26),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x85b7),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x05bc),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x6011),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xc685),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x41c9),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x0791),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x000c),), 0))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x55\x77\x09\xc3\x04\xe5\x95\x77\xc7\xc6\xa9\x55\x08\x00\xfb\x47\x20\x8b\x3a\x27\x20\x00\x7e\x06\xd1\x08\xda\xa9\x40\x38\x1d\x29\xfb\x5f\x9f\x30\xf7\x86\xb8\x24\x02\x7e\x7c\xec\x2e\xfa\xf3\x66\x85\xb7\x05\xbc\x60\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 5
        exp_pkt = b'\x55\x77\x09\xc3\x04\xe5\x95\x77\xc7\xc6\xa9\x55\x08\x00\xfb\x47\x20\x8b\x14\xca\x20\x00\x7e\x06\xfd\xf0\xda\xa9\x40\x38\x1d\x29\xfb\x5f\x9f\x30\xf7\x86\xb8\x24\x02\x7e\x7c\xec\x2e\xfa\xf3\x66\x85\xb7\x05\xbc\x60\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test268(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x2907e7fe2019
            srcAddr = 0xa6dcf08dc0a1
            etherType = 0x0800
        ipv4 =
            version = 0xe
            ihl = 0x4
            diffserv = 0x15
            totalLen = 0x56d1
            identification = 0x4d02
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0x20
            protocol = 0x06
            hdrChecksum = 0x0fc4
            srcAddr = 0xbdd9ac6e
            dstAddr = 0x0968b62b
        tcp =
            srcPort = 0xa4b4
            dstPort = 0x88ae
            seqNo = 0x3d96b4d1
            ackNo = 0x64b9d12c
            dataOffset = 0x6
            res = 0b010
            ecn = 0b010
            ctrl = 0b111101
            window = 0xac86
            checksum = 0xecb7
            urgentPtr = 0xb9de
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x52f6),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xbdd9ac6e),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x0968b62b),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01df),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x29\x07\xe7\xfe\x20\x19',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xa6\xdc\xf0\x8d\xc0\xa1',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0121),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x8717),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0e),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x04),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x15),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x56d1),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x4d02),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x04),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x20),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x0fc4),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x0968b62b),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xbdd9ac6e),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xa4b4),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x88ae),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x3d96b4d1),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x64b9d12c),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x06),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x3d),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0xac86),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0xecb7),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0xb9de),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xc1ca),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x0b0f),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xa87e),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x019e),), 0))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x29\x07\xe7\xfe\x20\x19\xa6\xdc\xf0\x8d\xc0\xa1\x08\x00\xe4\x15\x56\xd1\x4d\x02\x80\x00\x20\x06\x0f\xc4\xbd\xd9\xac\x6e\x09\x68\xb6\x2b\xa4\xb4\x88\xae\x3d\x96\xb4\xd1\x64\xb9\xd1\x2c\x64\xbd\xac\x86\xec\xb7\xb9\xde\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test269(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x9f039277ee02
            srcAddr = 0x50d34ed1063b
            etherType = 0x0800
        ipv4 =
            version = 0x5
            ihl = 0x4
            diffserv = 0xdc
            totalLen = 0x9835
            identification = 0x5588
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0xbe
            protocol = 0x06
            hdrChecksum = 0x4532
            srcAddr = 0x86ff5749
            dstAddr = 0x04f583e9
        tcp =
            srcPort = 0x7b26
            dstPort = 0x4cfe
            seqNo = 0x7c4e166e
            ackNo = 0x1325f1d3
            dataOffset = 0xf
            res = 0b111
            ecn = 0b110
            ctrl = 0b000110
            window = 0x3feb
            checksum = 0xbf66
            urgentPtr = 0x4db8
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x86ff5749),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x04f583e9),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x9f\x03\x92\x77\xee\x02',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x50\xd3\x4e\xd1\x06\x3b',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x05),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0b76),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xe12f),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x05),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x04),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xdc),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x9835),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x5588),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xbe),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x4532),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x04f583e9),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x86ff5749),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x7b26),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x4cfe),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x7c4e166e),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x1325f1d3),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x06),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x3feb),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0xbf66),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x4db8),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xaf50),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xac99),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x6442),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0004),), 0))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x9f\x03\x92\x77\xee\x02\x50\xd3\x4e\xd1\x06\x3b\x08\x00\x54\xdc\x98\x35\x55\x88\x20\x00\xbe\x06\x45\x32\x86\xff\x57\x49\x04\xf5\x83\xe9\x7b\x26\x4c\xfe\x7c\x4e\x16\x6e\x13\x25\xf1\xd3\xff\x86\x3f\xeb\xbf\x66\x4d\xb8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test270(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x8001e6cb5d03
            srcAddr = 0x85b151634a04
            etherType = 0x0800
        ipv4 =
            version = 0x5
            ihl = 0x3
            diffserv = 0x86
            totalLen = 0xcf57
            identification = 0x7d9b
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0xd9
            protocol = 0x06
            hdrChecksum = 0xfdc2
            srcAddr = 0x10a06683
            dstAddr = 0xf07fa585
        tcp =
            srcPort = 0xb6bb
            dstPort = 0xcec2
            seqNo = 0xc585d54e
            ackNo = 0x4060ae05
            dataOffset = 0xf
            res = 0b110
            ecn = 0b001
            ctrl = 0b100100
            window = 0x6ce8
            checksum = 0x4edc
            urgentPtr = 0x784f
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 9:
        ethernet =
            dstAddr = 0x8001e6cb5d03
            srcAddr = 0x85b151634a04
            etherType = 0x0800
        ipv4 =
            version = 0x5
            ihl = 0x3
            diffserv = 0x86
            totalLen = 0xcf57
            identification = 0x7d9b
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0xd9
            protocol = 0x06
            hdrChecksum = 0x7956
            srcAddr = 0x10a06683
            dstAddr = 0xf07fa585
        tcp =
            srcPort = 0xb6bb
            dstPort = 0xcec2
            seqNo = 0xc585d54e
            ackNo = 0x4060ae05
            dataOffset = 0xf
            res = 0b110
            ecn = 0b001
            ctrl = 0b100100
            window = 0x6ce8
            checksum = 0x4edc
            urgentPtr = 0x784f
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x10a06683),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xf07fa585),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0009),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x80\x01\xe6\xcb\x5d\x03',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x85\xb1\x51\x63\x4a\x04',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0815),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xb779),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x05),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x03),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x86),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xcf57),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x7d9b),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xd9),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xfdc2),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xf07fa585),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x10a06683),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xb6bb),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0xcec2),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0xc585d54e),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x4060ae05),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x24),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x6ce8),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x4edc),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x784f),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x2409),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x5962),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x882e),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0088),), 0))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x80\x01\xe6\xcb\x5d\x03\x85\xb1\x51\x63\x4a\x04\x08\x00\x53\x86\xcf\x57\x7d\x9b\x00\x00\xd9\x06\xfd\xc2\x10\xa0\x66\x83\xf0\x7f\xa5\x85\xb6\xbb\xce\xc2\xc5\x85\xd5\x4e\x40\x60\xae\x05\xfc\x64\x6c\xe8\x4e\xdc\x78\x4f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 9
        exp_pkt = b'\x80\x01\xe6\xcb\x5d\x03\x85\xb1\x51\x63\x4a\x04\x08\x00\x53\x86\xcf\x57\x7d\x9b\x00\x00\xd9\x06\x79\x56\x10\xa0\x66\x83\xf0\x7f\xa5\x85\xb6\xbb\xce\xc2\xc5\x85\xd5\x4e\x40\x60\xae\x05\xfc\x64\x6c\xe8\x4e\xdc\x78\x4f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test271(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xb8399fc9a7d6
            srcAddr = 0x03a4bed91788
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0x2
            diffserv = 0x7c
            totalLen = 0xb7d2
            identification = 0xbff1
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0x24
            protocol = 0x06
            hdrChecksum = 0x07e5
            srcAddr = 0x8629de7e
            dstAddr = 0x8e248af6
        tcp =
            srcPort = 0xa2df
            dstPort = 0x15cb
            seqNo = 0x787d0d8e
            ackNo = 0x0833c8cf
            dataOffset = 0x8
            res = 0b111
            ecn = 0b110
            ctrl = 0b100101
            window = 0x13e0
            checksum = 0x41e3
            urgentPtr = 0x81ac
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xb8\x39\x9f\xc9\xa7\xd6',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x03\xa4\xbe\xd9\x17\x88',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0419),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x25e1),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0f),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x02),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x7c),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xb7d2),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xbff1),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x05),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x24),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x07e5),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x8e248af6),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x8629de7e),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xa2df),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x15cb),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x787d0d8e),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x0833c8cf),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x08),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x25),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x13e0),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x41e3),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x81ac),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x5811),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x49dc),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x60e3),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xb8\x39\x9f\xc9\xa7\xd6\x03\xa4\xbe\xd9\x17\x88\x08\x00\xf2\x7c\xb7\xd2\xbf\xf1\xa0\x00\x24\x06\x07\xe5\x86\x29\xde\x7e\x8e\x24\x8a\xf6\xa2\xdf\x15\xcb\x78\x7d\x0d\x8e\x08\x33\xc8\xcf\x8f\xa5\x13\xe0\x41\xe3\x81\xac\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test272(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0xd61a15169b41
            srcAddr = 0xfbb023e4b588
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0x2
            diffserv = 0x7d
            totalLen = 0x1ee3
            identification = 0x0fbd
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0x39
            protocol = 0x06
            hdrChecksum = 0x09ff
            srcAddr = 0xf69400e9
            dstAddr = 0xc627c08b
        tcp =
            srcPort = 0x4ea8
            dstPort = 0x027c
            seqNo = 0xece768ba
            ackNo = 0x041cbec0
            dataOffset = 0xf
            res = 0b110
            ecn = 0b011
            ctrl = 0b100000
            window = 0x8532
            checksum = 0x32e0
            urgentPtr = 0x781c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 9:
        ethernet =
            dstAddr = 0xd61a15169b41
            srcAddr = 0xfbb023e4b588
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0x2
            diffserv = 0x7d
            totalLen = 0x1ee3
            identification = 0x0fbd
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0x39
            protocol = 0x06
            hdrChecksum = 0x97aa
            srcAddr = 0xf69400e9
            dstAddr = 0xc627c08b
        tcp =
            srcPort = 0x4ea8
            dstPort = 0x027c
            seqNo = 0xece768ba
            ackNo = 0x041cbec0
            dataOffset = 0xf
            res = 0b110
            ecn = 0b011
            ctrl = 0b100000
            window = 0x8532
            checksum = 0x32e0
            urgentPtr = 0x781c
    """
    
    def setupCtrlPlane(self):
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xd6\x1a\x15\x16\x9b\x41',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xfb\xb0\x23\xe4\xb5\x88',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0914),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x64ef),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x04),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x02),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x7d),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x1ee3),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x0fbd),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x39),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x09ff),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xc627c08b),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xf69400e9),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x4ea8),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x027c),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0xece768ba),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x041cbec0),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x03),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x20),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x8532),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x32e0),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x781c),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xc35a),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x077e),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xb769),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0009),), 0))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\xd6\x1a\x15\x16\x9b\x41\xfb\xb0\x23\xe4\xb5\x88\x08\x00\x42\x7d\x1e\xe3\x0f\xbd\x40\x00\x39\x06\x09\xff\xf6\x94\x00\xe9\xc6\x27\xc0\x8b\x4e\xa8\x02\x7c\xec\xe7\x68\xba\x04\x1c\xbe\xc0\xfc\xe0\x85\x32\x32\xe0\x78\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 9
        exp_pkt = b'\xd6\x1a\x15\x16\x9b\x41\xfb\xb0\x23\xe4\xb5\x88\x08\x00\x42\x7d\x1e\xe3\x0f\xbd\x40\x00\x39\x06\x97\xaa\xf6\x94\x00\xe9\xc6\x27\xc0\x8b\x4e\xa8\x02\x7c\xec\xe7\x68\xba\x04\x1c\xbe\xc0\xfc\xe0\x85\x32\x32\xe0\x78\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test273(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0xc46612e49e79
            srcAddr = 0x627093e384ac
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0xb
            diffserv = 0x49
            totalLen = 0x53ea
            identification = 0x7c5d
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0x7b
            protocol = 0x06
            hdrChecksum = 0x44b3
            srcAddr = 0xc68c8fe1
            dstAddr = 0xa703dc4f
        tcp =
            srcPort = 0x16ed
            dstPort = 0x0309
            seqNo = 0x9e16c3ed
            ackNo = 0xb46b9d1a
            dataOffset = 0x1
            res = 0b010
            ecn = 0b100
            ctrl = 0b110110
            window = 0x873a
            checksum = 0x32eb
            urgentPtr = 0x2277
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x9c28),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xc68c8fe1),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xc4\x66\x12\xe4\x9e\x79',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x62\x70\x93\xe3\x84\xac',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0364),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x8ee0),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x06),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0b),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x49),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x53ea),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x7c5d),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x7b),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x44b3),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xa703dc4f),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xc68c8fe1),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x16ed),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x0309),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x9e16c3ed),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0xb46b9d1a),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x01),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x36),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x873a),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x32eb),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x2277),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x1245),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xe1d0),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xb982),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x00ac),), 0))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\xc4\x66\x12\xe4\x9e\x79\x62\x70\x93\xe3\x84\xac\x08\x00\x6b\x49\x53\xea\x7c\x5d\xe0\x00\x7b\x06\x44\xb3\xc6\x8c\x8f\xe1\xa7\x03\xdc\x4f\x16\xed\x03\x09\x9e\x16\xc3\xed\xb4\x6b\x9d\x1a\x15\x36\x87\x3a\x32\xeb\x22\x77\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test274(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xbf2ae4349076
            srcAddr = 0xf518ef00f26d
            etherType = 0x0800
        ipv4 =
            version = 0xc
            ihl = 0x9
            diffserv = 0x25
            totalLen = 0x055f
            identification = 0x1b05
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0x99
            protocol = 0x06
            hdrChecksum = 0xed1e
            srcAddr = 0x0fa1b293
            dstAddr = 0x5f136946
        tcp =
            srcPort = 0xfd09
            dstPort = 0x9201
            seqNo = 0x1dc19b40
            ackNo = 0x1c6be125
            dataOffset = 0x2
            res = 0b000
            ecn = 0b001
            ctrl = 0b100010
            window = 0x3beb
            checksum = 0x225d
            urgentPtr = 0xbb8e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 12:
        ethernet =
            dstAddr = 0xbf2ae4349076
            srcAddr = 0xf518ef00f26d
            etherType = 0x0800
        ipv4 =
            version = 0xc
            ihl = 0x9
            diffserv = 0x25
            totalLen = 0x055f
            identification = 0x02e1
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0x99
            protocol = 0x06
            hdrChecksum = 0x4b04
            srcAddr = 0x0fa1b293
            dstAddr = 0x5f136946
        tcp =
            srcPort = 0xfd09
            dstPort = 0x9201
            seqNo = 0x1dc19b40
            ackNo = 0x1c6be125
            dataOffset = 0x2
            res = 0b000
            ecn = 0b001
            ctrl = 0b100010
            window = 0x3beb
            checksum = 0x225d
            urgentPtr = 0xbb8e
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x02e1),
                action_egress_port = hex_to_i16(0x000c),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x0fa1b293),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xbf\x2a\xe4\x34\x90\x76',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xf5\x18\xef\x00\xf2\x6d',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x063d),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xbcf4),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0c),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x09),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x25),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x055f),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x1b05),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x99),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xed1e),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x5f136946),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x0fa1b293),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xfd09),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x9201),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x1dc19b40),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x1c6be125),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x02),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x22),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x3beb),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x225d),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0xbb8e),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x01a3),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x146a),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x119e),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0163),), 0))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xbf\x2a\xe4\x34\x90\x76\xf5\x18\xef\x00\xf2\x6d\x08\x00\xc9\x25\x05\x5f\x1b\x05\xc0\x00\x99\x06\xed\x1e\x0f\xa1\xb2\x93\x5f\x13\x69\x46\xfd\x09\x92\x01\x1d\xc1\x9b\x40\x1c\x6b\xe1\x25\x20\x62\x3b\xeb\x22\x5d\xbb\x8e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 12
        exp_pkt = b'\xbf\x2a\xe4\x34\x90\x76\xf5\x18\xef\x00\xf2\x6d\x08\x00\xc9\x25\x05\x5f\x02\xe1\xc0\x00\x99\x06\x4b\x04\x0f\xa1\xb2\x93\x5f\x13\x69\x46\xfd\x09\x92\x01\x1d\xc1\x9b\x40\x1c\x6b\xe1\x25\x20\x62\x3b\xeb\x22\x5d\xbb\x8e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test275(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x0ac9852d8a54
            srcAddr = 0xa16fa23350ad
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0x2
            diffserv = 0xb5
            totalLen = 0x2d41
            identification = 0x2a55
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0xac
            protocol = 0x06
            hdrChecksum = 0xb168
            srcAddr = 0x12884d39
            dstAddr = 0xbc3790ff
        tcp =
            srcPort = 0xa0db
            dstPort = 0x6b63
            seqNo = 0x10cb4154
            ackNo = 0x0d999223
            dataOffset = 0x0
            res = 0b000
            ecn = 0b010
            ctrl = 0b010101
            window = 0xd495
            checksum = 0x6a64
            urgentPtr = 0x70f4
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 5:
        ethernet =
            dstAddr = 0x0ac9852d8a54
            srcAddr = 0xa16fa23350ad
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0x2
            diffserv = 0xb5
            totalLen = 0x2d41
            identification = 0x2a55
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0xac
            protocol = 0x06
            hdrChecksum = 0x2cb4
            srcAddr = 0x12884d39
            dstAddr = 0xbc3790ff
        tcp =
            srcPort = 0xa0db
            dstPort = 0x6b63
            seqNo = 0x10cb4154
            ackNo = 0x0d999223
            dataOffset = 0x0
            res = 0b000
            ecn = 0b010
            ctrl = 0b010101
            window = 0xd495
            checksum = 0x6a64
            urgentPtr = 0x70f4
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x12884d39),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x0a\xc9\x85\x2d\x8a\x54',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xa1\x6f\xa2\x33\x50\xad',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x05),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0687),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x58ac),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x06),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x02),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xb5),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x2d41),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x2a55),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xac),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xb168),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xbc3790ff),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x12884d39),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xa0db),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x6b63),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x10cb4154),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x0d999223),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x00),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x15),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0xd495),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x6a64),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x70f4),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xb693),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xb5d1),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x70ba),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0005),), 0))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x0a\xc9\x85\x2d\x8a\x54\xa1\x6f\xa2\x33\x50\xad\x08\x00\x62\xb5\x2d\x41\x2a\x55\xc0\x00\xac\x06\xb1\x68\x12\x88\x4d\x39\xbc\x37\x90\xff\xa0\xdb\x6b\x63\x10\xcb\x41\x54\x0d\x99\x92\x23\x00\x95\xd4\x95\x6a\x64\x70\xf4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 5
        exp_pkt = b'\x0a\xc9\x85\x2d\x8a\x54\xa1\x6f\xa2\x33\x50\xad\x08\x00\x62\xb5\x2d\x41\x2a\x55\xc0\x00\xac\x06\x2c\xb4\x12\x88\x4d\x39\xbc\x37\x90\xff\xa0\xdb\x6b\x63\x10\xcb\x41\x54\x0d\x99\x92\x23\x00\x95\xd4\x95\x6a\x64\x70\xf4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test276(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xc831bb8ec762
            srcAddr = 0x81714a81e29b
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0x9
            diffserv = 0x73
            totalLen = 0xb3c9
            identification = 0x417c
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0x9e
            protocol = 0x06
            hdrChecksum = 0xb8e7
            srcAddr = 0xff3e62f7
            dstAddr = 0x107e4044
        tcp =
            srcPort = 0xe097
            dstPort = 0x5afe
            seqNo = 0xc85b1245
            ackNo = 0x2560f918
            dataOffset = 0xe
            res = 0b111
            ecn = 0b000
            ctrl = 0b001100
            window = 0x2e91
            checksum = 0x00a2
            urgentPtr = 0x66f4
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xff3e62f7),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xc8\x31\xbb\x8e\xc7\x62',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x81\x71\x4a\x81\xe2\x9b',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0563),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x03be),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x00),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x09),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x73),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xb3c9),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x417c),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x9e),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xb8e7),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x107e4044),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xff3e62f7),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xe097),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x5afe),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0xc85b1245),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x2560f918),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0e),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x0c),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x2e91),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x00a2),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x66f4),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xb85f),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x2af6),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xcd68),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xc8\x31\xbb\x8e\xc7\x62\x81\x71\x4a\x81\xe2\x9b\x08\x00\x09\x73\xb3\xc9\x41\x7c\x00\x00\x9e\x06\xb8\xe7\xff\x3e\x62\xf7\x10\x7e\x40\x44\xe0\x97\x5a\xfe\xc8\x5b\x12\x45\x25\x60\xf9\x18\xee\x0c\x2e\x91\x00\xa2\x66\xf4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test277(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0xe36e54aeaf55
            srcAddr = 0xc2f64d414a8a
            etherType = 0x0800
        ipv4 =
            version = 0xe
            ihl = 0xc
            diffserv = 0x19
            totalLen = 0xe8c7
            identification = 0xf90d
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0xd1
            protocol = 0x06
            hdrChecksum = 0x8c98
            srcAddr = 0x0c54c5ea
            dstAddr = 0x21ddaf95
        tcp =
            srcPort = 0x93a6
            dstPort = 0xa0de
            seqNo = 0x8c188f07
            ackNo = 0x5af8327b
            dataOffset = 0xd
            res = 0b100
            ecn = 0b100
            ctrl = 0b111110
            window = 0x1a00
            checksum = 0xb16a
            urgentPtr = 0xc663
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x21ddaf95),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xe3\x6e\x54\xae\xaf\x55',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xc2\xf6\x4d\x41\x4a\x8a',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x05),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0dcb),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xe35d),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0e),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0c),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x19),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xe8c7),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xf90d),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xd1),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x8c98),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x21ddaf95),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x0c54c5ea),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x93a6),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0xa0de),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x8c188f07),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x5af8327b),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0d),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x3e),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x1a00),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0xb16a),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0xc663),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x566f),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x90e7),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x5296),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\xe3\x6e\x54\xae\xaf\x55\xc2\xf6\x4d\x41\x4a\x8a\x08\x00\xec\x19\xe8\xc7\xf9\x0d\x40\x00\xd1\x06\x8c\x98\x0c\x54\xc5\xea\x21\xdd\xaf\x95\x93\xa6\xa0\xde\x8c\x18\x8f\x07\x5a\xf8\x32\x7b\xd9\x3e\x1a\x00\xb1\x6a\xc6\x63\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test278(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0xea5750fd3112
            srcAddr = 0x43cf2f56911d
            etherType = 0x0800
        ipv4 =
            version = 0x4
            ihl = 0x3
            diffserv = 0x5b
            totalLen = 0x7889
            identification = 0xd670
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0xe4
            protocol = 0x06
            hdrChecksum = 0x416a
            srcAddr = 0x1f53f2aa
            dstAddr = 0x735f7d8e
        tcp =
            srcPort = 0x1846
            dstPort = 0x5cbf
            seqNo = 0x0c137535
            ackNo = 0x2e6e198f
            dataOffset = 0x9
            res = 0b100
            ecn = 0b000
            ctrl = 0b111011
            window = 0xeeeb
            checksum = 0x468c
            urgentPtr = 0x26e1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xce10),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x1f53f2aa),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x735f7d8e),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xea\x57\x50\xfd\x31\x12',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x43\xcf\x2f\x56\x91\x1d',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x05),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0e8e),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xd833),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x04),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x03),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x5b),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x7889),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xd670),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x03),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xe4),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x416a),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x735f7d8e),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x1f53f2aa),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x1846),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x5cbf),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x0c137535),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x2e6e198f),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x09),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x3b),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0xeeeb),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x468c),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x26e1),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xe823),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x65b9),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x4fe2),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\xea\x57\x50\xfd\x31\x12\x43\xcf\x2f\x56\x91\x1d\x08\x00\x43\x5b\x78\x89\xd6\x70\x60\x00\xe4\x06\x41\x6a\x1f\x53\xf2\xaa\x73\x5f\x7d\x8e\x18\x46\x5c\xbf\x0c\x13\x75\x35\x2e\x6e\x19\x8f\x98\x3b\xee\xeb\x46\x8c\x26\xe1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test279(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0xa70e61ef6a96
            srcAddr = 0x080c8bbe170e
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0x1
            diffserv = 0x6e
            totalLen = 0x80b3
            identification = 0x6ce3
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0x1c
            protocol = 0x06
            hdrChecksum = 0x79c1
            srcAddr = 0x4721132b
            dstAddr = 0x89995606
        tcp =
            srcPort = 0xb42f
            dstPort = 0x04c3
            seqNo = 0x6641e107
            ackNo = 0x22d713d5
            dataOffset = 0x5
            res = 0b110
            ecn = 0b100
            ctrl = 0b111000
            window = 0x9017
            checksum = 0x97b9
            urgentPtr = 0x89f1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xa70e61ef6a96
            srcAddr = 0x080c8bbe170e
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0x1
            diffserv = 0x6e
            totalLen = 0x80b3
            identification = 0x2549
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0x1c
            protocol = 0x06
            hdrChecksum = 0x62a2
            srcAddr = 0x4721132b
            dstAddr = 0x89995606
        tcp =
            srcPort = 0xb42f
            dstPort = 0x04c3
            seqNo = 0x6641e107
            ackNo = 0x22d713d5
            dataOffset = 0x5
            res = 0b110
            ecn = 0b100
            ctrl = 0b111000
            window = 0x9017
            checksum = 0x97b9
            urgentPtr = 0x89f1
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x2549),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x4721132b),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x89995606),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xa7\x0e\x61\xef\x6a\x96',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x08\x0c\x8b\xbe\x17\x0e',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0ff2),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x867c),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x06),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x01),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x6e),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x80b3),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x6ce3),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x1c),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x79c1),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x89995606),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x4721132b),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xb42f),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x04c3),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x6641e107),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x22d713d5),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x05),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x38),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x9017),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x97b9),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x89f1),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xdb46),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xc019),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xe3b7),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\xa7\x0e\x61\xef\x6a\x96\x08\x0c\x8b\xbe\x17\x0e\x08\x00\x61\x6e\x80\xb3\x6c\xe3\x40\x00\x1c\x06\x79\xc1\x47\x21\x13\x2b\x89\x99\x56\x06\xb4\x2f\x04\xc3\x66\x41\xe1\x07\x22\xd7\x13\xd5\x5d\x38\x90\x17\x97\xb9\x89\xf1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xa7\x0e\x61\xef\x6a\x96\x08\x0c\x8b\xbe\x17\x0e\x08\x00\x61\x6e\x80\xb3\x25\x49\x40\x00\x1c\x06\x62\xa2\x47\x21\x13\x2b\x89\x99\x56\x06\xb4\x2f\x04\xc3\x66\x41\xe1\x07\x22\xd7\x13\xd5\x5d\x38\x90\x17\x97\xb9\x89\xf1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test280(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0x222cb7f63a88
            srcAddr = 0xea67699e2b23
            etherType = 0x0800
        ipv4 =
            version = 0xb
            ihl = 0x7
            diffserv = 0xce
            totalLen = 0x292c
            identification = 0xee2c
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0x25
            protocol = 0x06
            hdrChecksum = 0x794c
            srcAddr = 0x5bbff3b9
            dstAddr = 0x6f550baf
        tcp =
            srcPort = 0x431b
            dstPort = 0x85c8
            seqNo = 0x8468f8e7
            ackNo = 0xb03a64db
            dataOffset = 0xd
            res = 0b011
            ecn = 0b001
            ctrl = 0b100100
            window = 0xc3c7
            checksum = 0x8eed
            urgentPtr = 0x2cee
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x5bbff3b9),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x6f550baf),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x22\x2c\xb7\xf6\x3a\x88',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xea\x67\x69\x9e\x2b\x23',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0d05),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x5f58),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0b),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x07),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xce),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x292c),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xee2c),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x25),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x794c),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x6f550baf),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x5bbff3b9),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x431b),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x85c8),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x8468f8e7),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0xb03a64db),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0d),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x24),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0xc3c7),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x8eed),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x2cee),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x8a56),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xee78),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xf267),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\x22\x2c\xb7\xf6\x3a\x88\xea\x67\x69\x9e\x2b\x23\x08\x00\xb7\xce\x29\x2c\xee\x2c\xe0\x00\x25\x06\x79\x4c\x5b\xbf\xf3\xb9\x6f\x55\x0b\xaf\x43\x1b\x85\xc8\x84\x68\xf8\xe7\xb0\x3a\x64\xdb\xd6\x64\xc3\xc7\x8e\xed\x2c\xee\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test281(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x584c723240b0
            srcAddr = 0xabd11d5e1b48
            etherType = 0x0800
        ipv4 =
            version = 0x7
            ihl = 0x6
            diffserv = 0x31
            totalLen = 0x983e
            identification = 0xdca2
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0x73
            protocol = 0x06
            hdrChecksum = 0xd796
            srcAddr = 0x246bcd51
            dstAddr = 0x74ded955
        tcp =
            srcPort = 0x2332
            dstPort = 0x16d0
            seqNo = 0x2481f7c6
            ackNo = 0x874ba4f9
            dataOffset = 0x2
            res = 0b010
            ecn = 0b100
            ctrl = 0b001000
            window = 0xd76b
            checksum = 0x8251
            urgentPtr = 0x8eeb
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x74ded955),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x58\x4c\x72\x32\x40\xb0',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xab\xd1\x1d\x5e\x1b\x48',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0b9a),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x8033),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x07),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x06),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x31),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x983e),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xdca2),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x04),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x73),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xd796),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x74ded955),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x246bcd51),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x2332),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x16d0),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x2481f7c6),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x874ba4f9),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x02),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x08),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0xd76b),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x8251),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x8eeb),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x27a2),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x7358),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x4c2a),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x58\x4c\x72\x32\x40\xb0\xab\xd1\x1d\x5e\x1b\x48\x08\x00\x76\x31\x98\x3e\xdc\xa2\x80\x00\x73\x06\xd7\x96\x24\x6b\xcd\x51\x74\xde\xd9\x55\x23\x32\x16\xd0\x24\x81\xf7\xc6\x87\x4b\xa4\xf9\x25\x08\xd7\x6b\x82\x51\x8e\xeb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test282(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x2252c650b4b8
            srcAddr = 0xa7515304879b
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0xd
            diffserv = 0x03
            totalLen = 0x2b13
            identification = 0xf0f7
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0xe6
            protocol = 0x06
            hdrChecksum = 0x733c
            srcAddr = 0x112acf1a
            dstAddr = 0xfa87790e
        tcp =
            srcPort = 0xbe45
            dstPort = 0x66e2
            seqNo = 0x7c3a9ec8
            ackNo = 0x0725feb5
            dataOffset = 0xe
            res = 0b000
            ecn = 0b101
            ctrl = 0b111100
            window = 0x3a8e
            checksum = 0xc1b9
            urgentPtr = 0x6467
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x2252c650b4b8
            srcAddr = 0xa7515304879b
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0xd
            diffserv = 0x03
            totalLen = 0x2b13
            identification = 0xf0f7
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0xe6
            protocol = 0x06
            hdrChecksum = 0x3d0e
            srcAddr = 0x112acf1a
            dstAddr = 0xfa87790e
        tcp =
            srcPort = 0xbe45
            dstPort = 0x66e2
            seqNo = 0x7c3a9ec8
            ackNo = 0x0725feb5
            dataOffset = 0xe
            res = 0b000
            ecn = 0b101
            ctrl = 0b111100
            window = 0x3a8e
            checksum = 0xc1b9
            urgentPtr = 0x6467
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xfa87790e),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0040),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x22\x52\xc6\x50\xb4\xb8',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xa7\x51\x53\x04\x87\x9b',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x05f2),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x35a6),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0a),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0d),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x03),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x2b13),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xf0f7),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xe6),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x733c),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xfa87790e),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x112acf1a),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xbe45),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x66e2),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x7c3a9ec8),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x0725feb5),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0e),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x05),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x3c),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x3a8e),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0xc1b9),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x6467),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x5f6e),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x60ab),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x63bb),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x22\x52\xc6\x50\xb4\xb8\xa7\x51\x53\x04\x87\x9b\x08\x00\xad\x03\x2b\x13\xf0\xf7\xc0\x00\xe6\x06\x73\x3c\x11\x2a\xcf\x1a\xfa\x87\x79\x0e\xbe\x45\x66\xe2\x7c\x3a\x9e\xc8\x07\x25\xfe\xb5\xe1\x7c\x3a\x8e\xc1\xb9\x64\x67\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x22\x52\xc6\x50\xb4\xb8\xa7\x51\x53\x04\x87\x9b\x08\x00\xad\x03\x2b\x13\xf0\xf7\xc0\x00\xe6\x06\x3d\x0e\x11\x2a\xcf\x1a\xfa\x87\x79\x0e\xbe\x45\x66\xe2\x7c\x3a\x9e\xc8\x07\x25\xfe\xb5\xe1\x7c\x3a\x8e\xc1\xb9\x64\x67\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test283(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x8c37f39f8f83
            srcAddr = 0x8dcc8264f16e
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x0
            diffserv = 0xfe
            totalLen = 0xf713
            identification = 0xef46
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0xdc
            protocol = 0x06
            hdrChecksum = 0x945d
            srcAddr = 0x1cef4b88
            dstAddr = 0x65ac1849
        tcp =
            srcPort = 0xd73f
            dstPort = 0x5d63
            seqNo = 0xebfd19bc
            ackNo = 0xec0a020e
            dataOffset = 0x4
            res = 0b010
            ecn = 0b100
            ctrl = 0b001001
            window = 0x921e
            checksum = 0x4642
            urgentPtr = 0xaccb
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 1:
        ethernet =
            dstAddr = 0x8c37f39f8f83
            srcAddr = 0x8dcc8264f16e
            etherType = 0x0800
        ipv4 =
            version = 0xa
            ihl = 0x0
            diffserv = 0xfe
            totalLen = 0xf713
            identification = 0x3170
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0xdc
            protocol = 0x06
            hdrChecksum = 0x9408
            srcAddr = 0x1cef4b88
            dstAddr = 0x65ac1849
        tcp =
            srcPort = 0xd73f
            dstPort = 0x5d63
            seqNo = 0xebfd19bc
            ackNo = 0xec0a020e
            dataOffset = 0x4
            res = 0b010
            ecn = 0b100
            ctrl = 0b001001
            window = 0x921e
            checksum = 0x4642
            urgentPtr = 0xaccb
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x3170),
                action_egress_port = hex_to_i16(0x0001),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x1cef4b88),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x65ac1849),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x007e),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x8c\x37\xf3\x9f\x8f\x83',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x8d\xcc\x82\x64\xf1\x6e',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0813),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xf2b1),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0a),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x00),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xfe),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0xf713),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xef46),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xdc),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x945d),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x65ac1849),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x1cef4b88),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xd73f),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x5d63),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0xebfd19bc),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0xec0a020e),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x04),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x09),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x921e),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x4642),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0xaccb),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xa680),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x64db),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xc51e),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x8c\x37\xf3\x9f\x8f\x83\x8d\xcc\x82\x64\xf1\x6e\x08\x00\xa0\xfe\xf7\x13\xef\x46\xe0\x00\xdc\x06\x94\x5d\x1c\xef\x4b\x88\x65\xac\x18\x49\xd7\x3f\x5d\x63\xeb\xfd\x19\xbc\xec\x0a\x02\x0e\x45\x09\x92\x1e\x46\x42\xac\xcb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 1
        exp_pkt = b'\x8c\x37\xf3\x9f\x8f\x83\x8d\xcc\x82\x64\xf1\x6e\x08\x00\xa0\xfe\xf7\x13\x31\x70\xe0\x00\xdc\x06\x94\x08\x1c\xef\x4b\x88\x65\xac\x18\x49\xd7\x3f\x5d\x63\xeb\xfd\x19\xbc\xec\x0a\x02\x0e\x45\x09\x92\x1e\x46\x42\xac\xcb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test284(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x5eb342fd5409
            srcAddr = 0x5854c578e560
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0x7
            diffserv = 0x78
            totalLen = 0x3071
            identification = 0x8bf5
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0x08
            protocol = 0x06
            hdrChecksum = 0xbcaa
            srcAddr = 0x1dbee697
            dstAddr = 0xf695a81c
        tcp =
            srcPort = 0x4895
            dstPort = 0x9656
            seqNo = 0x33682023
            ackNo = 0xe6091142
            dataOffset = 0x3
            res = 0b111
            ecn = 0b100
            ctrl = 0b101101
            window = 0x8fe5
            checksum = 0x4232
            urgentPtr = 0xa142
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x4402),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x1dbee697),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xf695a81c),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01c0),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x5e\xb3\x42\xfd\x54\x09',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x58\x54\xc5\x78\xe5\x60',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x05),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x088e),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x353d),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x02),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x07),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x78),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x3071),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x8bf5),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x02),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x08),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xbcaa),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xf695a81c),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x1dbee697),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x4895),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x9656),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x33682023),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0xe6091142),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x03),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x2d),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x8fe5),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x4232),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0xa142),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x89c5),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x9764),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x661f),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x5e\xb3\x42\xfd\x54\x09\x58\x54\xc5\x78\xe5\x60\x08\x00\x27\x78\x30\x71\x8b\xf5\x40\x00\x08\x06\xbc\xaa\x1d\xbe\xe6\x97\xf6\x95\xa8\x1c\x48\x95\x96\x56\x33\x68\x20\x23\xe6\x09\x11\x42\x3f\x2d\x8f\xe5\x42\x32\xa1\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test285(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x42722d41ed5f
            srcAddr = 0x43f58f725d56
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0x7
            diffserv = 0xf9
            totalLen = 0x25a5
            identification = 0x3bd8
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0x89
            protocol = 0x06
            hdrChecksum = 0x244d
            srcAddr = 0xb6365fb4
            dstAddr = 0x08121436
        tcp =
            srcPort = 0xd8a4
            dstPort = 0x2cc2
            seqNo = 0xcf7cc45e
            ackNo = 0x6a768c95
            dataOffset = 0xe
            res = 0b101
            ecn = 0b100
            ctrl = 0b011001
            window = 0xa642
            checksum = 0x27c5
            urgentPtr = 0x1f03
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xb6365fb4),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x08121436),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x42\x72\x2d\x41\xed\x5f',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x43\xf5\x8f\x72\x5d\x56',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0a0c),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xf109),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x06),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x07),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xf9),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x25a5),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x3bd8),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x89),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x244d),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x08121436),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0xb6365fb4),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xd8a4),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x2cc2),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0xcf7cc45e),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x6a768c95),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0e),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x05),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x19),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0xa642),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x27c5),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x1f03),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xc886),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xe20c),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x1a82),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x42\x72\x2d\x41\xed\x5f\x43\xf5\x8f\x72\x5d\x56\x08\x00\x67\xf9\x25\xa5\x3b\xd8\x00\x00\x89\x06\x24\x4d\xb6\x36\x5f\xb4\x08\x12\x14\x36\xd8\xa4\x2c\xc2\xcf\x7c\xc4\x5e\x6a\x76\x8c\x95\xeb\x19\xa6\x42\x27\xc5\x1f\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test286(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x9f2439ca7548
            srcAddr = 0x0772636fb12a
            etherType = 0x0800
        ipv4 =
            version = 0x8
            ihl = 0x2
            diffserv = 0x4c
            totalLen = 0x6187
            identification = 0x8813
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0x3b
            protocol = 0x06
            hdrChecksum = 0xe0d6
            srcAddr = 0x6d17b1f6
            dstAddr = 0xc0a2e0a2
        tcp =
            srcPort = 0x8595
            dstPort = 0x3289
            seqNo = 0xaca650ad
            ackNo = 0xa0b797b1
            dataOffset = 0x0
            res = 0b100
            ecn = 0b001
            ctrl = 0b010000
            window = 0x07e8
            checksum = 0x7cff
            urgentPtr = 0x386c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x9f2439ca7548
            srcAddr = 0x0772636fb12a
            etherType = 0x0800
        ipv4 =
            version = 0x8
            ihl = 0x2
            diffserv = 0x4c
            totalLen = 0x6187
            identification = 0x8813
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0x3b
            protocol = 0x06
            hdrChecksum = 0x18be
            srcAddr = 0x6d17b1f6
            dstAddr = 0xc0a2e0a2
        tcp =
            srcPort = 0x8595
            dstPort = 0x3289
            seqNo = 0xaca650ad
            ackNo = 0xa0b797b1
            dataOffset = 0x0
            res = 0b100
            ecn = 0b001
            ctrl = 0b010000
            window = 0x07e8
            checksum = 0x7cff
            urgentPtr = 0x386c
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x6d17b1f6),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xc0a2e0a2),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0040),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x9f\x24\x39\xca\x75\x48',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x07\x72\x63\x6f\xb1\x2a',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x00),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x08f7),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x320b),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x08),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x02),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x4c),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x6187),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x8813),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x04),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x3b),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xe0d6),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xc0a2e0a2),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x6d17b1f6),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x8595),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x3289),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0xaca650ad),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0xa0b797b1),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x00),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x10),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x07e8),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x7cff),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x386c),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x433d),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x99ba),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xf206),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x9f\x24\x39\xca\x75\x48\x07\x72\x63\x6f\xb1\x2a\x08\x00\x82\x4c\x61\x87\x88\x13\x80\x00\x3b\x06\xe0\xd6\x6d\x17\xb1\xf6\xc0\xa2\xe0\xa2\x85\x95\x32\x89\xac\xa6\x50\xad\xa0\xb7\x97\xb1\x08\x50\x07\xe8\x7c\xff\x38\x6c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x9f\x24\x39\xca\x75\x48\x07\x72\x63\x6f\xb1\x2a\x08\x00\x82\x4c\x61\x87\x88\x13\x80\x00\x3b\x06\x18\xbe\x6d\x17\xb1\xf6\xc0\xa2\xe0\xa2\x85\x95\x32\x89\xac\xa6\x50\xad\xa0\xb7\x97\xb1\x08\x50\x07\xe8\x7c\xff\x38\x6c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test287(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x025b459ce4d2
            srcAddr = 0xef2e87dccf47
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0x3
            diffserv = 0xce
            totalLen = 0x9437
            identification = 0x3a4e
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0xbf
            protocol = 0x06
            hdrChecksum = 0x2c84
            srcAddr = 0x4b8e4365
            dstAddr = 0x9f697b2e
        tcp =
            srcPort = 0xcac2
            dstPort = 0xe57d
            seqNo = 0x58c2d8bd
            ackNo = 0x1956c54b
            dataOffset = 0x5
            res = 0b011
            ecn = 0b111
            ctrl = 0b110000
            window = 0x93d4
            checksum = 0xd26d
            urgentPtr = 0xcb8a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x4b8e4365),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x02\x5b\x45\x9c\xe4\xd2',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xef\x2e\x87\xdc\xcf\x47',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x083b),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x4099),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x00),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x03),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xce),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x9437),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x3a4e),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x04),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xbf),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x2c84),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x9f697b2e),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x4b8e4365),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xcac2),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0xe57d),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x58c2d8bd),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x1956c54b),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x05),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x30),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x93d4),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0xd26d),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0xcb8a),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0x11fd),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xac43),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x14c3),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x02\x5b\x45\x9c\xe4\xd2\xef\x2e\x87\xdc\xcf\x47\x08\x00\x03\xce\x94\x37\x3a\x4e\x80\x00\xbf\x06\x2c\x84\x4b\x8e\x43\x65\x9f\x69\x7b\x2e\xca\xc2\xe5\x7d\x58\xc2\xd8\xbd\x19\x56\xc5\x4b\x57\xf0\x93\xd4\xd2\x6d\xcb\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test288(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x2de05b252955
            srcAddr = 0x7eb11672306e
            etherType = 0x0800
        ipv4 =
            version = 0xd
            ihl = 0xa
            diffserv = 0xe0
            totalLen = 0x2596
            identification = 0xae85
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0x0d
            protocol = 0x06
            hdrChecksum = 0xb4e2
            srcAddr = 0x4fbe63c2
            dstAddr = 0xb33a7a54
        tcp =
            srcPort = 0x6feb
            dstPort = 0x580e
            seqNo = 0xaad0e50e
            ackNo = 0x73f3fb0d
            dataOffset = 0xf
            res = 0b001
            ecn = 0b110
            ctrl = 0b011111
            window = 0x06c3
            checksum = 0x92b5
            urgentPtr = 0xaa54
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x0efb),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x4fbe63c2),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x2d\xe0\x5b\x25\x29\x55',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x7e\xb1\x16\x72\x30\x6e',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x033f),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x3ed5),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0d),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0a),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0xe0),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x2596),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0xae85),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0x0d),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xb4e2),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xb33a7a54),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x4fbe63c2),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x6feb),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x580e),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0xaad0e50e),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x73f3fb0d),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x01),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x1f),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x06c3),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x92b5),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0xaa54),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xfd58),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x5b88),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x7a22),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x2d\xe0\x5b\x25\x29\x55\x7e\xb1\x16\x72\x30\x6e\x08\x00\xda\xe0\x25\x96\xae\x85\x00\x00\x0d\x06\xb4\xe2\x4f\xbe\x63\xc2\xb3\x3a\x7a\x54\x6f\xeb\x58\x0e\xaa\xd0\xe5\x0e\x73\xf3\xfb\x0d\xf3\x9f\x06\xc3\x92\xb5\xaa\x54\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test289(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x45dbb8213c22
            srcAddr = 0xcaf73808bd14
            etherType = 0x0800
        ipv4 =
            version = 0x7
            ihl = 0xf
            diffserv = 0x6a
            totalLen = 0x21db
            identification = 0x5b4c
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0xf4
            protocol = 0x06
            hdrChecksum = 0xdc59
            srcAddr = 0x6deeef73
            dstAddr = 0x1f4358f2
        tcp =
            srcPort = 0x06a4
            dstPort = 0x2d82
            seqNo = 0x6682ac50
            ackNo = 0x1e8fe3b6
            dataOffset = 0xd
            res = 0b110
            ecn = 0b110
            ctrl = 0b100111
            window = 0x107e
            checksum = 0x6227
            urgentPtr = 0x26b9
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x45dbb8213c22
            srcAddr = 0xcaf73808bd14
            etherType = 0x0800
        ipv4 =
            version = 0x7
            ihl = 0xf
            diffserv = 0x6a
            totalLen = 0x21db
            identification = 0x8c84
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0xf4
            protocol = 0x06
            hdrChecksum = 0x8896
            srcAddr = 0x6deeef73
            dstAddr = 0x1f4358f2
        tcp =
            srcPort = 0x06a4
            dstPort = 0x2d82
            seqNo = 0x6682ac50
            ackNo = 0x1e8fe3b6
            dataOffset = 0xd
            res = 0b110
            ecn = 0b110
            ctrl = 0b100111
            window = 0x107e
            checksum = 0x6227
            urgentPtr = 0x26b9
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x8c84),
                action_egress_port = hex_to_i16(0x0040),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x6deeef73),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x45\xdb\xb8\x21\x3c\x22',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xca\xf7\x38\x08\xbd\x14',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x00),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0aca),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xc6d5),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x07),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x0f),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x6a),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x21db),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x5b4c),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x04),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xf4),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0xdc59),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0x1f4358f2),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x6deeef73),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0x06a4),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x2d82),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0x6682ac50),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0x1e8fe3b6),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x0d),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x27),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x107e),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0x6227),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0x26b9),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xa8c5),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xbb30),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xf94a),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x45\xdb\xb8\x21\x3c\x22\xca\xf7\x38\x08\xbd\x14\x08\x00\x7f\x6a\x21\xdb\x5b\x4c\x80\x00\xf4\x06\xdc\x59\x6d\xee\xef\x73\x1f\x43\x58\xf2\x06\xa4\x2d\x82\x66\x82\xac\x50\x1e\x8f\xe3\xb6\xdd\xa7\x10\x7e\x62\x27\x26\xb9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x45\xdb\xb8\x21\x3c\x22\xca\xf7\x38\x08\xbd\x14\x08\x00\x7f\x6a\x21\xdb\x8c\x84\x80\x00\xf4\x06\x88\x96\x6d\xee\xef\x73\x1f\x43\x58\xf2\x06\xa4\x2d\x82\x66\x82\xac\x50\x1e\x8f\xe3\xb6\xdd\xa7\x10\x7e\x62\x27\x26\xb9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test290(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x0c4778ab5c5d
            srcAddr = 0xe30443f698f7
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0x4
            diffserv = 0x47
            totalLen = 0x699d
            identification = 0x520f
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0xe5
            protocol = 0x06
            hdrChecksum = 0x1712
            srcAddr = 0x97935639
            dstAddr = 0xa93a80b4
        tcp =
            srcPort = 0xef71
            dstPort = 0x1129
            seqNo = 0xee9a39bd
            ackNo = 0xe90cd11e
            dataOffset = 0x2
            res = 0b100
            ecn = 0b101
            ctrl = 0b101001
            window = 0x8e18
            checksum = 0xcd31
            urgentPtr = 0xaa9e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x0c\x47\x78\xab\x5c\x5d',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xe3\x04\x43\xf6\x98\xf7',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x0800),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x05),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x02e0),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x34f7),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x00),
            ipv4_version_mask = hex_to_byte(0x0f),
            ipv4_ihl = hex_to_byte(0x04),
            ipv4_ihl_mask = hex_to_byte(0x0f),
            ipv4_diffserv = hex_to_byte(0x47),
            ipv4_diffserv_mask = hex_to_byte(0xff),
            ipv4_totalLen = hex_to_i16(0x699d),
            ipv4_totalLen_mask = hex_to_i16(0xffff),
            ipv4_identification = hex_to_i16(0x520f),
            ipv4_identification_mask = hex_to_i16(0xffff),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x07),
            ipv4_fragOffset = hex_to_i16(0x0000),
            ipv4_fragOffset_mask = hex_to_i16(0x1fff),
            ipv4_ttl = hex_to_byte(0xe5),
            ipv4_ttl_mask = hex_to_byte(0xff),
            ipv4_protocol = hex_to_byte(0x06),
            ipv4_protocol_mask = hex_to_byte(0xff),
            ipv4_hdrChecksum = hex_to_i16(0x1712),
            ipv4_hdrChecksum_mask = hex_to_i16(0xffff),
            ipv4_dstAddr = hex_to_i32(0xa93a80b4),
            ipv4_dstAddr_prefix_length = 32,
            ipv4_srcAddr = hex_to_i32(0x97935639),
            ipv4_srcAddr_mask = hex_to_i32(0xffffffff),
            tcp_srcPort = hex_to_i16(0xef71),
            tcp_srcPort_mask = hex_to_i16(0xffff),
            tcp_dstPort = hex_to_i16(0x1129),
            tcp_dstPort_mask = hex_to_i16(0xffff),
            tcp_seqNo = hex_to_i32(0xee9a39bd),
            tcp_seqNo_mask = hex_to_i32(0xffffffff),
            tcp_ackNo = hex_to_i32(0xe90cd11e),
            tcp_ackNo_mask = hex_to_i32(0xffffffff),
            tcp_dataOffset = hex_to_byte(0x02),
            tcp_dataOffset_mask = hex_to_byte(0x0f),
            tcp_res = hex_to_byte(0x04),
            tcp_res_mask = hex_to_byte(0x07),
            tcp_ecn = hex_to_byte(0x05),
            tcp_ecn_mask = hex_to_byte(0x07),
            tcp_ctrl = hex_to_byte(0x29),
            tcp_ctrl_mask = hex_to_byte(0x3f),
            tcp_window = hex_to_i16(0x8e18),
            tcp_window_mask = hex_to_i16(0xffff),
            tcp_checksum = hex_to_i16(0xcd31),
            tcp_checksum_mask = hex_to_i16(0xffff),
            tcp_urgentPtr = hex_to_i16(0xaa9e),
            tcp_urgentPtr_mask = hex_to_i16(0xffff),
            udp_srcPort = hex_to_i16(0xfc94),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x19ab),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xa645),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x0c\x47\x78\xab\x5c\x5d\xe3\x04\x43\xf6\x98\xf7\x08\x00\x04\x47\x69\x9d\x52\x0f\x20\x00\xe5\x06\x17\x12\x97\x93\x56\x39\xa9\x3a\x80\xb4\xef\x71\x11\x29\xee\x9a\x39\xbd\xe9\x0c\xd1\x1e\x29\x69\x8e\x18\xcd\x31\xaa\x9e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test291(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x325ec58522fa
            srcAddr = 0x905742584391
            etherType = 0x0800
        ipv4 =
            version = 0x0
            ihl = 0xa
            diffserv = 0x37
            totalLen = 0xa2fb
            identification = 0xb4a5
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0x13
            protocol = 0x06
            hdrChecksum = 0x3e08
            srcAddr = 0x624a56d5
            dstAddr = 0x3fc82e30
        tcp =
            srcPort = 0x5d6f
            dstPort = 0x6852
            seqNo = 0x63e92ced
            ackNo = 0x0bd60d9f
            dataOffset = 0xb
            res = 0b100
            ecn = 0b000
            ctrl = 0b111011
            window = 0xba4c
            checksum = 0xc371
            urgentPtr = 0x7240
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        pass
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x32\x5e\xc5\x85\x22\xfa\x90\x57\x42\x58\x43\x91\x08\x00\x0a\x37\xa2\xfb\xb4\xa5\x20\x00\x13\x06\x3e\x08\x62\x4a\x56\xd5\x3f\xc8\x2e\x30\x5d\x6f\x68\x52\x63\xe9\x2c\xed\x0b\xd6\x0d\x9f\xb8\x3b\xba\x4c\xc3\x71\x72\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test292(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x7e12df475b8b
            srcAddr = 0xb81d7f99845e
            etherType = 0x0800
        ipv4 =
            version = 0x5
            ihl = 0xb
            diffserv = 0x61
            totalLen = 0xe3ff
            identification = 0x67ed
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0x15
            protocol = 0x06
            hdrChecksum = 0x6646
            srcAddr = 0x6fa5e212
            dstAddr = 0x54938f89
        tcp =
            srcPort = 0x4804
            dstPort = 0x8f16
            seqNo = 0xb02fc5bf
            ackNo = 0x8e91230b
            dataOffset = 0xc
            res = 0b111
            ecn = 0b100
            ctrl = 0b010100
            window = 0xe760
            checksum = 0x3fda
            urgentPtr = 0xcf43
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 12:
        ethernet =
            dstAddr = 0x7e12df475b8b
            srcAddr = 0xb81d7f99845e
            etherType = 0x0800
        ipv4 =
            version = 0x5
            ihl = 0xb
            diffserv = 0x61
            totalLen = 0xe3ff
            identification = 0xffc8
            flags = 0b001
            fragOffset = 0b0000000000000
            ttl = 0x15
            protocol = 0x06
            hdrChecksum = 0x55fa
            srcAddr = 0x6fa5e212
            dstAddr = 0x54938f89
        tcp =
            srcPort = 0x4804
            dstPort = 0x8f16
            seqNo = 0xb02fc5bf
            ackNo = 0x8e91230b
            dataOffset = 0xc
            res = 0b111
            ecn = 0b100
            ctrl = 0b010100
            window = 0xe760
            checksum = 0x3fda
            urgentPtr = 0xcf43
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xffc8),
                action_egress_port = hex_to_i16(0x000c),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x6fa5e212),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x7e\x12\xdf\x47\x5b\x8b\xb8\x1d\x7f\x99\x84\x5e\x08\x00\x5b\x61\xe3\xff\x67\xed\x20\x00\x15\x06\x66\x46\x6f\xa5\xe2\x12\x54\x93\x8f\x89\x48\x04\x8f\x16\xb0\x2f\xc5\xbf\x8e\x91\x23\x0b\xcf\x14\xe7\x60\x3f\xda\xcf\x43\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 12
        exp_pkt = b'\x7e\x12\xdf\x47\x5b\x8b\xb8\x1d\x7f\x99\x84\x5e\x08\x00\x5b\x61\xe3\xff\xff\xc8\x20\x00\x15\x06\x55\xfa\x6f\xa5\xe2\x12\x54\x93\x8f\x89\x48\x04\x8f\x16\xb0\x2f\xc5\xbf\x8e\x91\x23\x0b\xcf\x14\xe7\x60\x3f\xda\xcf\x43\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test293(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x316da0039b5d
            srcAddr = 0x44b7d62367ae
            etherType = 0x0800
        ipv4 =
            version = 0x7
            ihl = 0xe
            diffserv = 0x68
            totalLen = 0x3f6b
            identification = 0xb61f
            flags = 0b010
            fragOffset = 0b0000000000000
            ttl = 0x45
            protocol = 0x06
            hdrChecksum = 0x467f
            srcAddr = 0xd434b8ee
            dstAddr = 0x31050147
        tcp =
            srcPort = 0xfc8c
            dstPort = 0x47b8
            seqNo = 0xca3c3dcd
            ackNo = 0x8f90f5c8
            dataOffset = 0x1
            res = 0b110
            ecn = 0b111
            ctrl = 0b001111
            window = 0x3b9d
            checksum = 0x23b5
            urgentPtr = 0xddf0
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x3c45),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xd434b8ee),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x31\x6d\xa0\x03\x9b\x5d\x44\xb7\xd6\x23\x67\xae\x08\x00\x7e\x68\x3f\x6b\xb6\x1f\x40\x00\x45\x06\x46\x7f\xd4\x34\xb8\xee\x31\x05\x01\x47\xfc\x8c\x47\xb8\xca\x3c\x3d\xcd\x8f\x90\xf5\xc8\x1d\xcf\x3b\x9d\x23\xb5\xdd\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test294(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0xebd05a9a1ea2
            srcAddr = 0xb991ca558572
            etherType = 0x0800
        ipv4 =
            version = 0x8
            ihl = 0xa
            diffserv = 0x8b
            totalLen = 0xdfdf
            identification = 0x2e40
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0xb3
            protocol = 0x06
            hdrChecksum = 0x7eec
            srcAddr = 0x8e3f31d9
            dstAddr = 0x84fd89da
        tcp =
            srcPort = 0xbc77
            dstPort = 0x7fd6
            seqNo = 0xeac96d86
            ackNo = 0xd058f7dd
            dataOffset = 0x7
            res = 0b100
            ecn = 0b100
            ctrl = 0b111110
            window = 0x1333
            checksum = 0xf813
            urgentPtr = 0x9488
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x8e3f31d9),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\xeb\xd0\x5a\x9a\x1e\xa2\xb9\x91\xca\x55\x85\x72\x08\x00\x8a\x8b\xdf\xdf\x2e\x40\x00\x00\xb3\x06\x7e\xec\x8e\x3f\x31\xd9\x84\xfd\x89\xda\xbc\x77\x7f\xd6\xea\xc9\x6d\x86\xd0\x58\xf7\xdd\x79\x3e\x13\x33\xf8\x13\x94\x88\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test295(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xd2412ac90ea9
            srcAddr = 0xef918af224ad
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0x5
            diffserv = 0x26
            totalLen = 0xeacd
            identification = 0x50f7
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0xbf
            protocol = 0x06
            hdrChecksum = 0x0dea
            srcAddr = 0xa9cb1872
            dstAddr = 0x17feac7f
        tcp =
            srcPort = 0xa00d
            dstPort = 0x2de0
            seqNo = 0x59669ccc
            ackNo = 0xd339a758
            dataOffset = 0x5
            res = 0b011
            ecn = 0b000
            ctrl = 0b111111
            window = 0x8abb
            checksum = 0x7147
            urgentPtr = 0x2874
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 0:
        ethernet =
            dstAddr = 0xd2412ac90ea9
            srcAddr = 0xef918af224ad
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0x5
            diffserv = 0x26
            totalLen = 0xeacd
            identification = 0x9afb
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0xbf
            protocol = 0x06
            hdrChecksum = 0xdf4c
            srcAddr = 0xa9cb1872
            dstAddr = 0x17feac7f
        tcp =
            srcPort = 0xa00d
            dstPort = 0x2de0
            seqNo = 0x59669ccc
            ackNo = 0xd339a758
            dataOffset = 0x5
            res = 0b011
            ecn = 0b000
            ctrl = 0b111111
            window = 0x8abb
            checksum = 0x7147
            urgentPtr = 0x2874
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x9afb),
                action_egress_port = hex_to_i16(0x0000),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xa9cb1872),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x17feac7f),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xd2\x41\x2a\xc9\x0e\xa9\xef\x91\x8a\xf2\x24\xad\x08\x00\xf5\x26\xea\xcd\x50\xf7\x60\x00\xbf\x06\x0d\xea\xa9\xcb\x18\x72\x17\xfe\xac\x7f\xa0\x0d\x2d\xe0\x59\x66\x9c\xcc\xd3\x39\xa7\x58\x56\x3f\x8a\xbb\x71\x47\x28\x74\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 0
        exp_pkt = b'\xd2\x41\x2a\xc9\x0e\xa9\xef\x91\x8a\xf2\x24\xad\x08\x00\xf5\x26\xea\xcd\x9a\xfb\x60\x00\xbf\x06\xdf\x4c\xa9\xcb\x18\x72\x17\xfe\xac\x7f\xa0\x0d\x2d\xe0\x59\x66\x9c\xcc\xd3\x39\xa7\x58\x56\x3f\x8a\xbb\x71\x47\x28\x74\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test296(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x4ea2f07bc3f2
            srcAddr = 0x7822314aa3f8
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0x6
            diffserv = 0xec
            totalLen = 0x290a
            identification = 0x0d5f
            flags = 0b110
            fragOffset = 0b0000000000000
            ttl = 0x6c
            protocol = 0x06
            hdrChecksum = 0xe774
            srcAddr = 0x9e2221f2
            dstAddr = 0x6d294abe
        tcp =
            srcPort = 0x4615
            dstPort = 0xf171
            seqNo = 0xeef09e8b
            ackNo = 0xc2a4f0a0
            dataOffset = 0xb
            res = 0b110
            ecn = 0b111
            ctrl = 0b010011
            window = 0x8126
            checksum = 0x0eee
            urgentPtr = 0xa222
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xf26c),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x9e2221f2),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x6d294abe),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x4e\xa2\xf0\x7b\xc3\xf2\x78\x22\x31\x4a\xa3\xf8\x08\x00\x26\xec\x29\x0a\x0d\x5f\xc0\x00\x6c\x06\xe7\x74\x9e\x22\x21\xf2\x6d\x29\x4a\xbe\x46\x15\xf1\x71\xee\xf0\x9e\x8b\xc2\xa4\xf0\xa0\xbd\xd3\x81\x26\x0e\xee\xa2\x22\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test297(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x965b0c67b73a
            srcAddr = 0x65bae281fce0
            etherType = 0x0800
        ipv4 =
            version = 0xf
            ihl = 0x7
            diffserv = 0x19
            totalLen = 0x4f0e
            identification = 0x4cb2
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0xbe
            protocol = 0x06
            hdrChecksum = 0x14b0
            srcAddr = 0xa70dde30
            dstAddr = 0x1371822b
        tcp =
            srcPort = 0xe396
            dstPort = 0x526e
            seqNo = 0x2067b420
            ackNo = 0x03a21c0e
            dataOffset = 0xb
            res = 0b101
            ecn = 0b100
            ctrl = 0b110000
            window = 0x48a1
            checksum = 0xa1dc
            urgentPtr = 0x94a8
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xa70dde30),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x1371822b),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x96\x5b\x0c\x67\xb7\x3a\x65\xba\xe2\x81\xfc\xe0\x08\x00\xf7\x19\x4f\x0e\x4c\xb2\x60\x00\xbe\x06\x14\xb0\xa7\x0d\xde\x30\x13\x71\x82\x2b\xe3\x96\x52\x6e\x20\x67\xb4\x20\x03\xa2\x1c\x0e\xbb\x30\x48\xa1\xa1\xdc\x94\xa8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test298(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x296f0d111ce6
            srcAddr = 0x163e07bb1924
            etherType = 0x0800
        ipv4 =
            version = 0x6
            ihl = 0x9
            diffserv = 0x40
            totalLen = 0x95da
            identification = 0xc896
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0x34
            protocol = 0x06
            hdrChecksum = 0x2d50
            srcAddr = 0x94524d7f
            dstAddr = 0x024e2fe1
        tcp =
            srcPort = 0x68fd
            dstPort = 0xbc92
            seqNo = 0x2a3c9334
            ackNo = 0xe243f739
            dataOffset = 0xe
            res = 0b000
            ecn = 0b011
            ctrl = 0b111110
            window = 0x29fc
            checksum = 0xa8e7
            urgentPtr = 0xfefe
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x024e2fe1),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x29\x6f\x0d\x11\x1c\xe6\x16\x3e\x07\xbb\x19\x24\x08\x00\x69\x40\x95\xda\xc8\x96\xa0\x00\x34\x06\x2d\x50\x94\x52\x4d\x7f\x02\x4e\x2f\xe1\x68\xfd\xbc\x92\x2a\x3c\x93\x34\xe2\x43\xf7\x39\xe0\xfe\x29\xfc\xa8\xe7\xfe\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test299(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x3d5aef283ca4
            srcAddr = 0xec3f1600349f
            etherType = 0x0800
        ipv4 =
            version = 0x8
            ihl = 0xd
            diffserv = 0xea
            totalLen = 0x0135
            identification = 0x6c6b
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0xb7
            protocol = 0x06
            hdrChecksum = 0x1640
            srcAddr = 0xcd7c5841
            dstAddr = 0x81adcfe0
        tcp =
            srcPort = 0xfceb
            dstPort = 0xd194
            seqNo = 0x08dfe3b9
            ackNo = 0x2b0f40d1
            dataOffset = 0x4
            res = 0b000
            ecn = 0b110
            ctrl = 0b110101
            window = 0xb75e
            checksum = 0x8a8c
            urgentPtr = 0x6246
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xcd7c5841),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x81adcfe0),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01ff),)))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x3d\x5a\xef\x28\x3c\xa4\xec\x3f\x16\x00\x34\x9f\x08\x00\x8d\xea\x01\x35\x6c\x6b\xe0\x00\xb7\x06\x16\x40\xcd\x7c\x58\x41\x81\xad\xcf\xe0\xfc\xeb\xd1\x94\x08\xdf\xe3\xb9\x2b\x0f\x40\xd1\x41\xb5\xb7\x5e\x8a\x8c\x62\x46\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test300(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xbc8fa5a4bbc3
            srcAddr = 0xc7ffc276f3d5
            etherType = 0x0800
        ipv4 =
            version = 0xb
            ihl = 0xd
            diffserv = 0x36
            totalLen = 0x9cc5
            identification = 0xd588
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0x0a
            protocol = 0x06
            hdrChecksum = 0x5868
            srcAddr = 0x0103044e
            dstAddr = 0x4bf6273a
        tcp =
            srcPort = 0xb6e3
            dstPort = 0x28f9
            seqNo = 0x60055126
            ackNo = 0x2468d41f
            dataOffset = 0x5
            res = 0b101
            ecn = 0b100
            ctrl = 0b110110
            window = 0xa545
            checksum = 0x0912
            urgentPtr = 0x7995
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 11:
        ethernet =
            dstAddr = 0xbc8fa5a4bbc3
            srcAddr = 0xc7ffc276f3d5
            etherType = 0x0800
        ipv4 =
            version = 0xb
            ihl = 0xd
            diffserv = 0x36
            totalLen = 0x9cc5
            identification = 0xd588
            flags = 0b111
            fragOffset = 0b0000000000000
            ttl = 0x0a
            protocol = 0x06
            hdrChecksum = 0x6df2
            srcAddr = 0x0103044e
            dstAddr = 0x4bf6273a
        tcp =
            srcPort = 0xb6e3
            dstPort = 0x28f9
            seqNo = 0x60055126
            ackNo = 0x2468d41f
            dataOffset = 0x5
            res = 0b101
            ecn = 0b100
            ctrl = 0b110110
            window = 0xa545
            checksum = 0x0912
            urgentPtr = 0x7995
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x0103044e),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x4bf6273a),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x000b),)))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xbc\x8f\xa5\xa4\xbb\xc3\xc7\xff\xc2\x76\xf3\xd5\x08\x00\xbd\x36\x9c\xc5\xd5\x88\xe0\x00\x0a\x06\x58\x68\x01\x03\x04\x4e\x4b\xf6\x27\x3a\xb6\xe3\x28\xf9\x60\x05\x51\x26\x24\x68\xd4\x1f\x5b\x36\xa5\x45\x09\x12\x79\x95\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 11
        exp_pkt = b'\xbc\x8f\xa5\xa4\xbb\xc3\xc7\xff\xc2\x76\xf3\xd5\x08\x00\xbd\x36\x9c\xc5\xd5\x88\xe0\x00\x0a\x06\x6d\xf2\x01\x03\x04\x4e\x4b\xf6\x27\x3a\xb6\xe3\x28\xf9\x60\x05\x51\x26\x24\x68\xd4\x1f\x5b\x36\xa5\x45\x09\x12\x79\x95\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test301(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xd9b874f3106c
            srcAddr = 0xbecd694f38c5
            etherType = 0x0800
        ipv4 =
            version = 0xb
            ihl = 0x2
            diffserv = 0x91
            totalLen = 0x8855
            identification = 0x86bf
            flags = 0b011
            fragOffset = 0b0000000000000
            ttl = 0xdf
            protocol = 0x06
            hdrChecksum = 0x338d
            srcAddr = 0x4ec35962
            dstAddr = 0xd4d55aec
        tcp =
            srcPort = 0xc48f
            dstPort = 0xaa32
            seqNo = 0xc7ddd152
            ackNo = 0xa2b8ff22
            dataOffset = 0x4
            res = 0b001
            ecn = 0b101
            ctrl = 0b000000
            window = 0x06e3
            checksum = 0x1213
            urgentPtr = 0x1404
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0x637d),
                action_egress_port = hex_to_i16(0x01ff),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x4ec35962),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xd4d55aec),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x000b),)))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xd9\xb8\x74\xf3\x10\x6c\xbe\xcd\x69\x4f\x38\xc5\x08\x00\xb2\x91\x88\x55\x86\xbf\x60\x00\xdf\x06\x33\x8d\x4e\xc3\x59\x62\xd4\xd5\x5a\xec\xc4\x8f\xaa\x32\xc7\xdd\xd1\x52\xa2\xb8\xff\x22\x43\x40\x06\xe3\x12\x13\x14\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test302(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x8c2f2cff00bb
            srcAddr = 0x24e5fad3663f
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0xa
            diffserv = 0xca
            totalLen = 0x66a7
            identification = 0xf8ae
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0x9c
            protocol = 0x06
            hdrChecksum = 0x4cbe
            srcAddr = 0xf85e0115
            dstAddr = 0x3caf1598
        tcp =
            srcPort = 0xb813
            dstPort = 0xb072
            seqNo = 0x77700913
            ackNo = 0x15d38059
            dataOffset = 0x5
            res = 0b001
            ecn = 0b110
            ctrl = 0b101110
            window = 0xb355
            checksum = 0xd629
            urgentPtr = 0x6ba2
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (set_ip_id)
    
    Egress packet on port 15:
        ethernet =
            dstAddr = 0x8c2f2cff00bb
            srcAddr = 0x24e5fad3663f
            etherType = 0x0800
        ipv4 =
            version = 0x2
            ihl = 0xa
            diffserv = 0xca
            totalLen = 0x66a7
            identification = 0xa9b1
            flags = 0b000
            fragOffset = 0b0000000000000
            ttl = 0x9c
            protocol = 0x06
            hdrChecksum = 0xdd1a
            srcAddr = 0xf85e0115
            dstAddr = 0x3caf1598
        tcp =
            srcPort = 0xb813
            dstPort = 0xb072
            seqNo = 0x77700913
            ackNo = 0x15d38059
            dataOffset = 0x5
            res = 0b001
            ecn = 0b110
            ctrl = 0b101110
            window = 0xb355
            checksum = 0xd629
            urgentPtr = 0x6ba2
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_set_ip_id(
            self.sess_hdl, self.dev_tgt,
            smoke_large_tbls_set_ip_id_action_spec_t(
                action_ip_id = hex_to_i16(0xa9b1),
                action_egress_port = hex_to_i16(0x000f),))
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xf85e0115),
                ipv4_srcAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x3caf1598),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0096),)))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x8c\x2f\x2c\xff\x00\xbb\x24\xe5\xfa\xd3\x66\x3f\x08\x00\x2a\xca\x66\xa7\xf8\xae\x00\x00\x9c\x06\x4c\xbe\xf8\x5e\x01\x15\x3c\xaf\x15\x98\xb8\x13\xb0\x72\x77\x70\x09\x13\x15\xd3\x80\x59\x53\xae\xb3\x55\xd6\x29\x6b\xa2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 15
        exp_pkt = b'\x8c\x2f\x2c\xff\x00\xbb\x24\xe5\xfa\xd3\x66\x3f\x08\x00\x2a\xca\x66\xa7\xa9\xb1\x00\x00\x9c\x06\xdd\x1a\xf8\x5e\x01\x15\x3c\xaf\x15\x98\xb8\x13\xb0\x72\x77\x70\x09\x13\x15\xd3\x80\x59\x53\xae\xb3\x55\xd6\x29\x6b\xa2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test303(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x1481ea573827
            srcAddr = 0x45777f8b0876
            etherType = 0x0800
        ipv4 =
            version = 0x8
            ihl = 0x4
            diffserv = 0xad
            totalLen = 0x3a5f
            identification = 0x87f8
            flags = 0b100
            fragOffset = 0b0000000000000
            ttl = 0x92
            protocol = 0x06
            hdrChecksum = 0x38cd
            srcAddr = 0xb26ad58b
            dstAddr = 0xede076e9
        tcp =
            srcPort = 0x3ee8
            dstPort = 0x79d8
            seqNo = 0x1c4774b9
            ackNo = 0x4d922d0e
            dataOffset = 0x6
            res = 0b001
            ecn = 0b101
            ctrl = 0b101000
            window = 0x3c67
            checksum = 0x5f17
            urgentPtr = 0xfd13
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xede076e9),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01ff),)))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x14\x81\xea\x57\x38\x27\x45\x77\x7f\x8b\x08\x76\x08\x00\x84\xad\x3a\x5f\x87\xf8\x80\x00\x92\x06\x38\xcd\xb2\x6a\xd5\x8b\xed\xe0\x76\xe9\x3e\xe8\x79\xd8\x1c\x47\x74\xb9\x4d\x92\x2d\x0e\x63\x68\x3c\x67\x5f\x17\xfd\x13\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test304(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x1f8aab8eceff
            srcAddr = 0xee87e0a79b7a
            etherType = 0x0800
        ipv4 =
            version = 0xe
            ihl = 0xb
            diffserv = 0xc9
            totalLen = 0xa4d6
            identification = 0xd774
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0xf5
            protocol = 0x06
            hdrChecksum = 0x1466
            srcAddr = 0x4ce7adf4
            dstAddr = 0x37d790e7
        tcp =
            srcPort = 0xf534
            dstPort = 0xa061
            seqNo = 0x5bbe001f
            ackNo = 0x47be379c
            dataOffset = 0xd
            res = 0b001
            ecn = 0b110
            ctrl = 0b100101
            window = 0x1f71
            checksum = 0x47ad
            urgentPtr = 0x26b2
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_ipv4
        [ Parser ] _parse_tcp
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x1f8aab8eceff
            srcAddr = 0xee87e0a79b7a
            etherType = 0x0800
        ipv4 =
            version = 0xe
            ihl = 0xb
            diffserv = 0xc9
            totalLen = 0xa4d6
            identification = 0xd774
            flags = 0b101
            fragOffset = 0b0000000000000
            ttl = 0xf5
            protocol = 0x06
            hdrChecksum = 0x3f48
            srcAddr = 0x4ce7adf4
            dstAddr = 0x37d790e7
        tcp =
            srcPort = 0xf534
            dstPort = 0xa061
            seqNo = 0x5bbe001f
            ackNo = 0x47be379c
            dataOffset = 0xd
            res = 0b001
            ecn = 0b110
            ctrl = 0b100101
            window = 0x1f71
            checksum = 0x47ad
            urgentPtr = 0x26b2
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x01),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x37d790e7),
                ipv4_dstAddr_mask = hex_to_i32(0xffffffff),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0040),)))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x1f\x8a\xab\x8e\xce\xff\xee\x87\xe0\xa7\x9b\x7a\x08\x00\xeb\xc9\xa4\xd6\xd7\x74\xa0\x00\xf5\x06\x14\x66\x4c\xe7\xad\xf4\x37\xd7\x90\xe7\xf5\x34\xa0\x61\x5b\xbe\x00\x1f\x47\xbe\x37\x9c\xd3\xa5\x1f\x71\x47\xad\x26\xb2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x1f\x8a\xab\x8e\xce\xff\xee\x87\xe0\xa7\x9b\x7a\x08\x00\xeb\xc9\xa4\xd6\xd7\x74\xa0\x00\xf5\x06\x3f\x48\x4c\xe7\xad\xf4\x37\xd7\x90\xe7\xf5\x34\xa0\x61\x5b\xbe\x00\x1f\x47\xbe\x37\x9c\xd3\xa5\x1f\x71\x47\xad\x26\xb2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test305(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0xd0a38825afe0
            srcAddr = 0xedde01a1fc22
            etherType = 0x913b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xd0\xa3\x88\x25\xaf\xe0',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xed\xde\x01\xa1\xfc\x22',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x913b),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0631),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x3be8),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x09),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x07),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x49),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0xa159),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0xe5b3),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x04e4),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0xad),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0xa4),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x151f),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0xee73fa9c),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x97ef024f),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0xa119),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xc35d),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xaf0150e7),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xaef20c2a),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0b),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x00),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xc011),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x00d6),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xbe31),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x6559),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xc4b7),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xf487),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\xd0\xa3\x88\x25\xaf\xe0\xed\xde\x01\xa1\xfc\x22\x91\x3b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test306(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0xd0a38825afe0
            srcAddr = 0xedde01a1fc22
            etherType = 0x913b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x97ef024f),
                ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xd0\xa3\x88\x25\xaf\xe0',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xed\xde\x01\xa1\xfc\x22',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x913b),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0631),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x3be8),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x09),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x07),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x49),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0xa159),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0xe5b3),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x04e4),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0xad),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0xa4),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x151f),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0xee73fa9c),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x97ef024f),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0xa119),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xc35d),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xaf0150e7),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xaef20c2a),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0b),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x00),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xc011),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x00d6),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xbe31),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x6559),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xc4b7),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xf487),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\xd0\xa3\x88\x25\xaf\xe0\xed\xde\x01\xa1\xfc\x22\x91\x3b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test307(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x720739b1393b
            srcAddr = 0x929a8231e086
            etherType = 0x5e92
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x6c8cd76b),
                ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xdc3e0ce0),
                ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x72\x07\x39\xb1\x39\x3b',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x92\x9a\x82\x31\xe0\x86',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x5e92),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0442),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x90f3),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x00),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x08),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x6f),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0x0807),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x0608),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x03),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x0b5f),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0x9c),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0x3b),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0xd3f4),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0xdc3e0ce0),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x6c8cd76b),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x81b8),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xff51),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xee71c659),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x29839bcb),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0a),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x3e),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x9520),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x2388),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xbb14),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xf7ea),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x6f2d),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x7404),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x72\x07\x39\xb1\x39\x3b\x92\x9a\x82\x31\xe0\x86\x5e\x92\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test308(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x65fabd872d34
            srcAddr = 0x05a69532c80a
            etherType = 0x7068
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x65fabd872d34
            srcAddr = 0x05a69532c80a
            etherType = 0x7068
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xda4659f2),
                ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xf36bf39f),
                ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0040),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x65\xfa\xbd\x87\x2d\x34',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x05\xa6\x95\x32\xc8\x0a',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x7068),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x08d7),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xb9fc),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0a),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x04),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x73),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0x4956),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x548c),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x1669),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0x1c),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0x7b),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0xca98),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0xf36bf39f),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0xda4659f2),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x3410),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x09ba),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xfc456608),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xabeec629),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x02),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x22),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x7172),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xa4e0),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xa899),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xd422),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xa0cd),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xf42e),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x65\xfa\xbd\x87\x2d\x34\x05\xa6\x95\x32\xc8\x0a\x70\x68\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x65\xfa\xbd\x87\x2d\x34\x05\xa6\x95\x32\xc8\x0a\x70\x68\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test309(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0x26cafd83adb0
            srcAddr = 0xf9192e5fe050
            etherType = 0xa7ea
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x66919918),
                ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x26\xca\xfd\x83\xad\xb0',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xf9\x19\x2e\x5f\xe0\x50',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0xa7ea),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0169),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xe790),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0b),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x07),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x54),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0xca20),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0xe5c5),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x18a9),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0x56),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0x1c),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0xd281),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x66919918),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x7965f469),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x775a),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x31b0),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x638f6142),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x756fef40),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x05),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x23),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x0a95),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xad4d),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x94b7),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x93a1),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x7878),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xed72),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\x26\xca\xfd\x83\xad\xb0\xf9\x19\x2e\x5f\xe0\x50\xa7\xea\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test310(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xea56c72117f0
            srcAddr = 0x98595c18e012
            etherType = 0x9c34
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xea56c72117f0
            srcAddr = 0x98595c18e012
            etherType = 0x9c34
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xe4829bef),
                ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0040),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xea\x56\xc7\x21\x17\xf0',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x98\x59\x5c\x18\xe0\x12',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x9c34),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x02),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x00f5),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xcc1e),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x07),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x0e),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0xe7),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0x8ba6),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x6953),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x05),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x1e5c),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0xf3),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0x9b),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x0e14),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0xe4829bef),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x478133d8),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0xfb4c),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xefed),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x73fddbd2),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xfc7030a0),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x08),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x01),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x11a0),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x9279),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xc39d),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x6b40),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x70cf),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x2387),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xea\x56\xc7\x21\x17\xf0\x98\x59\x5c\x18\xe0\x12\x9c\x34\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xea\x56\xc7\x21\x17\xf0\x98\x59\x5c\x18\xe0\x12\x9c\x34\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test311(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x033cdcd590ea
            srcAddr = 0x8e7ab20ea49a
            etherType = 0x1cd2
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x60f80054),
                ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x03\x3c\xdc\xd5\x90\xea',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x8e\x7a\xb2\x0e\xa4\x9a',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x1cd2),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0228),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x4deb),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x01),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x01),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x30),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0xcd3c),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x86cb),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x187c),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0xfa),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0xb2),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x9913),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x60f80054),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0xcab3410f),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x84c1),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x0ed0),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x97ca8f5d),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x66aa7c99),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x2e),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xc1bf),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xfd0f),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x819e),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xd9b7),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xdea9),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x20e6),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x03\x3c\xdc\xd5\x90\xea\x8e\x7a\xb2\x0e\xa4\x9a\x1c\xd2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test312(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x033cdcd590ea
            srcAddr = 0x8e7ab20ea49a
            etherType = 0x1cd2
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <hit> (nop)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xcab3410f),
                ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x60f80054),
                ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x03\x3c\xdc\xd5\x90\xea',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x8e\x7a\xb2\x0e\xa4\x9a',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x1cd2),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0228),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x4deb),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x01),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x01),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x30),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0xcd3c),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x86cb),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x187c),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0xfa),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0xb2),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x9913),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x60f80054),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0xcab3410f),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x84c1),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x0ed0),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x97ca8f5d),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x66aa7c99),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x2e),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xc1bf),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xfd0f),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x819e),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xd9b7),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xdea9),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x20e6),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_nop(
                self.sess_hdl, self.dev_tgt, match_spec, 0, 0))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x03\x3c\xdc\xd5\x90\xea\x8e\x7a\xb2\x0e\xa4\x9a\x1c\xd2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test313(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x328903ef5590
            srcAddr = 0x04776ea823b3
            etherType = 0x17e4
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 2:
        ethernet =
            dstAddr = 0x328903ef5590
            srcAddr = 0x04776ea823b3
            etherType = 0x17e4
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x79c1e76d),
                ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x32\x89\x03\xef\x55\x90',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x04\x77\x6e\xa8\x23\xb3',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x17e4),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0742),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xc567),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0e),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x07),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x43),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0xbd01),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x82ed),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x01),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x1dde),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0x8d),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0xd3),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x2e5c),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x79c1e76d),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x33e1005c),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0xae82),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x55a2),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x94f55313),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xd0fd2f9d),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0c),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x05),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x32),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x1b71),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x6e0c),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x746f),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x4d74),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xa189),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x7270),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0002),), 0))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x32\x89\x03\xef\x55\x90\x04\x77\x6e\xa8\x23\xb3\x17\xe4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 2
        exp_pkt = b'\x32\x89\x03\xef\x55\x90\x04\x77\x6e\xa8\x23\xb3\x17\xe4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test314(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xec6c96fe5d83
            srcAddr = 0xdd51a6044953
            etherType = 0x603c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xed084ece),
                ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xec\x6c\x96\xfe\x5d\x83',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xdd\x51\xa6\x04\x49\x53',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x603c),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x05),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0f04),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x6f4b),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x04),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x0e),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x62),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0xd516),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0xcd5d),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x0879),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0x01),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0x23),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0xd743),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0xed084ece),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x71be2562),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0xba7d),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xca11),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xfd698027),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xf909d676),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x01),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x00),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x06),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x16),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x3bff),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xa35c),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x2a2c),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xf498),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xb3a4),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xf71b),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xec\x6c\x96\xfe\x5d\x83\xdd\x51\xa6\x04\x49\x53\x60\x3c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test315(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x2762b775e24e
            srcAddr = 0x93fb12729b2d
            etherType = 0x537c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xf3a61726),
                ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x9d8ca62e),
                ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x27\x62\xb7\x75\xe2\x4e',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x93\xfb\x12\x72\x9b\x2d',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x537c),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0201),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x2c60),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x09),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x0a),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0xf1),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0xc27e),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0xe566),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x04f6),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0xeb),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0xe0),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0xadd9),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x9d8ca62e),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0xf3a61726),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x8a51),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x4ca1),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xd008b034),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x525a072a),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x03),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x06),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x05),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x3e),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xc132),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xa364),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xf30c),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xb477),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x0743),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x689b),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x27\x62\xb7\x75\xe2\x4e\x93\xfb\x12\x72\x9b\x2d\x53\x7c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test316(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x06ee83022b43
            srcAddr = 0x69a521410f7f
            etherType = 0xa6ca
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 10:
        ethernet =
            dstAddr = 0x06ee83022b43
            srcAddr = 0x69a521410f7f
            etherType = 0xa6ca
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x0b6ea5f5),
                ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x2eef027b),
                ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x06\xee\x83\x02\x2b\x43',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x69\xa5\x21\x41\x0f\x7f',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0xa6ca),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0aee),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xdf1e),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x04),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x03),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0xbc),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0x4eda),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x1187),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x03),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x1f68),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0xfb),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0x0d),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x819e),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x2eef027b),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x0b6ea5f5),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x878b),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x9651),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x055aa07e),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x0872d344),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0a),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x04),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x00),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x72b5),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x7b58),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xf578),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xdcdf),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x3e9f),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x111d),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x000a),), 0))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x06\xee\x83\x02\x2b\x43\x69\xa5\x21\x41\x0f\x7f\xa6\xca\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 10
        exp_pkt = b'\x06\xee\x83\x02\x2b\x43\x69\xa5\x21\x41\x0f\x7f\xa6\xca\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test317(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0xbb6968286ef5
            srcAddr = 0x31a31f882797
            etherType = 0xd47f
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xbb6968286ef5
            srcAddr = 0x31a31f882797
            etherType = 0xd47f
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x3799f687),
                ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0040),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xbb\x69\x68\x28\x6e\xf5',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x31\xa3\x1f\x88\x27\x97',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0xd47f),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x01),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0a0a),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x2dc1),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x09),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x0a),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x9c),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0xd4ef),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x9f4a),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x03),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x1598),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0xd9),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0x37),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x73ad),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x3799f687),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x4c36dbe7),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x01d1),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x3f82),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x3d6a09c9),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x357083e2),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x04),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x02),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x00),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x19),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xf389),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x7104),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xea34),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x96e3),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x4c39),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0xcf97),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x007a),), 0))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\xbb\x69\x68\x28\x6e\xf5\x31\xa3\x1f\x88\x27\x97\xd4\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xbb\x69\x68\x28\x6e\xf5\x31\xa3\x1f\x88\x27\x97\xd4\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test318(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x89675522d102
            srcAddr = 0x4b2a3f3ad938
            etherType = 0x5cd7
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xf802b1d6),
                ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x89\x67\x55\x22\xd1\x02',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x4b\x2a\x3f\x3a\xd9\x38',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x5cd7),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0f53),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x7ec6),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0a),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x04),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0xdc),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0xddae),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x4139),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x1644),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0x7c),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0x3f),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0xa554),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0xf802b1d6),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x0041827a),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x69a2),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xfc1f),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xae2fff23),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xde39c778),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x15),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0xd948),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x9459),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xc985),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x6b4a),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xc0ef),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x83c1),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0153),), 0))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x89\x67\x55\x22\xd1\x02\x4b\x2a\x3f\x3a\xd9\x38\x5c\xd7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test319(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x1692bb515178
            srcAddr = 0x880d95ea9482
            etherType = 0xda84
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xcd9d5004),
                ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x7a61036e),
                ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01ff),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x16\x92\xbb\x51\x51\x78',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x88\x0d\x95\xea\x94\x82',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0xda84),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x07),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x00e3),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x5a93),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x04),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x09),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x57),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0x9907),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x0a03),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x06),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x0ef1),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0xdf),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0xdc),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0xcac3),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x7a61036e),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0xcd9d5004),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0xb510),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x58a1),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x784a45ba),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x68f74558),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0d),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x05),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x07),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x39),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x90d9),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x17aa),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x90da),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x6571),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x47d7),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x39e5),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ad),), 0))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x16\x92\xbb\x51\x51\x78\x88\x0d\x95\xea\x94\x82\xda\x84\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test320(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x5b18fa7e136a
            srcAddr = 0xe235e7085567
            etherType = 0x1eb1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 1:
        ethernet =
            dstAddr = 0x5b18fa7e136a
            srcAddr = 0xe235e7085567
            etherType = 0x1eb1
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xd60236dd),
                ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x14ad9cde),
                ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0001),)))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x5b\x18\xfa\x7e\x13\x6a',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xe2\x35\xe7\x08\x55\x67',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x1eb1),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x03),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0b93),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x5f8a),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x05),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x0b),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0xf8),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0x694e),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0xa6af),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x0792),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0x7a),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0xaf),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x1638),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x14ad9cde),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0xd60236dd),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x7dd2),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xb657),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xc7f94ba0),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x6031a5cc),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0b),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x01),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x1d),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x15c2),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x7553),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x2feb),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x9540),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0xfd3c),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x819c),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01f4),), 0))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x5b\x18\xfa\x7e\x13\x6a\xe2\x35\xe7\x08\x55\x67\x1e\xb1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 1
        exp_pkt = b'\x5b\x18\xfa\x7e\x13\x6a\xe2\x35\xe7\x08\x55\x67\x1e\xb1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test321(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0xc3bc4fad1f69
            srcAddr = 0xb685eb14d2bd
            etherType = 0x77e1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 0:
        ethernet =
            dstAddr = 0xc3bc4fad1f69
            srcAddr = 0xb685eb14d2bd
            etherType = 0x77e1
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x20a381de),
                ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\xc3\xbc\x4f\xad\x1f\x69',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xb6\x85\xeb\x14\xd2\xbd',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x77e1),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x00),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0f3d),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x57bc),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x01),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x04),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0xd0),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0xec27),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x6aca),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x04),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x0b25),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0xd7),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0x89),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x66e7),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x2ea96c03),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x20a381de),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x735d),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xca26),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x14704249),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x282dcc0f),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0a),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x07),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x05),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x3a),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x6b7c),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x2f02),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x2ae5),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0xf1e8),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x141a),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x67b5),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0000),), 0))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\xc3\xbc\x4f\xad\x1f\x69\xb6\x85\xeb\x14\xd2\xbd\x77\xe1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 0
        exp_pkt = b'\xc3\xbc\x4f\xad\x1f\x69\xb6\x85\xeb\x14\xd2\xbd\x77\xe1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test322(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x11faf2102031
            srcAddr = 0x836c5e6d855f
            etherType = 0x4975
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x90d36a86),
                ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x11\xfa\xf2\x10\x20\x31',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x83\x6c\x5e\x6d\x85\x5f',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x4975),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x04),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x01),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0957),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x89ea),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x0e),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x0a),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x04),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0x72ad),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0xf486),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x07),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x071f),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0x29),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0xdb),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x6889),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x0b41716f),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x90d36a86),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0x8606),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0x1b22),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x10726f3e),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xfe6954b8),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0a),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x03),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x02),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x2b),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x102a),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x8221),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xe975),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x7c54),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x0c71),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x81ff),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x11\xfa\xf2\x10\x20\x31\x83\x6c\x5e\x6d\x85\x5f\x49\x75\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test323(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x34d8e5cacd43
            srcAddr = 0xc827a711d608
            etherType = 0x8402
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 4:
        ethernet =
            dstAddr = 0x34d8e5cacd43
            srcAddr = 0xc827a711d608
            etherType = 0x8402
    """
    
    def setupCtrlPlane(self):
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x34\xd8\xe5\xca\xcd\x43',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\xc8\x27\xa7\x11\xd6\x08',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0x8402),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x05),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x098c),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0xb483),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x06),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x04),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0x38),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0xc6f3),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x2676),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x00),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x0ac3),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0xff),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0x13),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x5b85),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x519cd5c5),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0x3376a0d4),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0xa983),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xbc48),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0x21502e6f),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0xcbbd37e0),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x02),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x01),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x1e),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x888e),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0xb891),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0xe50c),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x0f6a),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x0cd3),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x59ca),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x0004),), 0))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x34\xd8\xe5\xca\xcd\x43\xc8\x27\xa7\x11\xd6\x08\x84\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 4
        exp_pkt = b'\x34\xd8\xe5\xca\xcd\x43\xc8\x27\xa7\x11\xd6\x08\x84\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test324(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x918ae454237d
            srcAddr = 0x45b9bf96373c
            etherType = 0xccd7
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <hit> (set_egress)
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table idle_stats_tbl
        match_spec = smoke_large_tbls_idle_stats_tbl_match_spec_t(
            ethernet_dstAddr = b'\x91\x8a\xe4\x54\x23\x7d',
            ethernet_dstAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_srcAddr = b'\x45\xb9\xbf\x96\x37\x3c',
            ethernet_srcAddr_mask = b'\xff\xff\xff\xff\xff\xff',
            ethernet_etherType = hex_to_i16(0xccd7),
            ethernet_etherType_mask = hex_to_i16(0xffff),
            vlan_tag_pri = hex_to_byte(0x06),
            vlan_tag_pri_mask = hex_to_byte(0x00),
            vlan_tag_cfi = hex_to_byte(0x00),
            vlan_tag_cfi_mask = hex_to_byte(0x00),
            vlan_tag_vlan_id = hex_to_i16(0x0ebe),
            vlan_tag_vlan_id_mask = hex_to_i16(0x0000),
            vlan_tag_etherType = hex_to_i16(0x2d33),
            vlan_tag_etherType_mask = hex_to_i16(0x0000),
            ipv4_version = hex_to_byte(0x06),
            ipv4_version_mask = hex_to_byte(0x00),
            ipv4_ihl = hex_to_byte(0x03),
            ipv4_ihl_mask = hex_to_byte(0x00),
            ipv4_diffserv = hex_to_byte(0xb3),
            ipv4_diffserv_mask = hex_to_byte(0x00),
            ipv4_totalLen = hex_to_i16(0x9081),
            ipv4_totalLen_mask = hex_to_i16(0x0000),
            ipv4_identification = hex_to_i16(0x9376),
            ipv4_identification_mask = hex_to_i16(0x0000),
            ipv4_flags = hex_to_byte(0x04),
            ipv4_flags_mask = hex_to_byte(0x00),
            ipv4_fragOffset = hex_to_i16(0x1476),
            ipv4_fragOffset_mask = hex_to_i16(0x0000),
            ipv4_ttl = hex_to_byte(0x55),
            ipv4_ttl_mask = hex_to_byte(0x00),
            ipv4_protocol = hex_to_byte(0x5b),
            ipv4_protocol_mask = hex_to_byte(0x00),
            ipv4_hdrChecksum = hex_to_i16(0x9508),
            ipv4_hdrChecksum_mask = hex_to_i16(0x0000),
            ipv4_dstAddr = hex_to_i32(0x3b72f9db),
            ipv4_dstAddr_prefix_length = 0,
            ipv4_srcAddr = hex_to_i32(0xc1a59255),
            ipv4_srcAddr_mask = hex_to_i32(0x00000000),
            tcp_srcPort = hex_to_i16(0xcb17),
            tcp_srcPort_mask = hex_to_i16(0x0000),
            tcp_dstPort = hex_to_i16(0xcd66),
            tcp_dstPort_mask = hex_to_i16(0x0000),
            tcp_seqNo = hex_to_i32(0xf2bac6d5),
            tcp_seqNo_mask = hex_to_i32(0x00000000),
            tcp_ackNo = hex_to_i32(0x80db9a1e),
            tcp_ackNo_mask = hex_to_i32(0x00000000),
            tcp_dataOffset = hex_to_byte(0x0f),
            tcp_dataOffset_mask = hex_to_byte(0x00),
            tcp_res = hex_to_byte(0x01),
            tcp_res_mask = hex_to_byte(0x00),
            tcp_ecn = hex_to_byte(0x01),
            tcp_ecn_mask = hex_to_byte(0x00),
            tcp_ctrl = hex_to_byte(0x0c),
            tcp_ctrl_mask = hex_to_byte(0x00),
            tcp_window = hex_to_i16(0x1fc4),
            tcp_window_mask = hex_to_i16(0x0000),
            tcp_checksum = hex_to_i16(0x336d),
            tcp_checksum_mask = hex_to_i16(0x0000),
            tcp_urgentPtr = hex_to_i16(0x0fe4),
            tcp_urgentPtr_mask = hex_to_i16(0x0000),
            udp_srcPort = hex_to_i16(0x568a),
            udp_srcPort_mask = hex_to_i16(0x0000),
            udp_dstPort = hex_to_i16(0x4be2),
            udp_dstPort_mask = hex_to_i16(0x0000),
            udp_hdr_length = hex_to_i16(0x45db),
            udp_hdr_length_mask = hex_to_i16(0x0000),)
        self.match_entries['idle_stats_tbl'].append(
            self.client.idle_stats_tbl_table_add_with_set_egress(
                self.sess_hdl, self.dev_tgt, match_spec, 0,
                smoke_large_tbls_set_egress_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),), 0))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x91\x8a\xe4\x54\x23\x7d\x45\xb9\xbf\x96\x37\x3c\xcc\xd7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test325(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x3087d5e797a8
            srcAddr = 0xda8d9f3168aa
            etherType = 0xc001
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xbe4917bc),
                ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x30\x87\xd5\xe7\x97\xa8\xda\x8d\x9f\x31\x68\xaa\xc0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test326(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x3087d5e797a8
            srcAddr = 0xda8d9f3168aa
            etherType = 0xc001
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <miss>
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        pass
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x30\x87\xd5\xe7\x97\xa8\xda\x8d\x9f\x31\x68\xaa\xc0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test327(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0xcc9ee7e5e163
            srcAddr = 0x870e5b8d8d80
            etherType = 0x5123
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xcc9ee7e5e163
            srcAddr = 0x870e5b8d8d80
            etherType = 0x5123
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x9da96be6),
                ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x6e117e37),
                ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0040),)))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\xcc\x9e\xe7\xe5\xe1\x63\x87\x0e\x5b\x8d\x8d\x80\x51\x23\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xcc\x9e\xe7\xe5\xe1\x63\x87\x0e\x5b\x8d\x8d\x80\x51\x23\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test328(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x7ecd2abf21f0
            srcAddr = 0x1aa526d44aa6
            etherType = 0xeff9
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0xc44577f2),
                ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xcdfb7d6d),
                ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01ff),)))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x7e\xcd\x2a\xbf\x21\xf0\x1a\xa5\x26\xd4\x4a\xa6\xef\xf9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test329(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x7ee3e95ea7e8
            srcAddr = 0xd69db26f3c3e
            etherType = 0x13b2
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0xe8ae6f0d),
                ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x01ff),)))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x7e\xe3\xe9\x5e\xa7\xe8\xd6\x9d\xb2\x6f\x3c\x3e\x13\xb2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test330(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x1d014d144657
            srcAddr = 0x84411ebfa6ad
            etherType = 0xc4d5
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (set_egress)
        [ Action ] atcam_indirect_tbl <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x1d014d144657
            srcAddr = 0x84411ebfa6ad
            etherType = 0xc4d5
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x57083b8a),
                ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_set_egress(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    smoke_large_tbls_set_egress_action_spec_t(
                        action_egress_port = hex_to_i16(0x0040),)))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x1d\x01\x4d\x14\x46\x57\x84\x41\x1e\xbf\xa6\xad\xc4\xd5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x1d\x01\x4d\x14\x46\x57\x84\x41\x1e\xbf\xa6\xad\xc4\xd5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test331(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x7b6303eca15d
            srcAddr = 0x5c55335ff4d9
            etherType = 0xd834
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <hit> (nop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_indirect_tbl
        action_hdl = self.client.atcam_action_profile_add_member_with_nop(
            self.sess_hdl, self.dev_tgt)
        self.profile_members['atcam_action_profile'].append(action_hdl)
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_indirect_tbl_match_spec_t(
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_srcAddr = hex_to_i32(0x2afdde9e),
                ipv4_srcAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_indirect_tbl'].append(
                self.client.atcam_indirect_tbl_add_entry(
                    self.sess_hdl, self.dev_tgt, match_spec, 0,
                    action_hdl))
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x0e16a159),
                ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x7b\x63\x03\xec\xa1\x5d\x5c\x55\x33\x5f\xf4\xd9\xd8\x34\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test332(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x7b6303eca15d
            srcAddr = 0x5c55335ff4d9
            etherType = 0xd834
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] idle_stats_tbl <miss>
        [ Action ] atcam_tbl <hit> (nop)
        [ Action ] atcam_indirect_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table atcam_tbl
        for vlan_tag_vlan_id in range(0x000, 0xfff+1):
            match_spec = smoke_large_tbls_atcam_tbl_match_spec_t(
                tcp_valid = hex_to_byte(0x00),
                tcp_valid_mask = hex_to_byte(0x01),
                vlan_tag_vlan_id = hex_to_i16(vlan_tag_vlan_id),
                ipv4_dstAddr = hex_to_i32(0x0e16a159),
                ipv4_dstAddr_mask = hex_to_i32(0x00000000),)
            self.match_entries['atcam_tbl'].append(
                self.client.atcam_tbl_table_add_with_nop(
                    self.sess_hdl, self.dev_tgt, match_spec, 0))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x7b\x63\x03\xec\xa1\x5d\x5c\x55\x33\x5f\xf4\xd9\xd8\x34\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

# Covered 55 of 68 branches (80.9%).
# Note: not all branches may be feasible.
