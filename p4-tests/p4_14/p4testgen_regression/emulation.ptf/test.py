# PTF test for emulation
# p4testgen seed: 272633835

import pd_base_tests
from ptf.mask import Mask
from ptf.testutils import send_packet
from ptf.testutils import verify_packet
from ptf.testutils import verify_no_other_packets
from ptf.thriftutils import hex_to_byte
from ptf.thriftutils import hex_to_i16
from ptf.thriftutils import hex_to_i32

from res_pd_rpc.ttypes import DevTarget_t

from emulation.p4_pd_rpc.ttypes import *

class AbstractTest(pd_base_tests.ThriftInterfaceDataPlane):
    def __init__(self):
        pd_base_tests.ThriftInterfaceDataPlane.__init__(self, ['emulation'])
    
    def setUp(self):
        pd_base_tests.ThriftInterfaceDataPlane.setUp(self)
        self.sess_hdl = self.conn_mgr.client_init()
        self.dev_id = 0;
        self.dev_tgt = DevTarget_t(self.dev_id, hex_to_i16(0xffff))
        self.match_entries = { 'deflect_on_drop_tbl': [], 'dmac': [],
                               'egress_qos': [], 'ingress_qos': [],
                               'recirc_tbl': [], 'resubmit_tbl': [], }
        self.profile_members = { }
    
    def resetTable(self, table_name, reset_default):
        for entry in self.match_entries[table_name]:
            getattr(self.client, table_name + '_table_delete')(
                self.sess_hdl, self.dev_id, entry)
        
        if reset_default:
            # Only reset the default entry if the API for doing so exists.
            # (No API is generated for unused tables.)
            method_name = table_name + '_table_reset_default_entry'
            if hasattr(self.client, method_name):
                method = getattr(self.client, method_name)
                if callable(method):
                    method(self.sess_hdl, self.dev_tgt)
    
    def resetActionProfile(self, action_profile_name):
        for entry in self.profile_members[action_profile_name]:
            getattr(self.client, action_profile_name + '_del_member')(
                self.sess_hdl, self.dev_id, entry)
    
    def tearDown(self):
        # Reset tables.
        self.resetTable('deflect_on_drop_tbl', True)
        self.resetTable('dmac', True)
        self.resetTable('egress_qos', True)
        self.resetTable('ingress_qos', True)
        self.resetTable('recirc_tbl', True)
        self.resetTable('resubmit_tbl', True)
        
        # End session.
        self.conn_mgr.client_cleanup(self.sess_hdl)
        pd_base_tests.ThriftInterfaceDataPlane.tearDown(self)
    
    def setupCtrlPlane(self):
        pass
    
    def sendPacket(self):
        pass
    
    def verifyPackets(self):
        pass
    
    def runTestImpl(self):
        self.setupCtrlPlane()
        self.conn_mgr.complete_operations(self.sess_hdl)
        self.sendPacket()
        self.verifyPackets()
        verify_no_other_packets(self, self.dev_id, timeout=2)

class Test1(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0xd6a8bf2dc8f3
            srcAddr = 0x4e804a8a499c
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0xcdc
            etherType = 0x8f0d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xd6\xa8\xbf\x2d\xc8\xf3',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x5f9e),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0cdc),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x0a),
                    action_color = hex_to_byte(0x02),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\xd6\xa8\xbf\x2d\xc8\xf3\x4e\x80\x4a\x8a\x49\x9c\x81\x00\x2c\xdc\x8f\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test2(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x48bc9a577afe
            srcAddr = 0xad487247e12d
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0x24a
            etherType = 0x6dbc
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x48\xbc\x9a\x57\x7a\xfe',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xaff4),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x024a),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x12),
                    action_color = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x48\xbc\x9a\x57\x7a\xfe\xad\x48\x72\x47\xe1\x2d\x81\x00\x42\x4a\x6d\xbc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test3(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0xfc53d7d3b8e2
            srcAddr = 0x5348153f23d3
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b111
            cfi = 0b0
            vid = 0x176
            etherType = 0x8a7e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xfc\x53\xd7\xd3\xb8\xe2',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x747b),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0176),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x16),
                    action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\xfc\x53\xd7\xd3\xb8\xe2\x53\x48\x15\x3f\x23\xd3\x81\x00\xe1\x76\x8a\x7e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test4(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x046f6a1dcdbe
            srcAddr = 0xbbc4deeb9269
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x521
            etherType = 0x2ce6
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x04\x6f\x6a\x1d\xcd\xbe',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xd5a8),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0521),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x09),
                    action_color = hex_to_byte(0x03),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0004),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x04\x6f\x6a\x1d\xcd\xbe\xbb\xc4\xde\xeb\x92\x69\x81\x00\x65\x21\x2c\xe6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test5(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x046f6a1dcdbe
            srcAddr = 0xbbc4deeb9269
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x521
            etherType = 0x2ce6
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x04\x6f\x6a\x1d\xcd\xbe',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xd5a8),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0521),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x09),
                    action_color = hex_to_byte(0x03),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0004),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x04\x6f\x6a\x1d\xcd\xbe\xbb\xc4\xde\xeb\x92\x69\x81\x00\x65\x21\x2c\xe6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test6(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x046f6a1dcdbe
            srcAddr = 0xbbc4deeb9269
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x521
            etherType = 0x2ce6
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x04\x6f\x6a\x1d\xcd\xbe',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xd5a8),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0521),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x09),
                    action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x04\x6f\x6a\x1d\xcd\xbe\xbb\xc4\xde\xeb\x92\x69\x81\x00\x65\x21\x2c\xe6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test7(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x2a4338993348
            srcAddr = 0xc81006a45df7
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x6fa
            etherType = 0xda7a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x2a\x43\x38\x99\x33\x48',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xe23b),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x06fa),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x07),
                    action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x2a\x43\x38\x99\x33\x48\xc8\x10\x06\xa4\x5d\xf7\x81\x00\x66\xfa\xda\x7a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test8(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x2a4338993348
            srcAddr = 0xc81006a45df7
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x6fa
            etherType = 0xda7a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x2a\x43\x38\x99\x33\x48',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xe23b),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x06fa),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x07),
                    action_color = hex_to_byte(0x03),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0004),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x2a\x43\x38\x99\x33\x48\xc8\x10\x06\xa4\x5d\xf7\x81\x00\x66\xfa\xda\x7a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test9(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x2a4338993348
            srcAddr = 0xc81006a45df7
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x6fa
            etherType = 0xda7a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x2a\x43\x38\x99\x33\x48',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xe23b),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x06fa),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x07),
                    action_color = hex_to_byte(0x03),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0004),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x2a\x43\x38\x99\x33\x48\xc8\x10\x06\xa4\x5d\xf7\x81\x00\x66\xfa\xda\x7a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test10(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0xc5fb98499b5b
            srcAddr = 0xc087b9bfe01b
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b000
            cfi = 0b0
            vid = 0x0d2
            etherType = 0x2b37
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xc5\xfb\x98\x49\x9b\x5b',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x9031),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x00d2),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x01),
                    action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\xc5\xfb\x98\x49\x9b\x5b\xc0\x87\xb9\xbf\xe0\x1b\x81\x00\x00\xd2\x2b\x37\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test11(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x2499fd367c1a
            srcAddr = 0x0f86d39c5495
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0x44f
            etherType = 0xcd43
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x24\x99\xfd\x36\x7c\x1a',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xb54b),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x044f),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x17),
                    action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x24\x99\xfd\x36\x7c\x1a\x0f\x86\xd3\x9c\x54\x95\x81\x00\x44\x4f\xcd\x43\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test12(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xf6984e9899f9
            srcAddr = 0xc2dbe703888b
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x75f
            etherType = 0xb5df
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf6\x98\x4e\x98\x99\xf9',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xeeda),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x075f),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x03),
                    action_color = hex_to_byte(0x03),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xf6\x98\x4e\x98\x99\xf9\xc2\xdb\xe7\x03\x88\x8b\x81\x00\x27\x5f\xb5\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test13(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x91bb661ded25
            srcAddr = 0x3c879c792a3c
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x584
            etherType = 0xebe4
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x91\xbb\x66\x1d\xed\x25',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x02d0),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0584),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x10),
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x91\xbb\x66\x1d\xed\x25\x3c\x87\x9c\x79\x2a\x3c\x81\x00\x25\x84\xeb\xe4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test14(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x63c33ed80568
            srcAddr = 0x1161f77693ee
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xd50
            etherType = 0xd330
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x63\xc3\x3e\xd8\x05\x68',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xbe41),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0d50),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x13),
                    action_mirror_id = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x63\xc3\x3e\xd8\x05\x68\x11\x61\xf7\x76\x93\xee\x81\x00\x6d\x50\xd3\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test15(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x63c33ed80568
            srcAddr = 0x1161f77693ee
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xd50
            etherType = 0xd330
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x63\xc3\x3e\xd8\x05\x68',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xbe41),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0d50),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x13),
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000c),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x63\xc3\x3e\xd8\x05\x68\x11\x61\xf7\x76\x93\xee\x81\x00\x6d\x50\xd3\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test16(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x63c33ed80568
            srcAddr = 0x1161f77693ee
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xd50
            etherType = 0xd330
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x63\xc3\x3e\xd8\x05\x68',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xbe41),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0d50),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x13),
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000c),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x63\xc3\x3e\xd8\x05\x68\x11\x61\xf7\x76\x93\xee\x81\x00\x6d\x50\xd3\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test17(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0xb42f8494064e
            srcAddr = 0x3eb0d4523807
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b101
            cfi = 0b0
            vid = 0x8cd
            etherType = 0x9855
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xb4\x2f\x84\x94\x06\x4e',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xbf3f),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x08cd),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x01),
                    action_mirror_id = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\xb4\x2f\x84\x94\x06\x4e\x3e\xb0\xd4\x52\x38\x07\x81\x00\xa8\xcd\x98\x55\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test18(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xc0608e986c58
            srcAddr = 0x00a238c1e871
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xc98
            etherType = 0x2efd
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xc0\x60\x8e\x98\x6c\x58',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xd730),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0c98),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1a),
                    action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xc0\x60\x8e\x98\x6c\x58\x00\xa2\x38\xc1\xe8\x71\x81\x00\x4c\x98\x2e\xfd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test19(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x52ce3894f26e
            srcAddr = 0x82343af5bcb8
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0xb98
            etherType = 0x20f8
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x52\xce\x38\x94\xf2\x6e',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x342d),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0b98),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x52\xce\x38\x94\xf2\x6e\x82\x34\x3a\xf5\xbc\xb8\x81\x00\x2b\x98\x20\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test20(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0xcdaac33fd2a5
            srcAddr = 0x98e2ff19e500
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xd2e
            etherType = 0xa941
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xcd\xaa\xc3\x3f\xd2\xa5',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x5f62),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0d2e),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\xcd\xaa\xc3\x3f\xd2\xa5\x98\xe2\xff\x19\xe5\x00\x81\x00\x4d\x2e\xa9\x41\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test21(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x1c0157cf8f48
            srcAddr = 0xa621bd80e125
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b111
            cfi = 0b0
            vid = 0x599
            etherType = 0xb5b1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x1c\x01\x57\xcf\x8f\x48',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xc4f2),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0599),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x1c\x01\x57\xcf\x8f\x48\xa6\x21\xbd\x80\xe1\x25\x81\x00\xe5\x99\xb5\xb1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test22(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0x66825d436ab0
            srcAddr = 0xa9d33326f689
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x845
            etherType = 0x87ea
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x66\x82\x5d\x43\x6a\xb0',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xea16),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0845),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000b),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\x66\x82\x5d\x43\x6a\xb0\xa9\xd3\x33\x26\xf6\x89\x81\x00\x68\x45\x87\xea\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test23(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0x66825d436ab0
            srcAddr = 0xa9d33326f689
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x845
            etherType = 0x87ea
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x66\x82\x5d\x43\x6a\xb0',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xea16),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0845),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000b),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\x66\x82\x5d\x43\x6a\xb0\xa9\xd3\x33\x26\xf6\x89\x81\x00\x68\x45\x87\xea\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test24(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0x66825d436ab0
            srcAddr = 0xa9d33326f689
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x845
            etherType = 0x87ea
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x66\x82\x5d\x43\x6a\xb0',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xea16),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0845),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\x66\x82\x5d\x43\x6a\xb0\xa9\xd3\x33\x26\xf6\x89\x81\x00\x68\x45\x87\xea\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test25(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0xdd685d2030d7
            srcAddr = 0x0e79479d72da
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b101
            cfi = 0b0
            vid = 0x295
            etherType = 0x1725
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xdd\x68\x5d\x20\x30\xd7',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x3c95),)))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\xdd\x68\x5d\x20\x30\xd7\x0e\x79\x47\x9d\x72\xda\x81\x00\xa2\x95\x17\x25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test26(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xbaba9b754606
            srcAddr = 0x040d4554f385
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x924
            etherType = 0x9bdb
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xba\xba\x9b\x75\x46\x06',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x3ff1),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0005),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xba\xba\x9b\x75\x46\x06\x04\x0d\x45\x54\xf3\x85\x81\x00\x69\x24\x9b\xdb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test27(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xbaba9b754606
            srcAddr = 0x040d4554f385
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x924
            etherType = 0x9bdb
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xba\xba\x9b\x75\x46\x06',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x3ff1),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0005),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xba\xba\x9b\x75\x46\x06\x04\x0d\x45\x54\xf3\x85\x81\x00\x69\x24\x9b\xdb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test28(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xbaba9b754606
            srcAddr = 0x040d4554f385
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x924
            etherType = 0x9bdb
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xba\xba\x9b\x75\x46\x06',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x3ff1),)))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xba\xba\x9b\x75\x46\x06\x04\x0d\x45\x54\xf3\x85\x81\x00\x69\x24\x9b\xdb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test29(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0xd77cd15f5508
            srcAddr = 0xedd316d821ec
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xb6b
            etherType = 0xe6b9
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xd7\x7c\xd1\x5f\x55\x08',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x5a46),)))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\xd7\x7c\xd1\x5f\x55\x08\xed\xd3\x16\xd8\x21\xec\x81\x00\x4b\x6b\xe6\xb9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test30(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x91175e8d0957
            srcAddr = 0x7cf6862b1b85
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x389
            etherType = 0x2f72
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x91\x17\x5e\x8d\x09\x57',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xa504),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x91\x17\x5e\x8d\x09\x57\x7c\xf6\x86\x2b\x1b\x85\x81\x00\x23\x89\x2f\x72\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test31(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x70923f03eca7
            srcAddr = 0xbe244110fe09
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x7ec
            etherType = 0xcefa
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (do_recirc)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x70923f03eca7
            srcAddr = 0xbe244110fe09
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x7ec
            etherType = 0xcefa
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x70\x92\x3f\x03\xec\xa7',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0x41dd),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000a),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x70\x92\x3f\x03\xec\xa7\xbe\x24\x41\x10\xfe\x09\x81\x00\x67\xec\xce\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x70\x92\x3f\x03\xec\xa7\xbe\x24\x41\x10\xfe\x09\x81\x00\x67\xec\xce\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test32(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x58c6d136e733
            srcAddr = 0xde320574397c
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x7f3
            etherType = 0x83fb
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (do_recirc)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 8:
        ethernet =
            dstAddr = 0x58c6d136e733
            srcAddr = 0xde320574397c
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x7f3
            etherType = 0x83fb
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x58\xc6\xd1\x36\xe7\x33',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0008),
                    action_mc_index = hex_to_i16(0xc3cc),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x07f3),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000d),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x58\xc6\xd1\x36\xe7\x33\xde\x32\x05\x74\x39\x7c\x81\x00\x67\xf3\x83\xfb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 8
        exp_pkt = b'\x58\xc6\xd1\x36\xe7\x33\xde\x32\x05\x74\x39\x7c\x81\x00\x67\xf3\x83\xfb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test33(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x9c15862c9bec
            srcAddr = 0xc8bd18d9458a
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xc07
            etherType = 0x944e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x9c\x15\x86\x2c\x9b\xec',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x50fa),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000e),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x9c\x15\x86\x2c\x9b\xec\xc8\xbd\x18\xd9\x45\x8a\x81\x00\x6c\x07\x94\x4e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test34(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x72f2c252453f
            srcAddr = 0x44df449afef7
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x4a1
            etherType = 0xeb76
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (noop)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x72f2c252453f
            srcAddr = 0x44df449afef7
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x4a1
            etherType = 0xeb76
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x72\xf2\xc2\x52\x45\x3f',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0xe87d),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0003),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x72\xf2\xc2\x52\x45\x3f\x44\xdf\x44\x9a\xfe\xf7\x81\x00\x64\xa1\xeb\x76\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x72\xf2\xc2\x52\x45\x3f\x44\xdf\x44\x9a\xfe\xf7\x81\x00\x64\xa1\xeb\x76\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test35(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x2250b2c4ca7d
            srcAddr = 0x6185847334b6
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x4d4
            etherType = 0xc2fd
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (noop)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x2250b2c4ca7d
            srcAddr = 0x6185847334b6
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x4d4
            etherType = 0xc2fd
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x22\x50\xb2\xc4\xca\x7d',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0x290a),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x04d4),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0009),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x22\x50\xb2\xc4\xca\x7d\x61\x85\x84\x73\x34\xb6\x81\x00\x64\xd4\xc2\xfd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x22\x50\xb2\xc4\xca\x7d\x61\x85\x84\x73\x34\xb6\x81\x00\x64\xd4\xc2\xfd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test36(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x802d1281add6
            srcAddr = 0x90e72cd08ed8
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x8fa
            etherType = 0xf4ec
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x80\x2d\x12\x81\xad\xd6',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0xf267),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000d),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x80\x2d\x12\x81\xad\xd6\x90\xe7\x2c\xd0\x8e\xd8\x81\x00\x68\xfa\xf4\xec\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test37(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x5adb664e44e8
            srcAddr = 0xd9a6cf58a041
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x427
            etherType = 0xd25d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <miss>
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x5adb664e44e8
            srcAddr = 0xd9a6cf58a041
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x427
            etherType = 0xd25d
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x5a\xdb\x66\x4e\x44\xe8',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0x0874),)))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x5a\xdb\x66\x4e\x44\xe8\xd9\xa6\xcf\x58\xa0\x41\x81\x00\x64\x27\xd2\x5d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x5a\xdb\x66\x4e\x44\xe8\xd9\xa6\xcf\x58\xa0\x41\x81\x00\x64\x27\xd2\x5d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test38(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0x25059643471b
            srcAddr = 0x851b66818931
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x64c
            etherType = 0x3dbd
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <miss>
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 10:
        ethernet =
            dstAddr = 0x25059643471b
            srcAddr = 0x851b66818931
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x64c
            etherType = 0x3dbd
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x25\x05\x96\x43\x47\x1b',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000a),
                    action_mc_index = hex_to_i16(0xc4e0),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x064c),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\x25\x05\x96\x43\x47\x1b\x85\x1b\x66\x81\x89\x31\x81\x00\x66\x4c\x3d\xbd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 10
        exp_pkt = b'\x25\x05\x96\x43\x47\x1b\x85\x1b\x66\x81\x89\x31\x81\x00\x66\x4c\x3d\xbd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test39(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xb0a7aaaedb39
            srcAddr = 0x0ada457dcf16
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x27e
            etherType = 0xab8b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xb0\xa7\xaa\xae\xdb\x39',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x50eb),)))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xb0\xa7\xaa\xae\xdb\x39\x0a\xda\x45\x7d\xcf\x16\x81\x00\x62\x7e\xab\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test40(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0xb9538239ba4a
            srcAddr = 0x917a6dd054ef
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b110
            cfi = 0b0
            vid = 0x1e0
            etherType = 0xf0b2
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xb9\x53\x82\x39\xba\x4a',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0xc236),)))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\xb9\x53\x82\x39\xba\x4a\x91\x7a\x6d\xd0\x54\xef\x81\x00\xc1\xe0\xf0\xb2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test41(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xf691355afc94
            srcAddr = 0x95faef5ac08d
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b000
            cfi = 0b0
            vid = 0x2a9
            etherType = 0x4758
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xf691355afc94
            srcAddr = 0x95faef5ac08d
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b000
            cfi = 0b0
            vid = 0x2a9
            etherType = 0x4758
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf6\x91\x35\x5a\xfc\x94',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0xafb3),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x02a9),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xf6\x91\x35\x5a\xfc\x94\x95\xfa\xef\x5a\xc0\x8d\x81\x00\x02\xa9\x47\x58\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xf6\x91\x35\x5a\xfc\x94\x95\xfa\xef\x5a\xc0\x8d\x81\x00\x02\xa9\x47\x58\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test42(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x4ffd785ae390
            srcAddr = 0x3278f6b09e3e
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b111
            cfi = 0b0
            vid = 0x342
            etherType = 0x83fc
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] egress_qos <miss>
    
    Egress packet on port 5:
        ethernet =
            dstAddr = 0x4ffd785ae390
            srcAddr = 0x3278f6b09e3e
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b111
            cfi = 0b0
            vid = 0x342
            etherType = 0x83fc
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x4f\xfd\x78\x5a\xe3\x90',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0005),
                    action_mc_index = hex_to_i16(0x5c63),)))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x4f\xfd\x78\x5a\xe3\x90\x32\x78\xf6\xb0\x9e\x3e\x81\x00\xe3\x42\x83\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 5
        exp_pkt = b'\x4f\xfd\x78\x5a\xe3\x90\x32\x78\xf6\xb0\x9e\x3e\x81\x00\xe3\x42\x83\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test43(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x32e5b81292e7
            srcAddr = 0x154ae41355d3
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0x5a7
            etherType = 0xb81b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 8:
        ethernet =
            dstAddr = 0x32e5b81292e7
            srcAddr = 0x154ae41355d3
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0x5a7
            etherType = 0xb81b
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x32\xe5\xb8\x12\x92\xe7',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0008),
                    action_mc_index = hex_to_i16(0xc3a3),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x05a7),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x32\xe5\xb8\x12\x92\xe7\x15\x4a\xe4\x13\x55\xd3\x81\x00\x45\xa7\xb8\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 8
        exp_pkt = b'\x32\xe5\xb8\x12\x92\xe7\x15\x4a\xe4\x13\x55\xd3\x81\x00\x45\xa7\xb8\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test44(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x8737624731a4
            srcAddr = 0x7fc0b41ec794
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xb1d
            etherType = 0xdc0e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x8737624731a4
            srcAddr = 0x7fc0b41ec794
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xb1d
            etherType = 0xdc0e
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x87\x37\x62\x47\x31\xa4',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0x42c7),)))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x87\x37\x62\x47\x31\xa4\x7f\xc0\xb4\x1e\xc7\x94\x81\x00\x4b\x1d\xdc\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x87\x37\x62\x47\x31\xa4\x7f\xc0\xb4\x1e\xc7\x94\x81\x00\x4b\x1d\xdc\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test45(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xbce8fdafaf59
            srcAddr = 0x16aea8ab8914
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xc00
            etherType = 0x71f6
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xbc\xe8\xfd\xaf\xaf\x59',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0xa79f),)))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xbc\xe8\xfd\xaf\xaf\x59\x16\xae\xa8\xab\x89\x14\x81\x00\x4c\x00\x71\xf6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test46(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xcd28f397a4b3
            srcAddr = 0xe8e2d974d16d
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x620
            etherType = 0x516b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] resubmit_tbl <default> (do_resubmit)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xcd28f397a4b3
            srcAddr = 0xe8e2d974d16d
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x620
            etherType = 0x516b
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xcd\x28\xf3\x97\xa4\xb3',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0xc1e2),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xcd\x28\xf3\x97\xa4\xb3\xe8\xe2\xd9\x74\xd1\x6d\x81\x00\x26\x20\x51\x6b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xcd\x28\xf3\x97\xa4\xb3\xe8\xe2\xd9\x74\xd1\x6d\x81\x00\x26\x20\x51\x6b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test47(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x532091807778
            srcAddr = 0xe92649de0f83
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x2f3
            etherType = 0x9c43
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] resubmit_tbl <default> (do_resubmit)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 15:
        ethernet =
            dstAddr = 0x532091807778
            srcAddr = 0xe92649de0f83
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x2f3
            etherType = 0x9c43
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x53\x20\x91\x80\x77\x78',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000f),
                    action_mc_index = hex_to_i16(0xece4),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x02f3),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x00),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x53\x20\x91\x80\x77\x78\xe9\x26\x49\xde\x0f\x83\x81\x00\x22\xf3\x9c\x43\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 15
        exp_pkt = b'\x53\x20\x91\x80\x77\x78\xe9\x26\x49\xde\x0f\x83\x81\x00\x22\xf3\x9c\x43\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test48(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0xd8bbef516ce5
            srcAddr = 0x2746877086d0
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x3bd
            etherType = 0xd34b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xd8\xbb\xef\x51\x6c\xe5',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x5c82),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\xd8\xbb\xef\x51\x6c\xe5\x27\x46\x87\x70\x86\xd0\x81\x00\x23\xbd\xd3\x4b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test49(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0x2b708e141978
            srcAddr = 0xa8187686bb2f
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xd4e
            etherType = 0x0af4
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x2b\x70\x8e\x14\x19\x78',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x6d3f),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0d4e),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\x2b\x70\x8e\x14\x19\x78\xa8\x18\x76\x86\xbb\x2f\x81\x00\x4d\x4e\x0a\xf4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test50(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0xad15380e4d5e
            srcAddr = 0x3a3f1a213d2a
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xdbf
            etherType = 0xc398
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 7:
        ethernet =
            dstAddr = 0xad15380e4d5e
            srcAddr = 0x3a3f1a213d2a
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xdbf
            etherType = 0xc398
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xad\x15\x38\x0e\x4d\x5e',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0007),
                    action_mc_index = hex_to_i16(0xd947),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0dbf),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0dbf),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\xad\x15\x38\x0e\x4d\x5e\x3a\x3f\x1a\x21\x3d\x2a\x81\x00\x4d\xbf\xc3\x98\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 7
        exp_pkt = b'\xad\x15\x38\x0e\x4d\x5e\x3a\x3f\x1a\x21\x3d\x2a\x81\x00\x4d\xbf\xc3\x98\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test51(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x38b8be747538
            srcAddr = 0x9521762f0637
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xfcb
            etherType = 0x4337
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x38b8be747538
            srcAddr = 0x9521762f0637
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xfcb
            etherType = 0x4337
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x38\xb8\xbe\x74\x75\x38',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0x7fb4),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0fcb),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x38\xb8\xbe\x74\x75\x38\x95\x21\x76\x2f\x06\x37\x81\x00\x4f\xcb\x43\x37\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x38\xb8\xbe\x74\x75\x38\x95\x21\x76\x2f\x06\x37\x81\x00\x4f\xcb\x43\x37\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test52(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x7a29181b0f8d
            srcAddr = 0xd372dd081bea
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x64f
            etherType = 0x7e50
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (noop)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 15:
        ethernet =
            dstAddr = 0x7a29181b0f8d
            srcAddr = 0xd372dd081bea
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x64f
            etherType = 0x7e50
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x7a\x29\x18\x1b\x0f\x8d',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000f),
                    action_mc_index = hex_to_i16(0x4f9d),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x064f),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0004),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x7a\x29\x18\x1b\x0f\x8d\xd3\x72\xdd\x08\x1b\xea\x81\x00\x66\x4f\x7e\x50\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 15
        exp_pkt = b'\x7a\x29\x18\x1b\x0f\x8d\xd3\x72\xdd\x08\x1b\xea\x81\x00\x66\x4f\x7e\x50\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test53(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x2773ccba6fea
            srcAddr = 0xbb02a512b8a9
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x6ec
            etherType = 0xa32e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (noop)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 2:
        ethernet =
            dstAddr = 0x2773ccba6fea
            srcAddr = 0xbb02a512b8a9
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x6ec
            etherType = 0xa32e
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x27\x73\xcc\xba\x6f\xea',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0002),
                    action_mc_index = hex_to_i16(0x5b6a),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x06ec),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x06ec),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0006),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x27\x73\xcc\xba\x6f\xea\xbb\x02\xa5\x12\xb8\xa9\x81\x00\x66\xec\xa3\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 2
        exp_pkt = b'\x27\x73\xcc\xba\x6f\xea\xbb\x02\xa5\x12\xb8\xa9\x81\x00\x66\xec\xa3\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test54(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0xaca99928c57d
            srcAddr = 0x24d24e3e4849
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x359
            etherType = 0xfdd8
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xac\xa9\x99\x28\xc5\x7d',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0xbf72),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0359),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000d),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\xac\xa9\x99\x28\xc5\x7d\x24\xd2\x4e\x3e\x48\x49\x81\x00\x63\x59\xfd\xd8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test55(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x6fb51e17f0ec
            srcAddr = 0xd00855d8c8ff
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x8ae
            etherType = 0xc26c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x6f\xb5\x1e\x17\xf0\xec',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x4edf),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x08ae),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0003),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x6f\xb5\x1e\x17\xf0\xec\xd0\x08\x55\xd8\xc8\xff\x81\x00\x68\xae\xc2\x6c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test56(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x36b817df7a56
            srcAddr = 0x4a1769a2542f
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x8d5
            etherType = 0x8ce1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (do_recirc)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 9:
        ethernet =
            dstAddr = 0x36b817df7a56
            srcAddr = 0x4a1769a2542f
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x8d5
            etherType = 0x8ce1
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x36\xb8\x17\xdf\x7a\x56',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0009),
                    action_mc_index = hex_to_i16(0x3759),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x08d5),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x08d5),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0001),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x36\xb8\x17\xdf\x7a\x56\x4a\x17\x69\xa2\x54\x2f\x81\x00\x68\xd5\x8c\xe1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 9
        exp_pkt = b'\x36\xb8\x17\xdf\x7a\x56\x4a\x17\x69\xa2\x54\x2f\x81\x00\x68\xd5\x8c\xe1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test57(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x9d64a12a0343
            srcAddr = 0x285d4a222d64
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xa7d
            etherType = 0x5517
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (do_recirc)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x9d64a12a0343
            srcAddr = 0x285d4a222d64
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xa7d
            etherType = 0x5517
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x9d\x64\xa1\x2a\x03\x43',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0x531b),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0a7d),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000c),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x9d\x64\xa1\x2a\x03\x43\x28\x5d\x4a\x22\x2d\x64\x81\x00\x6a\x7d\x55\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x9d\x64\xa1\x2a\x03\x43\x28\x5d\x4a\x22\x2d\x64\x81\x00\x6a\x7d\x55\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test58(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xcba45f523ec5
            srcAddr = 0xa97f8bea2193
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x962
            etherType = 0xfd14
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xcb\xa4\x5f\x52\x3e\xc5',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0xe843),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0962),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xcb\xa4\x5f\x52\x3e\xc5\xa9\x7f\x8b\xea\x21\x93\x81\x00\x69\x62\xfd\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test59(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0xaaf6d3a6eca7
            srcAddr = 0xda88c83d19b4
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x90d
            etherType = 0xd470
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <miss>
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xaaf6d3a6eca7
            srcAddr = 0xda88c83d19b4
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x90d
            etherType = 0xd470
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xaa\xf6\xd3\xa6\xec\xa7',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0x7b8e),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x090d),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\xaa\xf6\xd3\xa6\xec\xa7\xda\x88\xc8\x3d\x19\xb4\x81\x00\x69\x0d\xd4\x70\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xaa\xf6\xd3\xa6\xec\xa7\xda\x88\xc8\x3d\x19\xb4\x81\x00\x69\x0d\xd4\x70\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test60(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x2a647202fa88
            srcAddr = 0x3fae6498aa88
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xf79
            etherType = 0xf8db
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <miss>
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 8:
        ethernet =
            dstAddr = 0x2a647202fa88
            srcAddr = 0x3fae6498aa88
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xf79
            etherType = 0xf8db
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x2a\x64\x72\x02\xfa\x88',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0008),
                    action_mc_index = hex_to_i16(0xd39a),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0f79),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0f79),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x2a\x64\x72\x02\xfa\x88\x3f\xae\x64\x98\xaa\x88\x81\x00\x6f\x79\xf8\xdb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 8
        exp_pkt = b'\x2a\x64\x72\x02\xfa\x88\x3f\xae\x64\x98\xaa\x88\x81\x00\x6f\x79\xf8\xdb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test61(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x013a9048e1af
            srcAddr = 0x8e66cedeeb01
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b110
            cfi = 0b0
            vid = 0xcc9
            etherType = 0xb153
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x01\x3a\x90\x48\xe1\xaf',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x30c4),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0cc9),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x01\x3a\x90\x48\xe1\xaf\x8e\x66\xce\xde\xeb\x01\x81\x00\xcc\xc9\xb1\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test62(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x8e9dbc101830
            srcAddr = 0xd3d4e739e1dc
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b100
            cfi = 0b0
            vid = 0x049
            etherType = 0xb965
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 8:
        ethernet =
            dstAddr = 0x8e9dbc101830
            srcAddr = 0xd3d4e739e1dc
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b100
            cfi = 0b0
            vid = 0x049
            etherType = 0xb965
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x8e\x9d\xbc\x10\x18\x30',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0008),
                    action_mc_index = hex_to_i16(0x46dc),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0049),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x00),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0049),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x8e\x9d\xbc\x10\x18\x30\xd3\xd4\xe7\x39\xe1\xdc\x81\x00\x80\x49\xb9\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 8
        exp_pkt = b'\x8e\x9d\xbc\x10\x18\x30\xd3\xd4\xe7\x39\xe1\xdc\x81\x00\x80\x49\xb9\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test63(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x113f296015be
            srcAddr = 0x4eb4c3efb6d7
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b000
            cfi = 0b0
            vid = 0xfe9
            etherType = 0xb44c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x113f296015be
            srcAddr = 0x4eb4c3efb6d7
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b000
            cfi = 0b0
            vid = 0xfe9
            etherType = 0xb44c
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x11\x3f\x29\x60\x15\xbe',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0x6cb5),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0fe9),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x11\x3f\x29\x60\x15\xbe\x4e\xb4\xc3\xef\xb6\xd7\x81\x00\x0f\xe9\xb4\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x11\x3f\x29\x60\x15\xbe\x4e\xb4\xc3\xef\xb6\xd7\x81\x00\x0f\xe9\xb4\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test64(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x35db21e940f6
            srcAddr = 0x177f18e98398
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0xf06
            etherType = 0x4d4f
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x35\xdb\x21\xe9\x40\xf6',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x2132),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0f06),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x35\xdb\x21\xe9\x40\xf6\x17\x7f\x18\xe9\x83\x98\x81\x00\x2f\x06\x4d\x4f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test65(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x89f6e0afcd2c
            srcAddr = 0xe685d36c1f13
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x69e
            etherType = 0x5e4f
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] resubmit_tbl <default> (do_resubmit)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 14:
        ethernet =
            dstAddr = 0x89f6e0afcd2c
            srcAddr = 0xe685d36c1f13
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x69e
            etherType = 0x5e4f
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x89\xf6\xe0\xaf\xcd\x2c',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000e),
                    action_mc_index = hex_to_i16(0xa7a8),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x069e),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x89\xf6\xe0\xaf\xcd\x2c\xe6\x85\xd3\x6c\x1f\x13\x81\x00\x26\x9e\x5e\x4f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 14
        exp_pkt = b'\x89\xf6\xe0\xaf\xcd\x2c\xe6\x85\xd3\x6c\x1f\x13\x81\x00\x26\x9e\x5e\x4f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test66(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0xa2e8ca7261da
            srcAddr = 0x3e28b9b59cc5
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x2a5
            etherType = 0x6537
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] resubmit_tbl <default> (do_resubmit)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 5:
        ethernet =
            dstAddr = 0xa2e8ca7261da
            srcAddr = 0x3e28b9b59cc5
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x2a5
            etherType = 0x6537
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xa2\xe8\xca\x72\x61\xda',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0005),
                    action_mc_index = hex_to_i16(0x8b29),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x02a5),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x00),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x02a5),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\xa2\xe8\xca\x72\x61\xda\x3e\x28\xb9\xb5\x9c\xc5\x81\x00\x22\xa5\x65\x37\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 5
        exp_pkt = b'\xa2\xe8\xca\x72\x61\xda\x3e\x28\xb9\xb5\x9c\xc5\x81\x00\x22\xa5\x65\x37\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test67(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0xce17915070f3
            srcAddr = 0x2db9901381dd
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0x1a6
            etherType = 0x238a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xce\x17\x91\x50\x70\xf3',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0xb82d),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x01a6),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x19),
                    action_mirror_id = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\xce\x17\x91\x50\x70\xf3\x2d\xb9\x90\x13\x81\xdd\x81\x00\x41\xa6\x23\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test68(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x7363f9a43410
            srcAddr = 0x46a9a4c1d0bb
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xc1d
            etherType = 0xb4b1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    
    Egress packet on port 2:
        ethernet =
            dstAddr = 0x7363f9a43410
            srcAddr = 0x46a9a4c1d0bb
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xc1d
            etherType = 0xb4b1
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x73\x63\xf9\xa4\x34\x10',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0002),
                    action_mc_index = hex_to_i16(0x4011),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0c1d),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x0b),
                    action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x73\x63\xf9\xa4\x34\x10\x46\xa9\xa4\xc1\xd0\xbb\x81\x00\x4c\x1d\xb4\xb1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 2
        exp_pkt = b'\x73\x63\xf9\xa4\x34\x10\x46\xa9\xa4\xc1\xd0\xbb\x81\x00\x4c\x1d\xb4\xb1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test69(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x0cab7b6689dd
            srcAddr = 0x82ca244c3bfd
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b000
            cfi = 0b0
            vid = 0x3d7
            etherType = 0xa4e7
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x0c\xab\x7b\x66\x89\xdd',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0xf268),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x03d7),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1f),
                    action_mirror_id = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x0c\xab\x7b\x66\x89\xdd\x82\xca\x24\x4c\x3b\xfd\x81\x00\x03\xd7\xa4\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test70(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0xead6844e2610
            srcAddr = 0x945095aea5c5
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b101
            cfi = 0b0
            vid = 0x5a8
            etherType = 0x9bf7
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xead6844e2610
            srcAddr = 0x945095aea5c5
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b101
            cfi = 0b0
            vid = 0x5a8
            etherType = 0x9bf7
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xea\xd6\x84\x4e\x26\x10',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0xf8ed),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x05a8),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x09),
                    action_mirror_id = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\xea\xd6\x84\x4e\x26\x10\x94\x50\x95\xae\xa5\xc5\x81\x00\xa5\xa8\x9b\xf7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xea\xd6\x84\x4e\x26\x10\x94\x50\x95\xae\xa5\xc5\x81\x00\xa5\xa8\x9b\xf7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test71(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xef6711e713e2
            srcAddr = 0x5b16370f7478
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x361
            etherType = 0x78c2
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xef\x67\x11\xe7\x13\xe2',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x5fa4),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0361),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x14),
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0005),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xef\x67\x11\xe7\x13\xe2\x5b\x16\x37\x0f\x74\x78\x81\x00\x63\x61\x78\xc2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test72(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x169e403ad8b0
            srcAddr = 0x7a66dd34c46c
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xcbe
            etherType = 0x9f55
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    
    Egress packet on port 3:
        ethernet =
            dstAddr = 0x169e403ad8b0
            srcAddr = 0x7a66dd34c46c
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xcbe
            etherType = 0x9f55
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x16\x9e\x40\x3a\xd8\xb0',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0003),
                    action_mc_index = hex_to_i16(0xffb1),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0cbe),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x0f),
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000f),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x16\x9e\x40\x3a\xd8\xb0\x7a\x66\xdd\x34\xc4\x6c\x81\x00\x6c\xbe\x9f\x55\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 3
        exp_pkt = b'\x16\x9e\x40\x3a\xd8\xb0\x7a\x66\xdd\x34\xc4\x6c\x81\x00\x6c\xbe\x9f\x55\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test73(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x1b25a519a4dd
            srcAddr = 0x763691afb410
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x2e8
            etherType = 0x4a30
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x1b\x25\xa5\x19\xa4\xdd',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x626c),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x02e8),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x01),
                    action_mirror_id = hex_to_byte(0x00),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000a),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x1b\x25\xa5\x19\xa4\xdd\x76\x36\x91\xaf\xb4\x10\x81\x00\x62\xe8\x4a\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test74(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0xee4277827c00
            srcAddr = 0x9bc43fd129a3
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x266
            etherType = 0x69da
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    
    Egress packet on port 2:
        ethernet =
            dstAddr = 0xee4277827c00
            srcAddr = 0x9bc43fd129a3
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x266
            etherType = 0x69da
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xee\x42\x77\x82\x7c\x00',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0002),
                    action_mc_index = hex_to_i16(0xc58f),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0266),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1e),
                    action_mirror_id = hex_to_byte(0x00),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0008),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\xee\x42\x77\x82\x7c\x00\x9b\xc4\x3f\xd1\x29\xa3\x81\x00\x62\x66\x69\xda\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 2
        exp_pkt = b'\xee\x42\x77\x82\x7c\x00\x9b\xc4\x3f\xd1\x29\xa3\x81\x00\x62\x66\x69\xda\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test75(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xc6e38347a256
            srcAddr = 0xbe908b371e36
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x271
            etherType = 0xa1b3
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xc6\xe3\x83\x47\xa2\x56',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x1861),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0271),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x09),
                    action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xc6\xe3\x83\x47\xa2\x56\xbe\x90\x8b\x37\x1e\x36\x81\x00\x62\x71\xa1\xb3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test76(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x12d2d0631ee2
            srcAddr = 0x876416cc1506
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xb97
            etherType = 0xd6ca
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <miss>
    
    Egress packet on port 9:
        ethernet =
            dstAddr = 0x12d2d0631ee2
            srcAddr = 0x876416cc1506
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xb97
            etherType = 0xd6ca
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x12\xd2\xd0\x63\x1e\xe2',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0009),
                    action_mc_index = hex_to_i16(0xfc1a),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0b97),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1a),
                    action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x12\xd2\xd0\x63\x1e\xe2\x87\x64\x16\xcc\x15\x06\x81\x00\x6b\x97\xd6\xca\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 9
        exp_pkt = b'\x12\xd2\xd0\x63\x1e\xe2\x87\x64\x16\xcc\x15\x06\x81\x00\x6b\x97\xd6\xca\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test77(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0x5808e9ee1b29
            srcAddr = 0x7db8f9ff3c12
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x472
            etherType = 0x2a1d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    
    Egress packet on port 10:
        ethernet =
            dstAddr = 0x5808e9ee1b29
            srcAddr = 0x7db8f9ff3c12
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x472
            etherType = 0x2a1d
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x58\x08\xe9\xee\x1b\x29',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000a),
                    action_mc_index = hex_to_i16(0x4567),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0472),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x0f),
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\x58\x08\xe9\xee\x1b\x29\x7d\xb8\xf9\xff\x3c\x12\x81\x00\x24\x72\x2a\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 10
        exp_pkt = b'\x58\x08\xe9\xee\x1b\x29\x7d\xb8\xf9\xff\x3c\x12\x81\x00\x24\x72\x2a\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test78(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x7fa6adca11e5
            srcAddr = 0xde8460a34830
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x15d
            etherType = 0xb4f5
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x7f\xa6\xad\xca\x11\xe5',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x6d35),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x015d),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x10),
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x7f\xa6\xad\xca\x11\xe5\xde\x84\x60\xa3\x48\x30\x81\x00\x21\x5d\xb4\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test79(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x5ccb8cb0c85d
            srcAddr = 0x1a3f246afbfe
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xbd5
            etherType = 0x5590
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 13:
        ethernet =
            dstAddr = 0x5ccb8cb0c85d
            srcAddr = 0x1a3f246afbfe
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xbd5
            etherType = 0x5590
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x5c\xcb\x8c\xb0\xc8\x5d',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000d),
                    action_mc_index = hex_to_i16(0xd98c),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0bd5),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x15),
                    action_color = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x5c\xcb\x8c\xb0\xc8\x5d\x1a\x3f\x24\x6a\xfb\xfe\x81\x00\x4b\xd5\x55\x90\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 13
        exp_pkt = b'\x5c\xcb\x8c\xb0\xc8\x5d\x1a\x3f\x24\x6a\xfb\xfe\x81\x00\x4b\xd5\x55\x90\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test80(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0xbd65c40540f3
            srcAddr = 0x745df6b13d1a
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xc4b
            etherType = 0xe450
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 13:
        ethernet =
            dstAddr = 0xbd65c40540f3
            srcAddr = 0x745df6b13d1a
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xc4b
            etherType = 0xe450
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xbd\x65\xc4\x05\x40\xf3',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000d),
                    action_mc_index = hex_to_i16(0x793a),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0c4b),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0c4b),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x19),
                    action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\xbd\x65\xc4\x05\x40\xf3\x74\x5d\xf6\xb1\x3d\x1a\x81\x00\x4c\x4b\xe4\x50\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 13
        exp_pkt = b'\xbd\x65\xc4\x05\x40\xf3\x74\x5d\xf6\xb1\x3d\x1a\x81\x00\x4c\x4b\xe4\x50\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test81(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x8b79e1cbb785
            srcAddr = 0xf40d612c098c
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xfcf
            etherType = 0xb932
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x8b\x79\xe1\xcb\xb7\x85',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x1a61),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0fcf),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x18),
                    action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x8b\x79\xe1\xcb\xb7\x85\xf4\x0d\x61\x2c\x09\x8c\x81\x00\x4f\xcf\xb9\x32\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test82(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0x77051e786399
            srcAddr = 0x112b0b8ffb99
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b101
            cfi = 0b0
            vid = 0xec4
            etherType = 0x9e9f
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 13:
        ethernet =
            dstAddr = 0x77051e786399
            srcAddr = 0x112b0b8ffb99
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b101
            cfi = 0b0
            vid = 0xec4
            etherType = 0x9e9f
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x77\x05\x1e\x78\x63\x99',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000d),
                    action_mc_index = hex_to_i16(0x4756),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0ec4),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x19),
                    action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\x77\x05\x1e\x78\x63\x99\x11\x2b\x0b\x8f\xfb\x99\x81\x00\xae\xc4\x9e\x9f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 13
        exp_pkt = b'\x77\x05\x1e\x78\x63\x99\x11\x2b\x0b\x8f\xfb\x99\x81\x00\xae\xc4\x9e\x9f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test83(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x4de8d5e18ab8
            srcAddr = 0x02be0bd283df
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b000
            cfi = 0b0
            vid = 0xb3c
            etherType = 0xeab1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x4de8d5e18ab8
            srcAddr = 0x02be0bd283df
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b000
            cfi = 0b0
            vid = 0xb3c
            etherType = 0xeab1
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x4d\xe8\xd5\xe1\x8a\xb8',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0x5074),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0b3c),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x00),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0b3c),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x0f),
                    action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x4d\xe8\xd5\xe1\x8a\xb8\x02\xbe\x0b\xd2\x83\xdf\x81\x00\x0b\x3c\xea\xb1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x4d\xe8\xd5\xe1\x8a\xb8\x02\xbe\x0b\xd2\x83\xdf\x81\x00\x0b\x3c\xea\xb1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test84(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xb0b5212c9e11
            srcAddr = 0xe09547b75fab
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b100
            cfi = 0b0
            vid = 0x077
            etherType = 0xe1e1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xb0\xb5\x21\x2c\x9e\x11',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0xf229),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0077),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x11),
                    action_color = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xb0\xb5\x21\x2c\x9e\x11\xe0\x95\x47\xb7\x5f\xab\x81\x00\x80\x77\xe1\xe1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test85(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0xeb9fa2dbdaf8
            srcAddr = 0x6f85b32c56a5
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x6f3
            etherType = 0x29d9
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xeb9fa2dbdaf8
            srcAddr = 0x6f85b32c56a5
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x6f3
            etherType = 0x29d9
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xeb\x9f\xa2\xdb\xda\xf8',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0xce47),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x06f3),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x00),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x06f3),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1e),
                    action_color = hex_to_byte(0x03),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000d),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\xeb\x9f\xa2\xdb\xda\xf8\x6f\x85\xb3\x2c\x56\xa5\x81\x00\x66\xf3\x29\xd9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xeb\x9f\xa2\xdb\xda\xf8\x6f\x85\xb3\x2c\x56\xa5\x81\x00\x66\xf3\x29\xd9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test86(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0xea1bbc6fb36b
            srcAddr = 0x391eeaefc8a4
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x847
            etherType = 0x4231
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 0:
        ethernet =
            dstAddr = 0xea1bbc6fb36b
            srcAddr = 0x391eeaefc8a4
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x847
            etherType = 0x4231
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xea\x1b\xbc\x6f\xb3\x6b',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0000),
                    action_mc_index = hex_to_i16(0x735c),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0847),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x06),
                    action_color = hex_to_byte(0x02),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000c),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\xea\x1b\xbc\x6f\xb3\x6b\x39\x1e\xea\xef\xc8\xa4\x81\x00\x68\x47\x42\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 0
        exp_pkt = b'\xea\x1b\xbc\x6f\xb3\x6b\x39\x1e\xea\xef\xc8\xa4\x81\x00\x68\x47\x42\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test87(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x9be7ca934597
            srcAddr = 0x35756eb4ac53
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x298
            etherType = 0x9dfd
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x9b\xe7\xca\x93\x45\x97',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x59e3),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0298),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x0a),
                    action_color = hex_to_byte(0x03),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0001),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x9b\xe7\xca\x93\x45\x97\x35\x75\x6e\xb4\xac\x53\x81\x00\x62\x98\x9d\xfd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test88(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x94a80e516877
            srcAddr = 0x448cb3c1417a
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x7ab
            etherType = 0x3b63
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x94a80e516877
            srcAddr = 0x448cb3c1417a
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x7ab
            etherType = 0x3b63
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x94\xa8\x0e\x51\x68\x77',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0xa2c8),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x07ab),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x07ab),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x0a),
                    action_color = hex_to_byte(0x03),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0007),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x94\xa8\x0e\x51\x68\x77\x44\x8c\xb3\xc1\x41\x7a\x81\x00\x67\xab\x3b\x63\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x94\xa8\x0e\x51\x68\x77\x44\x8c\xb3\xc1\x41\x7a\x81\x00\x67\xab\x3b\x63\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test89(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x28c7dbe7a155
            srcAddr = 0x9ddfa9ecc718
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xccc
            etherType = 0x6259
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 12:
        ethernet =
            dstAddr = 0x28c7dbe7a155
            srcAddr = 0x9ddfa9ecc718
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xccc
            etherType = 0x6259
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x28\xc7\xdb\xe7\xa1\x55',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000c),
                    action_mc_index = hex_to_i16(0x8676),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0ccc),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x0e),
                    action_color = hex_to_byte(0x00),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0009),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x28\xc7\xdb\xe7\xa1\x55\x9d\xdf\xa9\xec\xc7\x18\x81\x00\x6c\xcc\x62\x59\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 12
        exp_pkt = b'\x28\xc7\xdb\xe7\xa1\x55\x9d\xdf\xa9\xec\xc7\x18\x81\x00\x6c\xcc\x62\x59\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test90(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x865cc80721b4
            srcAddr = 0xaf8e7c4fa222
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x497
            etherType = 0x86be
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x86\x5c\xc8\x07\x21\xb4',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0xc49b),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0497),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x01),
                    action_color = hex_to_byte(0x01),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000c),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x86\x5c\xc8\x07\x21\xb4\xaf\x8e\x7c\x4f\xa2\x22\x81\x00\x64\x97\x86\xbe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test91(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0xf23e9bc7c351
            srcAddr = 0x42e1f5725f1f
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x706
            etherType = 0xc812
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
        [ Action ] egress_qos <miss>
    
    Egress packet on port 5:
        ethernet =
            dstAddr = 0xf23e9bc7c351
            srcAddr = 0x42e1f5725f1f
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x706
            etherType = 0xc812
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf2\x3e\x9b\xc7\xc3\x51',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0005),
                    action_mc_index = hex_to_i16(0x541c),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0706),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x18),
                    action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\xf2\x3e\x9b\xc7\xc3\x51\x42\xe1\xf5\x72\x5f\x1f\x81\x00\x67\x06\xc8\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 5
        exp_pkt = b'\xf2\x3e\x9b\xc7\xc3\x51\x42\xe1\xf5\x72\x5f\x1f\x81\x00\x67\x06\xc8\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test92(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x8811e9fc461c
            srcAddr = 0xb204133f7111
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x6b5
            etherType = 0xd9ce
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x8811e9fc461c
            srcAddr = 0xb204133f7111
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x6b5
            etherType = 0xd9ce
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x88\x11\xe9\xfc\x46\x1c',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0x7182),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x06b5),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x00),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x06b5),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x11),
                    action_color = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x88\x11\xe9\xfc\x46\x1c\xb2\x04\x13\x3f\x71\x11\x81\x00\x66\xb5\xd9\xce\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x88\x11\xe9\xfc\x46\x1c\xb2\x04\x13\x3f\x71\x11\x81\x00\x66\xb5\xd9\xce\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test93(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x2c2413b91302
            srcAddr = 0x45d21a253f4d
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x9b6
            etherType = 0x1abb
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x2c\x24\x13\xb9\x13\x02',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x2e85),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x09b6),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x17),
                    action_color = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x2c\x24\x13\xb9\x13\x02\x45\xd2\x1a\x25\x3f\x4d\x81\x00\x69\xb6\x1a\xbb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test94(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x38a5bab26eb1
            srcAddr = 0x909e64ed3cfe
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0xad4
            etherType = 0xfcea
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x38\xa5\xba\xb2\x6e\xb1',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x12f9),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0ad4),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1a),
                    action_color = hex_to_byte(0x03),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x38\xa5\xba\xb2\x6e\xb1\x90\x9e\x64\xed\x3c\xfe\x81\x00\x2a\xd4\xfc\xea\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test95(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x18e5ed69c6fc
            srcAddr = 0xf7d6f8a1c340
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x862
            etherType = 0x3d02
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x18e5ed69c6fc
            srcAddr = 0xf7d6f8a1c340
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x862
            etherType = 0x3d02
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x18\xe5\xed\x69\xc6\xfc',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0xbb8e),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0862),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x11),
                    action_color = hex_to_byte(0x03),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x18\xe5\xed\x69\xc6\xfc\xf7\xd6\xf8\xa1\xc3\x40\x81\x00\x28\x62\x3d\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x18\xe5\xed\x69\xc6\xfc\xf7\xd6\xf8\xa1\xc3\x40\x81\x00\x28\x62\x3d\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test96(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x79bc6a7818c8
            srcAddr = 0xf41034dbf3d1
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0xa99
            etherType = 0x302c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x79bc6a7818c8
            srcAddr = 0xf41034dbf3d1
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0xa99
            etherType = 0x302c
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x79\xbc\x6a\x78\x18\xc8',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0x3488),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0a99),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0a99),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x04),
                    action_color = hex_to_byte(0x00),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x79\xbc\x6a\x78\x18\xc8\xf4\x10\x34\xdb\xf3\xd1\x81\x00\x2a\x99\x30\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x79\xbc\x6a\x78\x18\xc8\xf4\x10\x34\xdb\xf3\xd1\x81\x00\x2a\x99\x30\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test97(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x2caf0bf62a8d
            srcAddr = 0xe71e713c6b7b
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x8b9
            etherType = 0x39d0
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x2caf0bf62a8d
            srcAddr = 0xe71e713c6b7b
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x8b9
            etherType = 0x39d0
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x2c\xaf\x0b\xf6\x2a\x8d',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0x53be),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x08b9),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x0d),
                    action_color = hex_to_byte(0x03),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x2c\xaf\x0b\xf6\x2a\x8d\xe7\x1e\x71\x3c\x6b\x7b\x81\x00\x28\xb9\x39\xd0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x2c\xaf\x0b\xf6\x2a\x8d\xe7\x1e\x71\x3c\x6b\x7b\x81\x00\x28\xb9\x39\xd0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test98(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x6eb325a4f7fc
            srcAddr = 0xb79083f09f00
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x0cc
            etherType = 0xae6d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x6e\xb3\x25\xa4\xf7\xfc',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0xd5cd),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x00cc),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x12),
                    action_color = hex_to_byte(0x01),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x6e\xb3\x25\xa4\xf7\xfc\xb7\x90\x83\xf0\x9f\x00\x81\x00\x20\xcc\xae\x6d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test99(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0xfa019a51d075
            srcAddr = 0x13f6e1625444
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b000
            cfi = 0b0
            vid = 0x375
            etherType = 0xa2bc
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xfa\x01\x9a\x51\xd0\x75',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x0529),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0375),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x17),
                    action_color = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\xfa\x01\x9a\x51\xd0\x75\x13\xf6\xe1\x62\x54\x44\x81\x00\x03\x75\xa2\xbc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test100(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x34d4ff3056cd
            srcAddr = 0x44e018352534
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b110
            cfi = 0b0
            vid = 0x7c1
            etherType = 0x069a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
    
    Egress packet on port 0:
        ethernet =
            dstAddr = 0x34d4ff3056cd
            srcAddr = 0x44e018352534
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b110
            cfi = 0b0
            vid = 0x7c1
            etherType = 0x069a
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x34\xd4\xff\x30\x56\xcd',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0000),
                    action_mc_index = hex_to_i16(0x25aa),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x07c1),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x19),
                    action_color = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x34\xd4\xff\x30\x56\xcd\x44\xe0\x18\x35\x25\x34\x81\x00\xc7\xc1\x06\x9a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 0
        exp_pkt = b'\x34\xd4\xff\x30\x56\xcd\x44\xe0\x18\x35\x25\x34\x81\x00\xc7\xc1\x06\x9a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test101(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x77f8946163b1
            srcAddr = 0xf5dbef21bb1b
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x0ee
            etherType = 0xe18e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
    
    Egress packet on port 1:
        ethernet =
            dstAddr = 0x77f8946163b1
            srcAddr = 0xf5dbef21bb1b
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x0ee
            etherType = 0xe18e
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x77\xf8\x94\x61\x63\xb1',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0001),
                    action_mc_index = hex_to_i16(0x5189),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x00ee),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x17),
                    action_color = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x77\xf8\x94\x61\x63\xb1\xf5\xdb\xef\x21\xbb\x1b\x81\x00\x60\xee\xe1\x8e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 1
        exp_pkt = b'\x77\xf8\x94\x61\x63\xb1\xf5\xdb\xef\x21\xbb\x1b\x81\x00\x60\xee\xe1\x8e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test102(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0x374e60a22041
            srcAddr = 0x793fdda95989
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x060
            etherType = 0x774d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x37\x4e\x60\xa2\x20\x41',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x5a88),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0060),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x05),
                    action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\x37\x4e\x60\xa2\x20\x41\x79\x3f\xdd\xa9\x59\x89\x81\x00\x60\x60\x77\x4d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test103(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x41c2e1f955ca
            srcAddr = 0xa5a6833a914b
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x8db
            etherType = 0xf622
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    
    Egress packet on port 2:
        ethernet =
            dstAddr = 0x41c2e1f955ca
            srcAddr = 0xa5a6833a914b
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x8db
            etherType = 0xf622
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x41\xc2\xe1\xf9\x55\xca',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0002),
                    action_mc_index = hex_to_i16(0x45e8),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x08db),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x0d),
                    action_color = hex_to_byte(0x02),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0009),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x41\xc2\xe1\xf9\x55\xca\xa5\xa6\x83\x3a\x91\x4b\x81\x00\x68\xdb\xf6\x22\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 2
        exp_pkt = b'\x41\xc2\xe1\xf9\x55\xca\xa5\xa6\x83\x3a\x91\x4b\x81\x00\x68\xdb\xf6\x22\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test104(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x5ec3b0065da5
            srcAddr = 0x1162b95bea75
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xc62
            etherType = 0x1962
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x5e\xc3\xb0\x06\x5d\xa5',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0xc8b1),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0c62),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x09),
                    action_color = hex_to_byte(0x01),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000e),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x5e\xc3\xb0\x06\x5d\xa5\x11\x62\xb9\x5b\xea\x75\x81\x00\x6c\x62\x19\x62\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test105(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x69981fadc4d0
            srcAddr = 0x1fa53d8776a9
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xda1
            etherType = 0x196c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x69981fadc4d0
            srcAddr = 0x1fa53d8776a9
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xda1
            etherType = 0x196c
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x69\x98\x1f\xad\xc4\xd0',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0xe68b),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0da1),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x0f),
                    action_color = hex_to_byte(0x00),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0008),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x69\x98\x1f\xad\xc4\xd0\x1f\xa5\x3d\x87\x76\xa9\x81\x00\x6d\xa1\x19\x6c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x69\x98\x1f\xad\xc4\xd0\x1f\xa5\x3d\x87\x76\xa9\x81\x00\x6d\xa1\x19\x6c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test106(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0xc5bf6cd50de4
            srcAddr = 0x0e093da10e83
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xe2d
            etherType = 0xa71b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xc5\xbf\x6c\xd5\x0d\xe4',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x07cd),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0e2d),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x12),
                    action_color = hex_to_byte(0x03),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0003),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\xc5\xbf\x6c\xd5\x0d\xe4\x0e\x09\x3d\xa1\x0e\x83\x81\x00\x6e\x2d\xa7\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test107(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0xd6021651947a
            srcAddr = 0x134cb423352e
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xee7
            etherType = 0x03cd
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xd6021651947a
            srcAddr = 0x134cb423352e
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xee7
            etherType = 0x03cd
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xd6\x02\x16\x51\x94\x7a',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0x4d19),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0ee7),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x0c),
                    action_color = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\xd6\x02\x16\x51\x94\x7a\x13\x4c\xb4\x23\x35\x2e\x81\x00\x4e\xe7\x03\xcd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xd6\x02\x16\x51\x94\x7a\x13\x4c\xb4\x23\x35\x2e\x81\x00\x4e\xe7\x03\xcd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test108(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x8573b5f54e4f
            srcAddr = 0x67a3d2f748fd
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0x620
            etherType = 0x3356
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x85\x73\xb5\xf5\x4e\x4f',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x75c8),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0620),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x04),
                    action_color = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x85\x73\xb5\xf5\x4e\x4f\x67\xa3\xd2\xf7\x48\xfd\x81\x00\x46\x20\x33\x56\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test109(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x4e083844d761
            srcAddr = 0x7b1802ecc7ba
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x659
            etherType = 0x9835
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] resubmit_tbl <default> (do_resubmit)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x4e083844d761
            srcAddr = 0x7b1802ecc7ba
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x659
            etherType = 0x9835
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x4e\x08\x38\x44\xd7\x61',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0659),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x4e\x08\x38\x44\xd7\x61\x7b\x18\x02\xec\xc7\xba\x81\x00\x26\x59\x98\x35\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x4e\x08\x38\x44\xd7\x61\x7b\x18\x02\xec\xc7\xba\x81\x00\x26\x59\x98\x35\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test110(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0xe23714022374
            srcAddr = 0x20a2f6d5c1fe
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x115
            etherType = 0xe817
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] resubmit_tbl <default> (do_resubmit)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xe23714022374
            srcAddr = 0x20a2f6d5c1fe
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x115
            etherType = 0xe817
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xe2\x37\x14\x02\x23\x74',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\xe2\x37\x14\x02\x23\x74\x20\xa2\xf6\xd5\xc1\xfe\x81\x00\x21\x15\xe8\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xe2\x37\x14\x02\x23\x74\x20\xa2\xf6\xd5\xc1\xfe\x81\x00\x21\x15\xe8\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test111(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x8ddd613487d9
            srcAddr = 0x3c64a8f4051c
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x24a
            etherType = 0xc458
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x8d\xdd\x61\x34\x87\xd9',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x8d\xdd\x61\x34\x87\xd9\x3c\x64\xa8\xf4\x05\x1c\x81\x00\x22\x4a\xc4\x58\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test112(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0xa0d2018cb192
            srcAddr = 0xb1df101304d7
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0x7d7
            etherType = 0x7078
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 9:
        ethernet =
            dstAddr = 0xa0d2018cb192
            srcAddr = 0xb1df101304d7
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0x7d7
            etherType = 0x7078
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xa0\xd2\x01\x8c\xb1\x92',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0009),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x07d7),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\xa0\xd2\x01\x8c\xb1\x92\xb1\xdf\x10\x13\x04\xd7\x81\x00\x47\xd7\x70\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 9
        exp_pkt = b'\xa0\xd2\x01\x8c\xb1\x92\xb1\xdf\x10\x13\x04\xd7\x81\x00\x47\xd7\x70\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test113(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x7c5321318880
            srcAddr = 0x21a905e015c4
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0x8bc
            etherType = 0x5fa2
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 4:
        ethernet =
            dstAddr = 0x7c5321318880
            srcAddr = 0x21a905e015c4
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0x8bc
            etherType = 0x5fa2
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x7c\x53\x21\x31\x88\x80',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0004),)))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x7c\x53\x21\x31\x88\x80\x21\xa9\x05\xe0\x15\xc4\x81\x00\x48\xbc\x5f\xa2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 4
        exp_pkt = b'\x7c\x53\x21\x31\x88\x80\x21\xa9\x05\xe0\x15\xc4\x81\x00\x48\xbc\x5f\xa2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test114(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x273e54f9d120
            srcAddr = 0xe7e4ea6ec4f4
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xdef
            etherType = 0x853b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x27\x3e\x54\xf9\xd1\x20',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x27\x3e\x54\xf9\xd1\x20\xe7\xe4\xea\x6e\xc4\xf4\x81\x00\x4d\xef\x85\x3b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test115(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x154fa52af0f1
            srcAddr = 0xbf9ce41b528b
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b111
            cfi = 0b0
            vid = 0x1c7
            etherType = 0x9a38
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x15\x4f\xa5\x2a\xf0\xf1',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x15\x4f\xa5\x2a\xf0\xf1\xbf\x9c\xe4\x1b\x52\x8b\x81\x00\xe1\xc7\x9a\x38\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test116(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0xba57031495ab
            srcAddr = 0x8f7d9e221f55
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b100
            cfi = 0b0
            vid = 0x11f
            etherType = 0xcde3
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 4:
        ethernet =
            dstAddr = 0xba57031495ab
            srcAddr = 0x8f7d9e221f55
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b100
            cfi = 0b0
            vid = 0x11f
            etherType = 0xcde3
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xba\x57\x03\x14\x95\xab',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0004),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x011f),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\xba\x57\x03\x14\x95\xab\x8f\x7d\x9e\x22\x1f\x55\x81\x00\x81\x1f\xcd\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 4
        exp_pkt = b'\xba\x57\x03\x14\x95\xab\x8f\x7d\x9e\x22\x1f\x55\x81\x00\x81\x1f\xcd\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test117(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0xf3b2d7e85df0
            srcAddr = 0x4f53dc82a032
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b101
            cfi = 0b0
            vid = 0x012
            etherType = 0x13b0
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] egress_qos <miss>
    
    Egress packet on port 1:
        ethernet =
            dstAddr = 0xf3b2d7e85df0
            srcAddr = 0x4f53dc82a032
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b101
            cfi = 0b0
            vid = 0x012
            etherType = 0x13b0
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf3\xb2\xd7\xe8\x5d\xf0',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0001),)))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\xf3\xb2\xd7\xe8\x5d\xf0\x4f\x53\xdc\x82\xa0\x32\x81\x00\xa0\x12\x13\xb0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 1
        exp_pkt = b'\xf3\xb2\xd7\xe8\x5d\xf0\x4f\x53\xdc\x82\xa0\x32\x81\x00\xa0\x12\x13\xb0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test118(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x38e8f9601f5c
            srcAddr = 0x82b2a692f0c1
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xe20
            etherType = 0x633a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x38\xe8\xf9\x60\x1f\x5c',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0006),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x38\xe8\xf9\x60\x1f\x5c\x82\xb2\xa6\x92\xf0\xc1\x81\x00\x6e\x20\x63\x3a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test119(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0xaffbd1fddedc
            srcAddr = 0xd2a29a366b54
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xf23
            etherType = 0xe4fb
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (do_recirc)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 14:
        ethernet =
            dstAddr = 0xaffbd1fddedc
            srcAddr = 0xd2a29a366b54
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xf23
            etherType = 0xe4fb
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xaf\xfb\xd1\xfd\xde\xdc',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000e),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0f23),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x00),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000c),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\xaf\xfb\xd1\xfd\xde\xdc\xd2\xa2\x9a\x36\x6b\x54\x81\x00\x6f\x23\xe4\xfb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 14
        exp_pkt = b'\xaf\xfb\xd1\xfd\xde\xdc\xd2\xa2\x9a\x36\x6b\x54\x81\x00\x6f\x23\xe4\xfb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test120(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0xa49e7feac387
            srcAddr = 0xf410d61bb28f
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xba8
            etherType = 0x9e32
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (do_recirc)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xa49e7feac387
            srcAddr = 0xf410d61bb28f
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xba8
            etherType = 0x9e32
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xa4\x9e\x7f\xea\xc3\x87',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0001),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\xa4\x9e\x7f\xea\xc3\x87\xf4\x10\xd6\x1b\xb2\x8f\x81\x00\x6b\xa8\x9e\x32\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xa4\x9e\x7f\xea\xc3\x87\xf4\x10\xd6\x1b\xb2\x8f\x81\x00\x6b\xa8\x9e\x32\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test121(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x21e11eefa0e0
            srcAddr = 0x9da4871ca865
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x245
            etherType = 0x01ac
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x21\xe1\x1e\xef\xa0\xe0',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000d),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x21\xe1\x1e\xef\xa0\xe0\x9d\xa4\x87\x1c\xa8\x65\x81\x00\x62\x45\x01\xac\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test122(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x667a620da0ef
            srcAddr = 0xee8f7461184f
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x51e
            etherType = 0xf5f3
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (noop)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 7:
        ethernet =
            dstAddr = 0x667a620da0ef
            srcAddr = 0xee8f7461184f
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x51e
            etherType = 0xf5f3
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x66\x7a\x62\x0d\xa0\xef',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0007),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x051e),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x00),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0005),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x66\x7a\x62\x0d\xa0\xef\xee\x8f\x74\x61\x18\x4f\x81\x00\x65\x1e\xf5\xf3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 7
        exp_pkt = b'\x66\x7a\x62\x0d\xa0\xef\xee\x8f\x74\x61\x18\x4f\x81\x00\x65\x1e\xf5\xf3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test123(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x5e80b135b929
            srcAddr = 0xbcda1647ded7
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x3e5
            etherType = 0x35fb
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (noop)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 5:
        ethernet =
            dstAddr = 0x5e80b135b929
            srcAddr = 0xbcda1647ded7
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x3e5
            etherType = 0x35fb
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x5e\x80\xb1\x35\xb9\x29',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0005),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0003),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x5e\x80\xb1\x35\xb9\x29\xbc\xda\x16\x47\xde\xd7\x81\x00\x63\xe5\x35\xfb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 5
        exp_pkt = b'\x5e\x80\xb1\x35\xb9\x29\xbc\xda\x16\x47\xde\xd7\x81\x00\x63\xe5\x35\xfb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test124(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0xf4b5efb3ee44
            srcAddr = 0x4596b2bc968c
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xe4c
            etherType = 0xbfd8
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <miss>
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 5:
        ethernet =
            dstAddr = 0xf4b5efb3ee44
            srcAddr = 0x4596b2bc968c
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xe4c
            etherType = 0xbfd8
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf4\xb5\xef\xb3\xee\x44',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0005),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0e4c),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\xf4\xb5\xef\xb3\xee\x44\x45\x96\xb2\xbc\x96\x8c\x81\x00\x6e\x4c\xbf\xd8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 5
        exp_pkt = b'\xf4\xb5\xef\xb3\xee\x44\x45\x96\xb2\xbc\x96\x8c\x81\x00\x6e\x4c\xbf\xd8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test125(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x9c2739c71b1b
            srcAddr = 0x37910b0bc7c9
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x875
            etherType = 0xf25d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <miss>
        [ Action ] egress_qos <miss>
    
    Egress packet on port 14:
        ethernet =
            dstAddr = 0x9c2739c71b1b
            srcAddr = 0x37910b0bc7c9
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x875
            etherType = 0xf25d
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x9c\x27\x39\xc7\x1b\x1b',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000e),)))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x9c\x27\x39\xc7\x1b\x1b\x37\x91\x0b\x0b\xc7\xc9\x81\x00\x68\x75\xf2\x5d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 14
        exp_pkt = b'\x9c\x27\x39\xc7\x1b\x1b\x37\x91\x0b\x0b\xc7\xc9\x81\x00\x68\x75\xf2\x5d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test126(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xf711347296b1
            srcAddr = 0xa8ae0557ba3f
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x18e
            etherType = 0x3d99
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf7\x11\x34\x72\x96\xb1',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xf7\x11\x34\x72\x96\xb1\xa8\xae\x05\x57\xba\x3f\x81\x00\x61\x8e\x3d\x99\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test127(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x52797c020f29
            srcAddr = 0xae78dc0548ec
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0x9c3
            etherType = 0x9040
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 13:
        ethernet =
            dstAddr = 0x52797c020f29
            srcAddr = 0xae78dc0548ec
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0x9c3
            etherType = 0x9040
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x52\x79\x7c\x02\x0f\x29',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000d),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x09c3),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x00),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x09c3),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x52\x79\x7c\x02\x0f\x29\xae\x78\xdc\x05\x48\xec\x81\x00\x49\xc3\x90\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 13
        exp_pkt = b'\x52\x79\x7c\x02\x0f\x29\xae\x78\xdc\x05\x48\xec\x81\x00\x49\xc3\x90\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test128(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x04d5cf207d39
            srcAddr = 0x8c3b2bab1de4
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xc75
            etherType = 0x9243
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 1:
        ethernet =
            dstAddr = 0x04d5cf207d39
            srcAddr = 0x8c3b2bab1de4
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xc75
            etherType = 0x9243
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x04\xd5\xcf\x20\x7d\x39',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0001),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0c75),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x04\xd5\xcf\x20\x7d\x39\x8c\x3b\x2b\xab\x1d\xe4\x81\x00\x4c\x75\x92\x43\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 1
        exp_pkt = b'\x04\xd5\xcf\x20\x7d\x39\x8c\x3b\x2b\xab\x1d\xe4\x81\x00\x4c\x75\x92\x43\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test129(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x976a21df007b
            srcAddr = 0xf42b8202f091
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xca9
            etherType = 0x2d6a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x97\x6a\x21\xdf\x00\x7b',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0ca9),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x97\x6a\x21\xdf\x00\x7b\xf4\x2b\x82\x02\xf0\x91\x81\x00\x4c\xa9\x2d\x6a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test130(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0xf0cef806c0a8
            srcAddr = 0xfa6a6f957825
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b101
            cfi = 0b0
            vid = 0x692
            etherType = 0x26fc
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf0\xce\xf8\x06\xc0\xa8',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0692),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\xf0\xce\xf8\x06\xc0\xa8\xfa\x6a\x6f\x95\x78\x25\x81\x00\xa6\x92\x26\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test131(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0xbd99de2c7ac1
            srcAddr = 0xf76e1fbc01c2
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b100
            cfi = 0b0
            vid = 0x366
            etherType = 0xdfcb
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 6:
        ethernet =
            dstAddr = 0xbd99de2c7ac1
            srcAddr = 0xf76e1fbc01c2
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b100
            cfi = 0b0
            vid = 0x366
            etherType = 0xdfcb
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xbd\x99\xde\x2c\x7a\xc1',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0006),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0366),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\xbd\x99\xde\x2c\x7a\xc1\xf7\x6e\x1f\xbc\x01\xc2\x81\x00\x83\x66\xdf\xcb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 6
        exp_pkt = b'\xbd\x99\xde\x2c\x7a\xc1\xf7\x6e\x1f\xbc\x01\xc2\x81\x00\x83\x66\xdf\xcb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test132(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0xf1d9031828f6
            srcAddr = 0x6d0c733f0d00
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b111
            cfi = 0b0
            vid = 0x88a
            etherType = 0xdf1b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xf1d9031828f6
            srcAddr = 0x6d0c733f0d00
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b111
            cfi = 0b0
            vid = 0x88a
            etherType = 0xdf1b
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf1\xd9\x03\x18\x28\xf6',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x088a),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x00),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x088a),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\xf1\xd9\x03\x18\x28\xf6\x6d\x0c\x73\x3f\x0d\x00\x81\x00\xe8\x8a\xdf\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xf1\xd9\x03\x18\x28\xf6\x6d\x0c\x73\x3f\x0d\x00\x81\x00\xe8\x8a\xdf\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test133(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0xad6c675909ee
            srcAddr = 0x25937735e90a
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x8ee
            etherType = 0x5409
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <miss>
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xad6c675909ee
            srcAddr = 0x25937735e90a
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x8ee
            etherType = 0x5409
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xad\x6c\x67\x59\x09\xee',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x08ee),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x08ee),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\xad\x6c\x67\x59\x09\xee\x25\x93\x77\x35\xe9\x0a\x81\x00\x68\xee\x54\x09\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xad\x6c\x67\x59\x09\xee\x25\x93\x77\x35\xe9\x0a\x81\x00\x68\xee\x54\x09\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test134(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0xa36fef25694b
            srcAddr = 0x7924cf16c571
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x674
            etherType = 0x2f27
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <miss>
        [ Action ] egress_qos <miss>
    
    Egress packet on port 4:
        ethernet =
            dstAddr = 0xa36fef25694b
            srcAddr = 0x7924cf16c571
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x674
            etherType = 0x2f27
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xa3\x6f\xef\x25\x69\x4b',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0004),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0674),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\xa3\x6f\xef\x25\x69\x4b\x79\x24\xcf\x16\xc5\x71\x81\x00\x66\x74\x2f\x27\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 4
        exp_pkt = b'\xa3\x6f\xef\x25\x69\x4b\x79\x24\xcf\x16\xc5\x71\x81\x00\x66\x74\x2f\x27\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test135(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xafb6daa78178
            srcAddr = 0x1581477536e9
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xaef
            etherType = 0xd5a9
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xaf\xb6\xda\xa7\x81\x78',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0aef),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xaf\xb6\xda\xa7\x81\x78\x15\x81\x47\x75\x36\xe9\x81\x00\x6a\xef\xd5\xa9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test136(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x2cbbe891a9ac
            srcAddr = 0x91d3dd6e8b50
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xb3c
            etherType = 0x561d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (noop)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 5:
        ethernet =
            dstAddr = 0x2cbbe891a9ac
            srcAddr = 0x91d3dd6e8b50
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xb3c
            etherType = 0x561d
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x2c\xbb\xe8\x91\xa9\xac',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0005),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0b3c),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x00),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0b3c),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000c),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x2c\xbb\xe8\x91\xa9\xac\x91\xd3\xdd\x6e\x8b\x50\x81\x00\x6b\x3c\x56\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 5
        exp_pkt = b'\x2c\xbb\xe8\x91\xa9\xac\x91\xd3\xdd\x6e\x8b\x50\x81\x00\x6b\x3c\x56\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test137(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x7c75e1ffb463
            srcAddr = 0xc2b2888395cf
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xa4c
            etherType = 0x0025
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (noop)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 4:
        ethernet =
            dstAddr = 0x7c75e1ffb463
            srcAddr = 0xc2b2888395cf
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xa4c
            etherType = 0x0025
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x7c\x75\xe1\xff\xb4\x63',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0004),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0a4c),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000c),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x7c\x75\xe1\xff\xb4\x63\xc2\xb2\x88\x83\x95\xcf\x81\x00\x6a\x4c\x00\x25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 4
        exp_pkt = b'\x7c\x75\xe1\xff\xb4\x63\xc2\xb2\x88\x83\x95\xcf\x81\x00\x6a\x4c\x00\x25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test138(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x8f64262e69c9
            srcAddr = 0xf70aa85b1606
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xb97
            etherType = 0x8ebe
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x8f\x64\x26\x2e\x69\xc9',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0b97),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0000),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x8f\x64\x26\x2e\x69\xc9\xf7\x0a\xa8\x5b\x16\x06\x81\x00\x6b\x97\x8e\xbe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test139(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x074182e4b897
            srcAddr = 0x2193ba06a115
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xbf9
            etherType = 0x7ad1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (do_recirc)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 6:
        ethernet =
            dstAddr = 0x074182e4b897
            srcAddr = 0x2193ba06a115
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xbf9
            etherType = 0x7ad1
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x07\x41\x82\xe4\xb8\x97',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0006),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0bf9),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000f),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x07\x41\x82\xe4\xb8\x97\x21\x93\xba\x06\xa1\x15\x81\x00\x6b\xf9\x7a\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 6
        exp_pkt = b'\x07\x41\x82\xe4\xb8\x97\x21\x93\xba\x06\xa1\x15\x81\x00\x6b\xf9\x7a\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test140(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x2c33730d7e5e
            srcAddr = 0xc7a807d09c44
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x2ee
            etherType = 0x1221
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (do_recirc)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 15:
        ethernet =
            dstAddr = 0x2c33730d7e5e
            srcAddr = 0xc7a807d09c44
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x2ee
            etherType = 0x1221
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x2c\x33\x73\x0d\x7e\x5e',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000f),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x02ee),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x02ee),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000e),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x2c\x33\x73\x0d\x7e\x5e\xc7\xa8\x07\xd0\x9c\x44\x81\x00\x62\xee\x12\x21\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 15
        exp_pkt = b'\x2c\x33\x73\x0d\x7e\x5e\xc7\xa8\x07\xd0\x9c\x44\x81\x00\x62\xee\x12\x21\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test141(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0x0c469c917ebb
            srcAddr = 0x131ec92d7a90
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xb61
            etherType = 0xfa2d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x0c\x46\x9c\x91\x7e\xbb',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0b61),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0002),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\x0c\x46\x9c\x91\x7e\xbb\x13\x1e\xc9\x2d\x7a\x90\x81\x00\x6b\x61\xfa\x2d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test142(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0xf6e0c60c575b
            srcAddr = 0xcaca5f1db045
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x6e7
            etherType = 0xc697
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] resubmit_tbl <default> (do_resubmit)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 1:
        ethernet =
            dstAddr = 0xf6e0c60c575b
            srcAddr = 0xcaca5f1db045
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x6e7
            etherType = 0xc697
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf6\xe0\xc6\x0c\x57\x5b',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0001),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x06e7),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\xf6\xe0\xc6\x0c\x57\x5b\xca\xca\x5f\x1d\xb0\x45\x81\x00\x26\xe7\xc6\x97\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 1
        exp_pkt = b'\xf6\xe0\xc6\x0c\x57\x5b\xca\xca\x5f\x1d\xb0\x45\x81\x00\x26\xe7\xc6\x97\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test143(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x96441cfc0001
            srcAddr = 0x116259f5f335
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x176
            etherType = 0xa725
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] resubmit_tbl <default> (do_resubmit)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 13:
        ethernet =
            dstAddr = 0x96441cfc0001
            srcAddr = 0x116259f5f335
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x176
            etherType = 0xa725
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x96\x44\x1c\xfc\x00\x01',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000d),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0176),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0176),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x96\x44\x1c\xfc\x00\x01\x11\x62\x59\xf5\xf3\x35\x81\x00\x21\x76\xa7\x25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 13
        exp_pkt = b'\x96\x44\x1c\xfc\x00\x01\x11\x62\x59\xf5\xf3\x35\x81\x00\x21\x76\xa7\x25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test144(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0xbb93770e08ff
            srcAddr = 0xe886ab74c532
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x3c9
            etherType = 0xaa38
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xbb\x93\x77\x0e\x08\xff',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x03c9),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\xbb\x93\x77\x0e\x08\xff\xe8\x86\xab\x74\xc5\x32\x81\x00\x23\xc9\xaa\x38\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test145(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0xb111fde11028
            srcAddr = 0x1f777c2009be
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0xc8b
            etherType = 0xc25e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xb1\x11\xfd\xe1\x10\x28',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0c8b),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x18),
                    action_color = hex_to_byte(0x01),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\xb1\x11\xfd\xe1\x10\x28\x1f\x77\x7c\x20\x09\xbe\x81\x00\x2c\x8b\xc2\x5e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test146(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x59dd87cc0495
            srcAddr = 0x6752f424d499
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x4f0
            etherType = 0x272a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    
    Egress packet on port 12:
        ethernet =
            dstAddr = 0x59dd87cc0495
            srcAddr = 0x6752f424d499
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x4f0
            etherType = 0x272a
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x59\xdd\x87\xcc\x04\x95',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000c),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x04f0),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x17),
                    action_color = hex_to_byte(0x02),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x59\xdd\x87\xcc\x04\x95\x67\x52\xf4\x24\xd4\x99\x81\x00\x24\xf0\x27\x2a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 12
        exp_pkt = b'\x59\xdd\x87\xcc\x04\x95\x67\x52\xf4\x24\xd4\x99\x81\x00\x24\xf0\x27\x2a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test147(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0xf32603eae739
            srcAddr = 0x7cc81dded8f8
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0x281
            etherType = 0x300c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf3\x26\x03\xea\xe7\x39',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0281),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x09),
                    action_color = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\xf3\x26\x03\xea\xe7\x39\x7c\xc8\x1d\xde\xd8\xf8\x81\x00\x42\x81\x30\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test148(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x9c616d4ba491
            srcAddr = 0xf4f1be33718d
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xb03
            etherType = 0x6cf3
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    
    Egress packet on port 5:
        ethernet =
            dstAddr = 0x9c616d4ba491
            srcAddr = 0xf4f1be33718d
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xb03
            etherType = 0x6cf3
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x9c\x61\x6d\x4b\xa4\x91',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0005),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0b03),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x06),
                    action_color = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x9c\x61\x6d\x4b\xa4\x91\xf4\xf1\xbe\x33\x71\x8d\x81\x00\x4b\x03\x6c\xf3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 5
        exp_pkt = b'\x9c\x61\x6d\x4b\xa4\x91\xf4\xf1\xbe\x33\x71\x8d\x81\x00\x4b\x03\x6c\xf3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test149(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x351886fe7ec3
            srcAddr = 0x6425eca3515a
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x5ce
            etherType = 0x93da
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    
    Egress packet on port 8:
        ethernet =
            dstAddr = 0x351886fe7ec3
            srcAddr = 0x6425eca3515a
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x5ce
            etherType = 0x93da
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x35\x18\x86\xfe\x7e\xc3',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0008),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x05ce),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x06),
                    action_color = hex_to_byte(0x01),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0000),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x35\x18\x86\xfe\x7e\xc3\x64\x25\xec\xa3\x51\x5a\x81\x00\x65\xce\x93\xda\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 8
        exp_pkt = b'\x35\x18\x86\xfe\x7e\xc3\x64\x25\xec\xa3\x51\x5a\x81\x00\x65\xce\x93\xda\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test150(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x59db8afa842f
            srcAddr = 0xe9174c34f5f2
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xf4d
            etherType = 0x722a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x59\xdb\x8a\xfa\x84\x2f',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0f4d),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x0a),
                    action_color = hex_to_byte(0x00),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0008),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x59\xdb\x8a\xfa\x84\x2f\xe9\x17\x4c\x34\xf5\xf2\x81\x00\x6f\x4d\x72\x2a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test151(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x981ec07a4df9
            srcAddr = 0x537236691fff
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xbf9
            etherType = 0x89ad
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x981ec07a4df9
            srcAddr = 0x537236691fff
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xbf9
            etherType = 0x89ad
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x98\x1e\xc0\x7a\x4d\xf9',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0bf9),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x19),
                    action_color = hex_to_byte(0x02),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000c),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x98\x1e\xc0\x7a\x4d\xf9\x53\x72\x36\x69\x1f\xff\x81\x00\x6b\xf9\x89\xad\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x98\x1e\xc0\x7a\x4d\xf9\x53\x72\x36\x69\x1f\xff\x81\x00\x6b\xf9\x89\xad\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test152(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x1c7cef95d4ec
            srcAddr = 0x26098412b115
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xeb9
            etherType = 0xcbd8
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x1c\x7c\xef\x95\xd4\xec',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0eb9),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x04),
                    action_color = hex_to_byte(0x03),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0009),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x1c\x7c\xef\x95\xd4\xec\x26\x09\x84\x12\xb1\x15\x81\x00\x6e\xb9\xcb\xd8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test153(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0xfaa2012ea031
            srcAddr = 0xd763f99cdd50
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x607
            etherType = 0x55f0
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xfa\xa2\x01\x2e\xa0\x31',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0607),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x14),
                    action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\xfa\xa2\x01\x2e\xa0\x31\xd7\x63\xf9\x9c\xdd\x50\x81\x00\x66\x07\x55\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test154(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xdbd2595b7a6d
            srcAddr = 0xb71d2fea1afe
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x575
            etherType = 0x2538
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xdbd2595b7a6d
            srcAddr = 0xb71d2fea1afe
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x575
            etherType = 0x2538
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xdb\xd2\x59\x5b\x7a\x6d',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0575),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x03),
                    action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xdb\xd2\x59\x5b\x7a\x6d\xb7\x1d\x2f\xea\x1a\xfe\x81\x00\x65\x75\x25\x38\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xdb\xd2\x59\x5b\x7a\x6d\xb7\x1d\x2f\xea\x1a\xfe\x81\x00\x65\x75\x25\x38\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test155(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xd01124c1b3ce
            srcAddr = 0x6cfb61b409ff
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b101
            cfi = 0b0
            vid = 0x49b
            etherType = 0xca15
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xd0\x11\x24\xc1\xb3\xce',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x049b),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x01),
                    action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xd0\x11\x24\xc1\xb3\xce\x6c\xfb\x61\xb4\x09\xff\x81\x00\xa4\x9b\xca\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test156(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x83c37968c468
            srcAddr = 0x819f143c475c
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b100
            cfi = 0b0
            vid = 0x6f6
            etherType = 0x1c93
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x83c37968c468
            srcAddr = 0x819f143c475c
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b100
            cfi = 0b0
            vid = 0x6f6
            etherType = 0x1c93
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x83\xc3\x79\x68\xc4\x68',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x06f6),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x04),
                    action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x83\xc3\x79\x68\xc4\x68\x81\x9f\x14\x3c\x47\x5c\x81\x00\x86\xf6\x1c\x93\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x83\xc3\x79\x68\xc4\x68\x81\x9f\x14\x3c\x47\x5c\x81\x00\x86\xf6\x1c\x93\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test157(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0xf5f626781f2a
            srcAddr = 0x923d7b7f38ca
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0xa6d
            etherType = 0x737d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xf5f626781f2a
            srcAddr = 0x923d7b7f38ca
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0xa6d
            etherType = 0x737d
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf5\xf6\x26\x78\x1f\x2a',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0a6d),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0a6d),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x16),
                    action_color = hex_to_byte(0x02),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\xf5\xf6\x26\x78\x1f\x2a\x92\x3d\x7b\x7f\x38\xca\x81\x00\x2a\x6d\x73\x7d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xf5\xf6\x26\x78\x1f\x2a\x92\x3d\x7b\x7f\x38\xca\x81\x00\x2a\x6d\x73\x7d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test158(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x7582ac1e0e09
            srcAddr = 0xaa2aa9b743c3
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x8b1
            etherType = 0x0084
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x7582ac1e0e09
            srcAddr = 0xaa2aa9b743c3
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x8b1
            etherType = 0x0084
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x75\x82\xac\x1e\x0e\x09',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x08b1),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x19),
                    action_color = hex_to_byte(0x02),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x75\x82\xac\x1e\x0e\x09\xaa\x2a\xa9\xb7\x43\xc3\x81\x00\x28\xb1\x00\x84\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x75\x82\xac\x1e\x0e\x09\xaa\x2a\xa9\xb7\x43\xc3\x81\x00\x28\xb1\x00\x84\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test159(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x668aa2f7be5a
            srcAddr = 0xd77f55db2d5c
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x3a8
            etherType = 0x035b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x66\x8a\xa2\xf7\xbe\x5a',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x03a8),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x18),
                    action_color = hex_to_byte(0x03),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x66\x8a\xa2\xf7\xbe\x5a\xd7\x7f\x55\xdb\x2d\x5c\x81\x00\x23\xa8\x03\x5b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test160(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0xf88f2b70a099
            srcAddr = 0xfe777dce1b54
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b000
            cfi = 0b0
            vid = 0x390
            etherType = 0x8ada
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xf88f2b70a099
            srcAddr = 0xfe777dce1b54
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b000
            cfi = 0b0
            vid = 0x390
            etherType = 0x8ada
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf8\x8f\x2b\x70\xa0\x99',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0390),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0390),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x17),
                    action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\xf8\x8f\x2b\x70\xa0\x99\xfe\x77\x7d\xce\x1b\x54\x81\x00\x03\x90\x8a\xda\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xf8\x8f\x2b\x70\xa0\x99\xfe\x77\x7d\xce\x1b\x54\x81\x00\x03\x90\x8a\xda\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test161(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x066150c6ea83
            srcAddr = 0xad8c693e56a5
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b110
            cfi = 0b0
            vid = 0xadc
            etherType = 0x6e85
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x066150c6ea83
            srcAddr = 0xad8c693e56a5
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b110
            cfi = 0b0
            vid = 0xadc
            etherType = 0x6e85
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x06\x61\x50\xc6\xea\x83',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0adc),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x0b),
                    action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x06\x61\x50\xc6\xea\x83\xad\x8c\x69\x3e\x56\xa5\x81\x00\xca\xdc\x6e\x85\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x06\x61\x50\xc6\xea\x83\xad\x8c\x69\x3e\x56\xa5\x81\x00\xca\xdc\x6e\x85\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test162(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x4f2d726ae9d2
            srcAddr = 0x9045a70b6ba6
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b110
            cfi = 0b0
            vid = 0x77f
            etherType = 0xce08
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x4f\x2d\x72\x6a\xe9\xd2',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x077f),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x10),
                    action_color = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x4f\x2d\x72\x6a\xe9\xd2\x90\x45\xa7\x0b\x6b\xa6\x81\x00\xc7\x7f\xce\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test163(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x7b4d318b20da
            srcAddr = 0xd73e648ed003
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xdb8
            etherType = 0xd294
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x7b\x4d\x31\x8b\x20\xda',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0db8),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x13),
                    action_color = hex_to_byte(0x01),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0000),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x7b\x4d\x31\x8b\x20\xda\xd7\x3e\x64\x8e\xd0\x03\x81\x00\x6d\xb8\xd2\x94\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test164(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0xc1f6e60eb02f
            srcAddr = 0xb68f3198b582
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x342
            etherType = 0x66df
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 2:
        ethernet =
            dstAddr = 0xc1f6e60eb02f
            srcAddr = 0xb68f3198b582
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x342
            etherType = 0x66df
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xc1\xf6\xe6\x0e\xb0\x2f',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0002),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0342),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0342),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x09),
                    action_color = hex_to_byte(0x03),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000c),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\xc1\xf6\xe6\x0e\xb0\x2f\xb6\x8f\x31\x98\xb5\x82\x81\x00\x63\x42\x66\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 2
        exp_pkt = b'\xc1\xf6\xe6\x0e\xb0\x2f\xb6\x8f\x31\x98\xb5\x82\x81\x00\x63\x42\x66\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test165(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0xd96e78f9aa8b
            srcAddr = 0xf5243b029c85
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x357
            etherType = 0xfb3b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xd96e78f9aa8b
            srcAddr = 0xf5243b029c85
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x357
            etherType = 0xfb3b
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xd9\x6e\x78\xf9\xaa\x8b',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0357),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x03),
                    action_color = hex_to_byte(0x02),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0006),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\xd9\x6e\x78\xf9\xaa\x8b\xf5\x24\x3b\x02\x9c\x85\x81\x00\x63\x57\xfb\x3b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xd9\x6e\x78\xf9\xaa\x8b\xf5\x24\x3b\x02\x9c\x85\x81\x00\x63\x57\xfb\x3b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test166(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0xdd0a484a3e86
            srcAddr = 0x68cbbf37dfbc
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x8ce
            etherType = 0xacd3
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xdd0a484a3e86
            srcAddr = 0x68cbbf37dfbc
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x8ce
            etherType = 0xacd3
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xdd\x0a\x48\x4a\x3e\x86',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x08ce),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x11),
                    action_color = hex_to_byte(0x01),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0000),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\xdd\x0a\x48\x4a\x3e\x86\x68\xcb\xbf\x37\xdf\xbc\x81\x00\x68\xce\xac\xd3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xdd\x0a\x48\x4a\x3e\x86\x68\xcb\xbf\x37\xdf\xbc\x81\x00\x68\xce\xac\xd3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test167(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x65371802d7d9
            srcAddr = 0xcb1970634881
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x452
            etherType = 0xb857
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 9:
        ethernet =
            dstAddr = 0x65371802d7d9
            srcAddr = 0xcb1970634881
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x452
            etherType = 0xb857
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x65\x37\x18\x02\xd7\xd9',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0009),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0452),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0452),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x0a),
                    action_color = hex_to_byte(0x00),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000f),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x65\x37\x18\x02\xd7\xd9\xcb\x19\x70\x63\x48\x81\x81\x00\x64\x52\xb8\x57\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 9
        exp_pkt = b'\x65\x37\x18\x02\xd7\xd9\xcb\x19\x70\x63\x48\x81\x81\x00\x64\x52\xb8\x57\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test168(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0xc4fcb7b75b8a
            srcAddr = 0x02211f6df68f
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xffb
            etherType = 0x5e0c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xc4\xfc\xb7\xb7\x5b\x8a',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0ffb),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1f),
                    action_color = hex_to_byte(0x01),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000b),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\xc4\xfc\xb7\xb7\x5b\x8a\x02\x21\x1f\x6d\xf6\x8f\x81\x00\x6f\xfb\x5e\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test169(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0xb950f60cbb32
            srcAddr = 0xf629baf0f69d
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x860
            etherType = 0x7dfb
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xb9\x50\xf6\x0c\xbb\x32',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0860),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x0a),
                    action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\xb9\x50\xf6\x0c\xbb\x32\xf6\x29\xba\xf0\xf6\x9d\x81\x00\x68\x60\x7d\xfb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test170(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x59cfa2f7f870
            srcAddr = 0x8257ca55cb12
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x829
            etherType = 0x9384
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
        [ Action ] egress_qos <miss>
    
    Egress packet on port 13:
        ethernet =
            dstAddr = 0x59cfa2f7f870
            srcAddr = 0x8257ca55cb12
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x829
            etherType = 0x9384
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x59\xcf\xa2\xf7\xf8\x70',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000d),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0829),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x13),
                    action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x59\xcf\xa2\xf7\xf8\x70\x82\x57\xca\x55\xcb\x12\x81\x00\x68\x29\x93\x84\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 13
        exp_pkt = b'\x59\xcf\xa2\xf7\xf8\x70\x82\x57\xca\x55\xcb\x12\x81\x00\x68\x29\x93\x84\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test171(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0xfc76b554272e
            srcAddr = 0xb7a4dc15266e
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xa55
            etherType = 0x4f6c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xfc76b554272e
            srcAddr = 0xb7a4dc15266e
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xa55
            etherType = 0x4f6c
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xfc\x76\xb5\x54\x27\x2e',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0a55),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0a55),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x09),
                    action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\xfc\x76\xb5\x54\x27\x2e\xb7\xa4\xdc\x15\x26\x6e\x81\x00\x6a\x55\x4f\x6c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xfc\x76\xb5\x54\x27\x2e\xb7\xa4\xdc\x15\x26\x6e\x81\x00\x6a\x55\x4f\x6c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test172(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0x537cdb637cf0
            srcAddr = 0x65e1fb1a3b1f
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0x418
            etherType = 0xc5c6
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x537cdb637cf0
            srcAddr = 0x65e1fb1a3b1f
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0x418
            etherType = 0xc5c6
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x53\x7c\xdb\x63\x7c\xf0',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0418),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1a),
                    action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\x53\x7c\xdb\x63\x7c\xf0\x65\xe1\xfb\x1a\x3b\x1f\x81\x00\x44\x18\xc5\xc6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x53\x7c\xdb\x63\x7c\xf0\x65\xe1\xfb\x1a\x3b\x1f\x81\x00\x44\x18\xc5\xc6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test173(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x770ca1a8c9df
            srcAddr = 0x134fb6895dd7
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xadd
            etherType = 0x111e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x770ca1a8c9df
            srcAddr = 0x134fb6895dd7
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xadd
            etherType = 0x111e
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x77\x0c\xa1\xa8\xc9\xdf',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table egress_qos
        match_spec = emulation_egress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0add),)
        self.match_entries['egress_qos'].append(
            self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_e2e_mirror_action_spec_t(
                    action_mirror_id = hex_to_byte(0x00),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0add),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x14),
                    action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x77\x0c\xa1\xa8\xc9\xdf\x13\x4f\xb6\x89\x5d\xd7\x81\x00\x4a\xdd\x11\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x77\x0c\xa1\xa8\xc9\xdf\x13\x4f\xb6\x89\x5d\xd7\x81\x00\x4a\xdd\x11\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test174(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x1f26c62a848b
            srcAddr = 0x264b41fab824
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xbe9
            etherType = 0x7921
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x1f\x26\xc6\x2a\x84\x8b',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0be9),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1c),
                    action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x1f\x26\xc6\x2a\x84\x8b\x26\x4b\x41\xfa\xb8\x24\x81\x00\x4b\xe9\x79\x21\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test175(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0xe9887d5ceffb
            srcAddr = 0x5207d5377f26
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0xa23
            etherType = 0x77b0
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xe9\x88\x7d\x5c\xef\xfb',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0a23),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1e),
                    action_mirror_id = hex_to_byte(0x00),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\xe9\x88\x7d\x5c\xef\xfb\x52\x07\xd5\x37\x7f\x26\x81\x00\x2a\x23\x77\xb0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test176(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x71e1d4eed1b4
            srcAddr = 0xea696902be93
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x5ed
            etherType = 0x939f
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x71e1d4eed1b4
            srcAddr = 0xea696902be93
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x5ed
            etherType = 0x939f
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x71\xe1\xd4\xee\xd1\xb4',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x05ed),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x0a),
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x71\xe1\xd4\xee\xd1\xb4\xea\x69\x69\x02\xbe\x93\x81\x00\x25\xed\x93\x9f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x71\xe1\xd4\xee\xd1\xb4\xea\x69\x69\x02\xbe\x93\x81\x00\x25\xed\x93\x9f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test177(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0xc65202432f01
            srcAddr = 0x045d0fc1eb21
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x1ef
            etherType = 0xce14
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xc6\x52\x02\x43\x2f\x01',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x01ef),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x0c),
                    action_mirror_id = hex_to_byte(0x00),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000b),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\xc6\x52\x02\x43\x2f\x01\x04\x5d\x0f\xc1\xeb\x21\x81\x00\x61\xef\xce\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test178(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x4f58f669d20b
            srcAddr = 0x675da6ae4cbc
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x705
            etherType = 0x7199
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    
    Egress packet on port 2:
        ethernet =
            dstAddr = 0x4f58f669d20b
            srcAddr = 0x675da6ae4cbc
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x705
            etherType = 0x7199
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x4f\x58\xf6\x69\xd2\x0b',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0002),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0705),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1e),
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000f),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x4f\x58\xf6\x69\xd2\x0b\x67\x5d\xa6\xae\x4c\xbc\x81\x00\x67\x05\x71\x99\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 2
        exp_pkt = b'\x4f\x58\xf6\x69\xd2\x0b\x67\x5d\xa6\xae\x4c\xbc\x81\x00\x67\x05\x71\x99\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test179(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x8f193dd639d1
            srcAddr = 0x264490bb7592
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x47d
            etherType = 0xdece
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x8f\x19\x3d\xd6\x39\xd1',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x047d),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x09),
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0004),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x8f\x19\x3d\xd6\x39\xd1\x26\x44\x90\xbb\x75\x92\x81\x00\x64\x7d\xde\xce\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test180(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x25eb54d3df59
            srcAddr = 0xfebd8ece82ba
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x047
            etherType = 0x4cd8
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x25eb54d3df59
            srcAddr = 0xfebd8ece82ba
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x047
            etherType = 0x4cd8
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x25\xeb\x54\xd3\xdf\x59',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0047),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1e),
                    action_mirror_id = hex_to_byte(0x00),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0006),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x25\xeb\x54\xd3\xdf\x59\xfe\xbd\x8e\xce\x82\xba\x81\x00\x60\x47\x4c\xd8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x25\xeb\x54\xd3\xdf\x59\xfe\xbd\x8e\xce\x82\xba\x81\x00\x60\x47\x4c\xd8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test181(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0x3821e77443e4
            srcAddr = 0xe3bfc9398237
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x71c
            etherType = 0x78a1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x38\x21\xe7\x74\x43\xe4',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x071c),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1a),
                    action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\x38\x21\xe7\x74\x43\xe4\xe3\xbf\xc9\x39\x82\x37\x81\x00\x67\x1c\x78\xa1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test182(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x8ff6595553ec
            srcAddr = 0x2ce7055dbb35
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x13a
            etherType = 0x21d9
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x8ff6595553ec
            srcAddr = 0x2ce7055dbb35
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x13a
            etherType = 0x21d9
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x8f\xf6\x59\x55\x53\xec',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x013a),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x16),
                    action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x8f\xf6\x59\x55\x53\xec\x2c\xe7\x05\x5d\xbb\x35\x81\x00\x61\x3a\x21\xd9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x8f\xf6\x59\x55\x53\xec\x2c\xe7\x05\x5d\xbb\x35\x81\x00\x61\x3a\x21\xd9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test183(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x27e1936773ab
            srcAddr = 0x02169b378fdc
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b101
            cfi = 0b0
            vid = 0xc1f
            etherType = 0xf3c1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x27\xe1\x93\x67\x73\xab',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0c1f),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1b),
                    action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x27\xe1\x93\x67\x73\xab\x02\x16\x9b\x37\x8f\xdc\x81\x00\xac\x1f\xf3\xc1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test184(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x453c2e142668
            srcAddr = 0x4163f060f74f
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b000
            cfi = 0b0
            vid = 0xee8
            etherType = 0x1ff6
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x453c2e142668
            srcAddr = 0x4163f060f74f
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b000
            cfi = 0b0
            vid = 0xee8
            etherType = 0x1ff6
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x45\x3c\x2e\x14\x26\x68',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0ee8),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x0c),
                    action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x45\x3c\x2e\x14\x26\x68\x41\x63\xf0\x60\xf7\x4f\x81\x00\x0e\xe8\x1f\xf6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x45\x3c\x2e\x14\x26\x68\x41\x63\xf0\x60\xf7\x4f\x81\x00\x0e\xe8\x1f\xf6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test185(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x3427ec402170
            srcAddr = 0x273e59d4b162
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xee2
            etherType = 0x61fc
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    
    Egress packet on port 0:
        ethernet =
            dstAddr = 0x3427ec402170
            srcAddr = 0x273e59d4b162
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xee2
            etherType = 0x61fc
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x34\x27\xec\x40\x21\x70',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0000),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0ee2),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x11),
                    action_mirror_id = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x34\x27\xec\x40\x21\x70\x27\x3e\x59\xd4\xb1\x62\x81\x00\x4e\xe2\x61\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 0
        exp_pkt = b'\x34\x27\xec\x40\x21\x70\x27\x3e\x59\xd4\xb1\x62\x81\x00\x4e\xe2\x61\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test186(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x6c0533211802
            srcAddr = 0x72b0b486ef3e
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xd2a
            etherType = 0xcb29
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x6c\x05\x33\x21\x18\x02',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0d2a),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x0e),
                    action_mirror_id = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x6c\x05\x33\x21\x18\x02\x72\xb0\xb4\x86\xef\x3e\x81\x00\x4d\x2a\xcb\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test187(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x6d090f4ff4ed
            srcAddr = 0x527b6296ab53
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0x972
            etherType = 0x748e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x6d\x09\x0f\x4f\xf4\xed',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0xa7c5),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0972),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x6d\x09\x0f\x4f\xf4\xed\x52\x7b\x62\x96\xab\x53\x81\x00\x49\x72\x74\x8e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test188(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x87c12fa9e2e8
            srcAddr = 0xf0867516b8de
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x745
            etherType = 0x740a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x87\xc1\x2f\xa9\xe2\xe8',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x85b4),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0745),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x87\xc1\x2f\xa9\xe2\xe8\xf0\x86\x75\x16\xb8\xde\x81\x00\x67\x45\x74\x0a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test189(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x87c12fa9e2e8
            srcAddr = 0xf0867516b8de
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x745
            etherType = 0x740a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x87\xc1\x2f\xa9\xe2\xe8',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x85b4),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0745),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0000),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x87\xc1\x2f\xa9\xe2\xe8\xf0\x86\x75\x16\xb8\xde\x81\x00\x67\x45\x74\x0a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test190(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x87c12fa9e2e8
            srcAddr = 0xf0867516b8de
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x745
            etherType = 0x740a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x87\xc1\x2f\xa9\xe2\xe8',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x85b4),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0745),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0000),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x87\xc1\x2f\xa9\xe2\xe8\xf0\x86\x75\x16\xb8\xde\x81\x00\x67\x45\x74\x0a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test191(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x37477f7c8f94
            srcAddr = 0x5312e9de4f76
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b100
            cfi = 0b0
            vid = 0x610
            etherType = 0x5153
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_miss)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x37\x47\x7f\x7c\x8f\x94',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x8637),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0610),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x37\x47\x7f\x7c\x8f\x94\x53\x12\xe9\xde\x4f\x76\x81\x00\x86\x10\x51\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test192(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x4f24f6b355f7
            srcAddr = 0x8e9515e9c1d2
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0xd13
            etherType = 0x52b8
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x4f\x24\xf6\xb3\x55\xf7',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x6f28),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0d13),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x4f\x24\xf6\xb3\x55\xf7\x8e\x95\x15\xe9\xc1\xd2\x81\x00\x2d\x13\x52\xb8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test193(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0xfd4810aaede3
            srcAddr = 0x03ebfc0721b9
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0x269
            etherType = 0xa1d4
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xfd\x48\x10\xaa\xed\xe3',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0xe4ef),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0269),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x05),
                    action_mirror_id = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\xfd\x48\x10\xaa\xed\xe3\x03\xeb\xfc\x07\x21\xb9\x81\x00\x42\x69\xa1\xd4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test194(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0x7fe4ee0dd206
            srcAddr = 0x5e7159de05c6
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xfd5
            etherType = 0xa6c4
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x7f\xe4\xee\x0d\xd2\x06',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x6a94),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0fd5),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1d),
                    action_mirror_id = hex_to_byte(0x00),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0002),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\x7f\xe4\xee\x0d\xd2\x06\x5e\x71\x59\xde\x05\xc6\x81\x00\x6f\xd5\xa6\xc4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test195(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0x7fe4ee0dd206
            srcAddr = 0x5e7159de05c6
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xfd5
            etherType = 0xa6c4
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x7f\xe4\xee\x0d\xd2\x06',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x6a94),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0fd5),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1d),
                    action_mirror_id = hex_to_byte(0x00),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0002),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\x7f\xe4\xee\x0d\xd2\x06\x5e\x71\x59\xde\x05\xc6\x81\x00\x6f\xd5\xa6\xc4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test196(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0x7fe4ee0dd206
            srcAddr = 0x5e7159de05c6
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xfd5
            etherType = 0xa6c4
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x7f\xe4\xee\x0d\xd2\x06',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x6a94),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0fd5),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1d),
                    action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\x7f\xe4\xee\x0d\xd2\x06\x5e\x71\x59\xde\x05\xc6\x81\x00\x6f\xd5\xa6\xc4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test197(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x7d9f07fbe0bf
            srcAddr = 0xc275722f622d
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b000
            cfi = 0b0
            vid = 0x74d
            etherType = 0x3403
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x7d\x9f\x07\xfb\xe0\xbf',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x4f04),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x074d),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x0b),
                    action_mirror_id = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x7d\x9f\x07\xfb\xe0\xbf\xc2\x75\x72\x2f\x62\x2d\x81\x00\x07\x4d\x34\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test198(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x28bfaa1e22b3
            srcAddr = 0x3cf629de5721
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0xf45
            etherType = 0x1879
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x28\xbf\xaa\x1e\x22\xb3',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x37cf),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0f45),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x01),
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x28\xbf\xaa\x1e\x22\xb3\x3c\xf6\x29\xde\x57\x21\x81\x00\x2f\x45\x18\x79\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test199(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0xca4fd8b55a15
            srcAddr = 0x88ea2c958e80
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b000
            cfi = 0b0
            vid = 0xeb3
            etherType = 0x6f6e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xca\x4f\xd8\xb5\x5a\x15',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x4b35),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0eb3),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x03),
                    action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\xca\x4f\xd8\xb5\x5a\x15\x88\xea\x2c\x95\x8e\x80\x81\x00\x0e\xb3\x6f\x6e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test200(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0xa2b328830f1f
            srcAddr = 0xdb4dcf5ff232
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x009
            etherType = 0xfd02
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xa2\xb3\x28\x83\x0f\x1f',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0xceca),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0009),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x02),
                    action_color = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\xa2\xb3\x28\x83\x0f\x1f\xdb\x4d\xcf\x5f\xf2\x32\x81\x00\x60\x09\xfd\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test201(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0xa2b328830f1f
            srcAddr = 0xdb4dcf5ff232
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x009
            etherType = 0xfd02
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xa2\xb3\x28\x83\x0f\x1f',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0xceca),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0009),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x02),
                    action_color = hex_to_byte(0x00),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000e),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\xa2\xb3\x28\x83\x0f\x1f\xdb\x4d\xcf\x5f\xf2\x32\x81\x00\x60\x09\xfd\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test202(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0xa2b328830f1f
            srcAddr = 0xdb4dcf5ff232
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x009
            etherType = 0xfd02
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xa2\xb3\x28\x83\x0f\x1f',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0xceca),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0009),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x02),
                    action_color = hex_to_byte(0x00),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000e),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\xa2\xb3\x28\x83\x0f\x1f\xdb\x4d\xcf\x5f\xf2\x32\x81\x00\x60\x09\xfd\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test203(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xfced1a83f5d6
            srcAddr = 0xf7485047207e
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0x9c9
            etherType = 0xd2b8
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xfc\xed\x1a\x83\xf5\xd6',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x22e7),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x09c9),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x06),
                    action_color = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xfc\xed\x1a\x83\xf5\xd6\xf7\x48\x50\x47\x20\x7e\x81\x00\x49\xc9\xd2\xb8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test204(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x294b05de1238
            srcAddr = 0x149d51705314
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x2ef
            etherType = 0x2663
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x29\x4b\x05\xde\x12\x38',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0xd3f7),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x02ef),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x08),
                    action_color = hex_to_byte(0x02),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x29\x4b\x05\xde\x12\x38\x14\x9d\x51\x70\x53\x14\x81\x00\x22\xef\x26\x63\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test205(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x01b3c26704f4
            srcAddr = 0x911524c57ca6
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x4c3
            etherType = 0x75ea
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x01\xb3\xc2\x67\x04\xf4',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0xb141),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x04c3),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x0d),
                    action_color = hex_to_byte(0x03),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x01\xb3\xc2\x67\x04\xf4\x91\x15\x24\xc5\x7c\xa6\x81\x00\x24\xc3\x75\xea\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test206(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x5d9a1eacd93f
            srcAddr = 0xba2e09a7dee3
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x486
            etherType = 0x3944
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x5d\x9a\x1e\xac\xd9\x3f',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x0b3c),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0486),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x08),
                    action_color = hex_to_byte(0x03),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0003),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x5d\x9a\x1e\xac\xd9\x3f\xba\x2e\x09\xa7\xde\xe3\x81\x00\x64\x86\x39\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test207(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x5d9a1eacd93f
            srcAddr = 0xba2e09a7dee3
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x486
            etherType = 0x3944
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x5d\x9a\x1e\xac\xd9\x3f',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x0b3c),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0486),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x08),
                    action_color = hex_to_byte(0x03),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0003),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x5d\x9a\x1e\xac\xd9\x3f\xba\x2e\x09\xa7\xde\xe3\x81\x00\x64\x86\x39\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test208(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x5d9a1eacd93f
            srcAddr = 0xba2e09a7dee3
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x486
            etherType = 0x3944
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x5d\x9a\x1e\xac\xd9\x3f',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x0b3c),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0486),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x08),
                    action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x5d\x9a\x1e\xac\xd9\x3f\xba\x2e\x09\xa7\xde\xe3\x81\x00\x64\x86\x39\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test209(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0xa917ba06c277
            srcAddr = 0x29663a7ec493
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b000
            cfi = 0b0
            vid = 0x6da
            etherType = 0x0a33
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xa9\x17\xba\x06\xc2\x77',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x1ea2),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x06da),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1e),
                    action_color = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\xa9\x17\xba\x06\xc2\x77\x29\x66\x3a\x7e\xc4\x93\x81\x00\x06\xda\x0a\x33\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test210(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x4f76e6457b14
            srcAddr = 0x8e3ee5090976
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0x7af
            etherType = 0xfb0e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x4f\x76\xe6\x45\x7b\x14',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0xc918),)))
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x07af),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x0a),
                    action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x4f\x76\xe6\x45\x7b\x14\x8e\x3e\xe5\x09\x09\x76\x81\x00\x47\xaf\xfb\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test211(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x65b84a8df257
            srcAddr = 0xecb7c7e03055
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xd78
            etherType = 0x89a2
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <miss>
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x65\xb8\x4a\x8d\xf2\x57',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x0813),)))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x65\xb8\x4a\x8d\xf2\x57\xec\xb7\xc7\xe0\x30\x55\x81\x00\x4d\x78\x89\xa2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test212(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0xeca469647c2c
            srcAddr = 0x70f38941c6ce
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xe0f
            etherType = 0x0786
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xec\xa4\x69\x64\x7c\x2c',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x96c1),)))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\xec\xa4\x69\x64\x7c\x2c\x70\xf3\x89\x41\xc6\xce\x81\x00\x6e\x0f\x07\x86\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test213(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0xeca469647c2c
            srcAddr = 0x70f38941c6ce
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xe0f
            etherType = 0x0786
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xec\xa4\x69\x64\x7c\x2c',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x96c1),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0002),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\xec\xa4\x69\x64\x7c\x2c\x70\xf3\x89\x41\xc6\xce\x81\x00\x6e\x0f\x07\x86\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test214(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0xeca469647c2c
            srcAddr = 0x70f38941c6ce
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xe0f
            etherType = 0x0786
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xec\xa4\x69\x64\x7c\x2c',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x96c1),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0002),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\xec\xa4\x69\x64\x7c\x2c\x70\xf3\x89\x41\xc6\xce\x81\x00\x6e\x0f\x07\x86\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test215(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0xe3e45735250a
            srcAddr = 0x090bbdc44691
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b000
            cfi = 0b0
            vid = 0x9b8
            etherType = 0xf732
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xe3\xe4\x57\x35\x25\x0a',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0xa8f5),)))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\xe3\xe4\x57\x35\x25\x0a\x09\x0b\xbd\xc4\x46\x91\x81\x00\x09\xb8\xf7\x32\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test216(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x2d77ef711095
            srcAddr = 0x35328c6a3e3c
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x735
            etherType = 0x73c0
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <miss>
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x2d\x77\xef\x71\x10\x95',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0xa045),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x2d\x77\xef\x71\x10\x95\x35\x32\x8c\x6a\x3e\x3c\x81\x00\x27\x35\x73\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test217(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0xded0a9b004d2
            srcAddr = 0x80fa290ff4a7
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0x0cd
            etherType = 0x74bf
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x00cd),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x14),
                    action_color = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\xde\xd0\xa9\xb0\x04\xd2\x80\xfa\x29\x0f\xf4\xa7\x81\x00\x40\xcd\x74\xbf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test218(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x71b4ef23bc30
            srcAddr = 0x1713e795c369
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xb6e
            etherType = 0xe3c4
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0b6e),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1b),
                    action_color = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x71\xb4\xef\x23\xbc\x30\x17\x13\xe7\x95\xc3\x69\x81\x00\x6b\x6e\xe3\xc4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test219(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x71b4ef23bc30
            srcAddr = 0x1713e795c369
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xb6e
            etherType = 0xe3c4
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0b6e),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1b),
                    action_color = hex_to_byte(0x00),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000f),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x71\xb4\xef\x23\xbc\x30\x17\x13\xe7\x95\xc3\x69\x81\x00\x6b\x6e\xe3\xc4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test220(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x71b4ef23bc30
            srcAddr = 0x1713e795c369
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xb6e
            etherType = 0xe3c4
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0b6e),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1b),
                    action_color = hex_to_byte(0x00),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000f),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x71\xb4\xef\x23\xbc\x30\x17\x13\xe7\x95\xc3\x69\x81\x00\x6b\x6e\xe3\xc4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test221(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0xf59591bacfab
            srcAddr = 0x88b4ca0e8ad9
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b110
            cfi = 0b0
            vid = 0xc68
            etherType = 0xcac1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0c68),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x03),
                    action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\xf5\x95\x91\xba\xcf\xab\x88\xb4\xca\x0e\x8a\xd9\x81\x00\xcc\x68\xca\xc1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test222(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xadbad7349871
            srcAddr = 0x950e741884f4
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x57a
            etherType = 0xb246
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x057a),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x02),
                    action_color = hex_to_byte(0x00),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xad\xba\xd7\x34\x98\x71\x95\x0e\x74\x18\x84\xf4\x81\x00\x25\x7a\xb2\x46\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test223(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x5be82a11448f
            srcAddr = 0xc3be421cba60
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b000
            cfi = 0b0
            vid = 0xd30
            etherType = 0x7fea
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0d30),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x13),
                    action_color = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x5b\xe8\x2a\x11\x44\x8f\xc3\xbe\x42\x1c\xba\x60\x81\x00\x0d\x30\x7f\xea\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test224(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x73a779fac522
            srcAddr = 0x95a71a283817
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xa76
            etherType = 0xf740
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0a76),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1d),
                    action_color = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x73\xa7\x79\xfa\xc5\x22\x95\xa7\x1a\x28\x38\x17\x81\x00\x6a\x76\xf7\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test225(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x73a779fac522
            srcAddr = 0x95a71a283817
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xa76
            etherType = 0xf740
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0a76),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1d),
                    action_color = hex_to_byte(0x01),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000f),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x73\xa7\x79\xfa\xc5\x22\x95\xa7\x1a\x28\x38\x17\x81\x00\x6a\x76\xf7\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test226(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x73a779fac522
            srcAddr = 0x95a71a283817
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xa76
            etherType = 0xf740
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0a76),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1d),
                    action_color = hex_to_byte(0x01),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000f),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x73\xa7\x79\xfa\xc5\x22\x95\xa7\x1a\x28\x38\x17\x81\x00\x6a\x76\xf7\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test227(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x8619b5d48a73
            srcAddr = 0x0924f3fde68a
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xf15
            etherType = 0xabaa
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0f15),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x17),
                    action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x86\x19\xb5\xd4\x8a\x73\x09\x24\xf3\xfd\xe6\x8a\x81\x00\x4f\x15\xab\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test228(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0xf0d7f7154e29
            srcAddr = 0xe4b9a44008c7
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0xa91
            etherType = 0x1c54
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0a91),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1c),
                    action_color = hex_to_byte(0x00),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\xf0\xd7\xf7\x15\x4e\x29\xe4\xb9\xa4\x40\x08\xc7\x81\x00\x2a\x91\x1c\x54\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test229(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x003e4b0f03ad
            srcAddr = 0xaeff4f2edb44
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x62d
            etherType = 0xd215
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x062d),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x12),
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x00\x3e\x4b\x0f\x03\xad\xae\xff\x4f\x2e\xdb\x44\x81\x00\x26\x2d\xd2\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test230(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x3c7cf1d5ce59
            srcAddr = 0xd926a10a5d77
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0xa28
            etherType = 0xf4e0
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0a28),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x0d),
                    action_mirror_id = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x3c\x7c\xf1\xd5\xce\x59\xd9\x26\xa1\x0a\x5d\x77\x81\x00\x4a\x28\xf4\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test231(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x1382b4da1506
            srcAddr = 0x6c7c8788758f
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b111
            cfi = 0b0
            vid = 0xa90
            etherType = 0x355a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0a90),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x19),
                    action_mirror_id = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x13\x82\xb4\xda\x15\x06\x6c\x7c\x87\x88\x75\x8f\x81\x00\xea\x90\x35\x5a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test232(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x9ed9c52b0e70
            srcAddr = 0x92dd5b22d4c4
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x109
            etherType = 0x49bd
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0109),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1c),
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0000),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x9e\xd9\xc5\x2b\x0e\x70\x92\xdd\x5b\x22\xd4\xc4\x81\x00\x61\x09\x49\xbd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test233(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x9ed9c52b0e70
            srcAddr = 0x92dd5b22d4c4
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x109
            etherType = 0x49bd
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0109),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1c),
                    action_mirror_id = hex_to_byte(0x01),)))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0000),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x9e\xd9\xc5\x2b\x0e\x70\x92\xdd\x5b\x22\xd4\xc4\x81\x00\x61\x09\x49\xbd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test234(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x9ed9c52b0e70
            srcAddr = 0x92dd5b22d4c4
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x109
            etherType = 0x49bd
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0109),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                    action_qid = hex_to_byte(0x1c),
                    action_mirror_id = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x9e\xd9\xc5\x2b\x0e\x70\x92\xdd\x5b\x22\xd4\xc4\x81\x00\x61\x09\x49\xbd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test235(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0xfbde6b8eae8c
            srcAddr = 0x1a5288cbc37e
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0x761
            etherType = 0xaf99
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0761),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\xfb\xde\x6b\x8e\xae\x8c\x1a\x52\x88\xcb\xc3\x7e\x81\x00\x27\x61\xaf\x99\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test236(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xaaa4996b9600
            srcAddr = 0xaae355f75660
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xae9
            etherType = 0x4f81
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0ae9),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000f),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xaa\xa4\x99\x6b\x96\x00\xaa\xe3\x55\xf7\x56\x60\x81\x00\x6a\xe9\x4f\x81\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test237(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xaaa4996b9600
            srcAddr = 0xaae355f75660
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xae9
            etherType = 0x4f81
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0ae9),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x000f),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xaa\xa4\x99\x6b\x96\x00\xaa\xe3\x55\xf7\x56\x60\x81\x00\x6a\xe9\x4f\x81\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test238(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xaaa4996b9600
            srcAddr = 0xaae355f75660
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0xae9
            etherType = 0x4f81
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0ae9),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xaa\xa4\x99\x6b\x96\x00\xaa\xe3\x55\xf7\x56\x60\x81\x00\x6a\xe9\x4f\x81\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test239(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x31e2d758bb32
            srcAddr = 0x7500c6fd205c
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b110
            cfi = 0b0
            vid = 0xe9b
            etherType = 0xdd15
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_miss)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x0e9b),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x31\xe2\xd7\x58\xbb\x32\x75\x00\xc6\xfd\x20\x5c\x81\x00\xce\x9b\xdd\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test240(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0xdaded24d6739
            srcAddr = 0xa2e3107beca1
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0x1db
            etherType = 0x2e3d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table ingress_qos
        match_spec = emulation_ingress_qos_match_spec_t(
            vlan_tag__valid = 1,
            vlan_tag__vid = hex_to_i16(0x01db),)
        self.match_entries['ingress_qos'].append(
            self.client.ingress_qos_table_add_with_qos_miss(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\xda\xde\xd2\x4d\x67\x39\xa2\xe3\x10\x7b\xec\xa1\x81\x00\x41\xdb\x2e\x3d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test241(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x35e83a6d9b0b
            srcAddr = 0x881ce82fc29f
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b001
            cfi = 0b0
            vid = 0xbe4
            etherType = 0xdbee
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <miss>
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x35\xe8\x3a\x6d\x9b\x0b\x88\x1c\xe8\x2f\xc2\x9f\x81\x00\x2b\xe4\xdb\xee\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test242(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0xaad8ec893ba7
            srcAddr = 0x25fb4bf2b75f
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b010
            cfi = 0b0
            vid = 0x2d1
            etherType = 0x9f29
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <miss>
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\xaa\xd8\xec\x89\x3b\xa7\x25\xfb\x4b\xf2\xb7\x5f\x81\x00\x42\xd1\x9f\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test243(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0xf383dd45fd31
            srcAddr = 0x628a67c16129
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b101
            cfi = 0b0
            vid = 0xba4
            etherType = 0xd023
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        pass
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\xf3\x83\xdd\x45\xfd\x31\x62\x8a\x67\xc1\x61\x29\x81\x00\xab\xa4\xd0\x23\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test244(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x2762a4933d88
            srcAddr = 0xf5277b17b7f5
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x05f
            etherType = 0xf3a7
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0004),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_do_recirc(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x27\x62\xa4\x93\x3d\x88\xf5\x27\x7b\x17\xb7\xf5\x81\x00\x60\x5f\xf3\xa7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test245(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x2762a4933d88
            srcAddr = 0xf5277b17b7f5
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x05f
            etherType = 0xf3a7
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table recirc_tbl
        match_spec = emulation_recirc_tbl_match_spec_t(
            ig_intr_md_ingress_port = hex_to_i16(0x0004),)
        self.match_entries['recirc_tbl'].append(
            self.client.recirc_tbl_table_add_with_noop(
                self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x27\x62\xa4\x93\x3d\x88\xf5\x27\x7b\x17\xb7\xf5\x81\x00\x60\x5f\xf3\xa7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test246(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x2762a4933d88
            srcAddr = 0xf5277b17b7f5
            etherType = 0x8100
        vlan_tag_ =
            pcp = 0b011
            cfi = 0b0
            vid = 0x05f
            etherType = 0xf3a7
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Parser ] _parse_vlan
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        pass
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x27\x62\xa4\x93\x3d\x88\xf5\x27\x7b\x17\xb7\xf5\x81\x00\x60\x5f\xf3\xa7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test247(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0xd8e7d8915f1b
            srcAddr = 0x3eac03d47afa
            etherType = 0xc912
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xd8\xe7\xd8\x91\x5f\x1b',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\xd8\xe7\xd8\x91\x5f\x1b\x3e\xac\x03\xd4\x7a\xfa\xc9\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test248(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0xea8b2ac0c4ac
            srcAddr = 0xd8caf6f07fab
            etherType = 0xa121
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 5:
        ethernet =
            dstAddr = 0xea8b2ac0c4ac
            srcAddr = 0xd8caf6f07fab
            etherType = 0xa121
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xea\x8b\x2a\xc0\xc4\xac',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0005),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\xea\x8b\x2a\xc0\xc4\xac\xd8\xca\xf6\xf0\x7f\xab\xa1\x21\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 5
        exp_pkt = b'\xea\x8b\x2a\xc0\xc4\xac\xd8\xca\xf6\xf0\x7f\xab\xa1\x21\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test249(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0xee307fd26b4a
            srcAddr = 0x4239b54ddeb9
            etherType = 0xbae1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xee307fd26b4a
            srcAddr = 0x4239b54ddeb9
            etherType = 0xbae1
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xee\x30\x7f\xd2\x6b\x4a',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\xee\x30\x7f\xd2\x6b\x4a\x42\x39\xb5\x4d\xde\xb9\xba\xe1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xee\x30\x7f\xd2\x6b\x4a\x42\x39\xb5\x4d\xde\xb9\xba\xe1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test250(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0xa278aec4d4af
            srcAddr = 0x8fccf0009756
            etherType = 0xbad4
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <miss>
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xa278aec4d4af
            srcAddr = 0x8fccf0009756
            etherType = 0xbad4
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xa2\x78\xae\xc4\xd4\xaf',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\xa2\x78\xae\xc4\xd4\xaf\x8f\xcc\xf0\x00\x97\x56\xba\xd4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xa2\x78\xae\xc4\xd4\xaf\x8f\xcc\xf0\x00\x97\x56\xba\xd4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test251(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0xbf12296b4df1
            srcAddr = 0x804bd4051f57
            etherType = 0xfdf4
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <miss>
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xbf12296b4df1
            srcAddr = 0x804bd4051f57
            etherType = 0xfdf4
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xbf\x12\x29\x6b\x4d\xf1',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\xbf\x12\x29\x6b\x4d\xf1\x80\x4b\xd4\x05\x1f\x57\xfd\xf4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xbf\x12\x29\x6b\x4d\xf1\x80\x4b\xd4\x05\x1f\x57\xfd\xf4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test252(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x57e915748702
            srcAddr = 0x4ed538aa4a5e
            etherType = 0x8f67
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x57\xe9\x15\x74\x87\x02',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x57\xe9\x15\x74\x87\x02\x4e\xd5\x38\xaa\x4a\x5e\x8f\x67\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test253(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0xbfb122b25a5d
            srcAddr = 0x4548c6e3cd0f
            etherType = 0x6354
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (noop)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 4:
        ethernet =
            dstAddr = 0xbfb122b25a5d
            srcAddr = 0x4548c6e3cd0f
            etherType = 0x6354
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xbf\xb1\x22\xb2\x5a\x5d',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0004),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\xbf\xb1\x22\xb2\x5a\x5d\x45\x48\xc6\xe3\xcd\x0f\x63\x54\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 4
        exp_pkt = b'\xbf\xb1\x22\xb2\x5a\x5d\x45\x48\xc6\xe3\xcd\x0f\x63\x54\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test254(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x7cc7523e29e6
            srcAddr = 0xbd275c14325a
            etherType = 0x674b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (noop)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x7cc7523e29e6
            srcAddr = 0xbd275c14325a
            etherType = 0x674b
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x7c\xc7\x52\x3e\x29\xe6',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x01),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x7c\xc7\x52\x3e\x29\xe6\xbd\x27\x5c\x14\x32\x5a\x67\x4b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x7c\xc7\x52\x3e\x29\xe6\xbd\x27\x5c\x14\x32\x5a\x67\x4b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test255(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0xf35ec783ff0a
            srcAddr = 0x91fb9fb19449
            etherType = 0xb049
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf3\x5e\xc7\x83\xff\x0a',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\xf3\x5e\xc7\x83\xff\x0a\x91\xfb\x9f\xb1\x94\x49\xb0\x49\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test256(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x7699cb9f74e3
            srcAddr = 0xaf2dcca434f1
            etherType = 0xef15
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (do_recirc)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 15:
        ethernet =
            dstAddr = 0x7699cb9f74e3
            srcAddr = 0xaf2dcca434f1
            etherType = 0xef15
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x76\x99\xcb\x9f\x74\xe3',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000f),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x76\x99\xcb\x9f\x74\xe3\xaf\x2d\xcc\xa4\x34\xf1\xef\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 15
        exp_pkt = b'\x76\x99\xcb\x9f\x74\xe3\xaf\x2d\xcc\xa4\x34\xf1\xef\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test257(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x1733b75adf11
            srcAddr = 0xfe492809cf1e
            etherType = 0x9f30
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (do_recirc)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x1733b75adf11
            srcAddr = 0xfe492809cf1e
            etherType = 0x9f30
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x17\x33\xb7\x5a\xdf\x11',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x17\x33\xb7\x5a\xdf\x11\xfe\x49\x28\x09\xcf\x1e\x9f\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x17\x33\xb7\x5a\xdf\x11\xfe\x49\x28\x09\xcf\x1e\x9f\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test258(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x74a8040a38c8
            srcAddr = 0x64184298ec91
            etherType = 0xdeac
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x74\xa8\x04\x0a\x38\xc8',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x74\xa8\x04\x0a\x38\xc8\x64\x18\x42\x98\xec\x91\xde\xac\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test259(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x5d72ae720e72
            srcAddr = 0xf540af355aa4
            etherType = 0x2833
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x5d\x72\xae\x72\x0e\x72',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x5d\x72\xae\x72\x0e\x72\xf5\x40\xaf\x35\x5a\xa4\x28\x33\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test260(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x0fdf6406fb0d
            srcAddr = 0x33a3688d420b
            etherType = 0x3ae5
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 3:
        ethernet =
            dstAddr = 0x0fdf6406fb0d
            srcAddr = 0x33a3688d420b
            etherType = 0x3ae5
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x0f\xdf\x64\x06\xfb\x0d',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0003),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x01),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x0f\xdf\x64\x06\xfb\x0d\x33\xa3\x68\x8d\x42\x0b\x3a\xe5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 3
        exp_pkt = b'\x0f\xdf\x64\x06\xfb\x0d\x33\xa3\x68\x8d\x42\x0b\x3a\xe5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test261(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0xf3fe7346c087
            srcAddr = 0xc2c4b3d12876
            etherType = 0xddea
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xf3fe7346c087
            srcAddr = 0xc2c4b3d12876
            etherType = 0xddea
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf3\xfe\x73\x46\xc0\x87',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\xf3\xfe\x73\x46\xc0\x87\xc2\xc4\xb3\xd1\x28\x76\xdd\xea\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xf3\xfe\x73\x46\xc0\x87\xc2\xc4\xb3\xd1\x28\x76\xdd\xea\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test262(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0xc603b82222dc
            srcAddr = 0x242ea508f33a
            etherType = 0xaa7c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] resubmit_tbl <default> (do_resubmit)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 3:
        ethernet =
            dstAddr = 0xc603b82222dc
            srcAddr = 0x242ea508f33a
            etherType = 0xaa7c
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xc6\x03\xb8\x22\x22\xdc',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0003),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x01),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\xc6\x03\xb8\x22\x22\xdc\x24\x2e\xa5\x08\xf3\x3a\xaa\x7c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 3
        exp_pkt = b'\xc6\x03\xb8\x22\x22\xdc\x24\x2e\xa5\x08\xf3\x3a\xaa\x7c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test263(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x6e78bcc8fd27
            srcAddr = 0x3956f168c0ab
            etherType = 0x452e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] resubmit_tbl <default> (do_resubmit)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 4:
        ethernet =
            dstAddr = 0x6e78bcc8fd27
            srcAddr = 0x3956f168c0ab
            etherType = 0x452e
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x6e\x78\xbc\xc8\xfd\x27',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0004),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x6e\x78\xbc\xc8\xfd\x27\x39\x56\xf1\x68\xc0\xab\x45\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 4
        exp_pkt = b'\x6e\x78\xbc\xc8\xfd\x27\x39\x56\xf1\x68\xc0\xab\x45\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test264(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x6369330bda41
            srcAddr = 0x31f042cb3972
            etherType = 0xb693
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x63\x69\x33\x0b\xda\x41',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x63\x69\x33\x0b\xda\x41\x31\xf0\x42\xcb\x39\x72\xb6\x93\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test265(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x32d2986a50d3
            srcAddr = 0xdd53c46f0535
            etherType = 0xaa79
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x32d2986a50d3
            srcAddr = 0xdd53c46f0535
            etherType = 0xaa79
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x32\xd2\x98\x6a\x50\xd3',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x03),
                        action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x32\xd2\x98\x6a\x50\xd3\xdd\x53\xc4\x6f\x05\x35\xaa\x79\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x32\xd2\x98\x6a\x50\xd3\xdd\x53\xc4\x6f\x05\x35\xaa\x79\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test266(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0x5cb30369c44b
            srcAddr = 0xf38358f68aec
            etherType = 0x488a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x5c\xb3\x03\x69\xc4\x4b',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x09),
                        action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\x5c\xb3\x03\x69\xc4\x4b\xf3\x83\x58\xf6\x8a\xec\x48\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test267(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0xa4688b0dd298
            srcAddr = 0x588bc5c0307b
            etherType = 0x772f
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xa4\x68\x8b\x0d\xd2\x98',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x0a),
                        action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\xa4\x68\x8b\x0d\xd2\x98\x58\x8b\xc5\xc0\x30\x7b\x77\x2f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test268(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x4a484c082389
            srcAddr = 0xf862e9a19387
            etherType = 0xc4a0
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <miss>
    
    Egress packet on port 14:
        ethernet =
            dstAddr = 0x4a484c082389
            srcAddr = 0xf862e9a19387
            etherType = 0xc4a0
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x4a\x48\x4c\x08\x23\x89',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000e),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1d),
                        action_mirror_id = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x4a\x48\x4c\x08\x23\x89\xf8\x62\xe9\xa1\x93\x87\xc4\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 14
        exp_pkt = b'\x4a\x48\x4c\x08\x23\x89\xf8\x62\xe9\xa1\x93\x87\xc4\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test269(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x6c3db941311f
            srcAddr = 0xfae55be0a4af
            etherType = 0xcb81
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x6c3db941311f
            srcAddr = 0xfae55be0a4af
            etherType = 0xcb81
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x6c\x3d\xb9\x41\x31\x1f',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1b),
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x6c\x3d\xb9\x41\x31\x1f\xfa\xe5\x5b\xe0\xa4\xaf\xcb\x81\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x6c\x3d\xb9\x41\x31\x1f\xfa\xe5\x5b\xe0\xa4\xaf\xcb\x81\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test270(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0xe594f964c74e
            srcAddr = 0x835d6a10846a
            etherType = 0xf70e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xe5\x94\xf9\x64\xc7\x4e',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x0a),
                        action_mirror_id = hex_to_byte(0x01),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\xe5\x94\xf9\x64\xc7\x4e\x83\x5d\x6a\x10\x84\x6a\xf7\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test271(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0xf3b041a6801d
            srcAddr = 0xb0ce8e454193
            etherType = 0x6fb2
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf3\xb0\x41\xa6\x80\x1d',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x16),
                        action_mirror_id = hex_to_byte(0x01),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\xf3\xb0\x41\xa6\x80\x1d\xb0\xce\x8e\x45\x41\x93\x6f\xb2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test272(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0xa4d2edc57a48
            srcAddr = 0x2f43cfb56edc
            etherType = 0xd99d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    
    Egress packet on port 10:
        ethernet =
            dstAddr = 0xa4d2edc57a48
            srcAddr = 0x2f43cfb56edc
            etherType = 0xd99d
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xa4\xd2\xed\xc5\x7a\x48',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000a),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x04),
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\xa4\xd2\xed\xc5\x7a\x48\x2f\x43\xcf\xb5\x6e\xdc\xd9\x9d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 10
        exp_pkt = b'\xa4\xd2\xed\xc5\x7a\x48\x2f\x43\xcf\xb5\x6e\xdc\xd9\x9d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test273(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x8259b646f5ac
            srcAddr = 0xef083acb0d39
            etherType = 0x10e0
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x82\x59\xb6\x46\xf5\xac',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x15),
                        action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x82\x59\xb6\x46\xf5\xac\xef\x08\x3a\xcb\x0d\x39\x10\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test274(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x3e9b738b1cd6
            srcAddr = 0x84b728f93bbb
            etherType = 0xacc6
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x3e9b738b1cd6
            srcAddr = 0x84b728f93bbb
            etherType = 0xacc6
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x3e\x9b\x73\x8b\x1c\xd6',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1f),
                        action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x3e\x9b\x73\x8b\x1c\xd6\x84\xb7\x28\xf9\x3b\xbb\xac\xc6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x3e\x9b\x73\x8b\x1c\xd6\x84\xb7\x28\xf9\x3b\xbb\xac\xc6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test275(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x3f03964dbd93
            srcAddr = 0xd5600fc8ec95
            etherType = 0x3318
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x3f03964dbd93
            srcAddr = 0xd5600fc8ec95
            etherType = 0x3318
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x3f\x03\x96\x4d\xbd\x93',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x0e),
                        action_mirror_id = hex_to_byte(0x01),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x3f\x03\x96\x4d\xbd\x93\xd5\x60\x0f\xc8\xec\x95\x33\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x3f\x03\x96\x4d\xbd\x93\xd5\x60\x0f\xc8\xec\x95\x33\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test276(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0xa4bf9147acd9
            srcAddr = 0xa83490e1db5d
            etherType = 0xaea8
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xa4\xbf\x91\x47\xac\xd9',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x03),
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\xa4\xbf\x91\x47\xac\xd9\xa8\x34\x90\xe1\xdb\x5d\xae\xa8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test277(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x2d7911bdedc4
            srcAddr = 0xad5b3dd350f2
            etherType = 0x2286
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 1:
        ethernet =
            dstAddr = 0x2d7911bdedc4
            srcAddr = 0xad5b3dd350f2
            etherType = 0x2286
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x2d\x79\x11\xbd\xed\xc4',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0001),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1d),
                        action_color = hex_to_byte(0x01),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x2d\x79\x11\xbd\xed\xc4\xad\x5b\x3d\xd3\x50\xf2\x22\x86\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 1
        exp_pkt = b'\x2d\x79\x11\xbd\xed\xc4\xad\x5b\x3d\xd3\x50\xf2\x22\x86\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test278(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0xcd4f23186c1f
            srcAddr = 0x5163bfcb7836
            etherType = 0xa2e9
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xcd4f23186c1f
            srcAddr = 0x5163bfcb7836
            etherType = 0xa2e9
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xcd\x4f\x23\x18\x6c\x1f',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x0e),
                        action_color = hex_to_byte(0x00),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\xcd\x4f\x23\x18\x6c\x1f\x51\x63\xbf\xcb\x78\x36\xa2\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xcd\x4f\x23\x18\x6c\x1f\x51\x63\xbf\xcb\x78\x36\xa2\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test279(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xb0dbd2b3c93a
            srcAddr = 0xb53eb60097a2
            etherType = 0xa3d9
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xb0\xdb\xd2\xb3\xc9\x3a',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x16),
                        action_color = hex_to_byte(0x03),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xb0\xdb\xd2\xb3\xc9\x3a\xb5\x3e\xb6\x00\x97\xa2\xa3\xd9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test280(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x2fe4030e73b9
            srcAddr = 0x2a239116c19f
            etherType = 0x53b2
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x2fe4030e73b9
            srcAddr = 0x2a239116c19f
            etherType = 0x53b2
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x2f\xe4\x03\x0e\x73\xb9',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x10),
                        action_color = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x2f\xe4\x03\x0e\x73\xb9\x2a\x23\x91\x16\xc1\x9f\x53\xb2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x2f\xe4\x03\x0e\x73\xb9\x2a\x23\x91\x16\xc1\x9f\x53\xb2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test281(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x113866b074c1
            srcAddr = 0xa7bbfd20c66d
            etherType = 0x2cff
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x113866b074c1
            srcAddr = 0xa7bbfd20c66d
            etherType = 0x2cff
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x11\x38\x66\xb0\x74\xc1',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x01),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x02),
                        action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x11\x38\x66\xb0\x74\xc1\xa7\xbb\xfd\x20\xc6\x6d\x2c\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x11\x38\x66\xb0\x74\xc1\xa7\xbb\xfd\x20\xc6\x6d\x2c\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test282(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x195a3c9444eb
            srcAddr = 0x1404c064eab1
            etherType = 0x7453
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x19\x5a\x3c\x94\x44\xeb',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1e),
                        action_color = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x19\x5a\x3c\x94\x44\xeb\x14\x04\xc0\x64\xea\xb1\x74\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test283(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x9104d1af6110
            srcAddr = 0x63452e3c1711
            etherType = 0x80fe
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x91\x04\xd1\xaf\x61\x10',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x02),
                        action_color = hex_to_byte(0x01),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x91\x04\xd1\xaf\x61\x10\x63\x45\x2e\x3c\x17\x11\x80\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test284(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x67f082fbe595
            srcAddr = 0xabac462d370e
            etherType = 0x70b5
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 12:
        ethernet =
            dstAddr = 0x67f082fbe595
            srcAddr = 0xabac462d370e
            etherType = 0x70b5
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x67\xf0\x82\xfb\xe5\x95',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000c),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x12),
                        action_color = hex_to_byte(0x00),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x67\xf0\x82\xfb\xe5\x95\xab\xac\x46\x2d\x37\x0e\x70\xb5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 12
        exp_pkt = b'\x67\xf0\x82\xfb\xe5\x95\xab\xac\x46\x2d\x37\x0e\x70\xb5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test285(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x1ce5c17f2e8c
            srcAddr = 0x08313f86f6f5
            etherType = 0x211e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x1ce5c17f2e8c
            srcAddr = 0x08313f86f6f5
            etherType = 0x211e
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x1c\xe5\xc1\x7f\x2e\x8c',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x14),
                        action_color = hex_to_byte(0x03),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x1c\xe5\xc1\x7f\x2e\x8c\x08\x31\x3f\x86\xf6\xf5\x21\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x1c\xe5\xc1\x7f\x2e\x8c\x08\x31\x3f\x86\xf6\xf5\x21\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test286(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0xe6c3f4e4874e
            srcAddr = 0xe331fe9c7e6e
            etherType = 0x810e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xe6\xc3\xf4\xe4\x87\x4e',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x0a),
                        action_color = hex_to_byte(0x01),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\xe6\xc3\xf4\xe4\x87\x4e\xe3\x31\xfe\x9c\x7e\x6e\x81\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test287(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x7ffe0014ab11
            srcAddr = 0xe8a312e8e2e5
            etherType = 0x9a26
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x7ffe0014ab11
            srcAddr = 0xe8a312e8e2e5
            etherType = 0x9a26
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x7f\xfe\x00\x14\xab\x11',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x0b),
                        action_color = hex_to_byte(0x03),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x7f\xfe\x00\x14\xab\x11\xe8\xa3\x12\xe8\xe2\xe5\x9a\x26\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x7f\xfe\x00\x14\xab\x11\xe8\xa3\x12\xe8\xe2\xe5\x9a\x26\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test288(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x2c576a10114f
            srcAddr = 0x55bff2950ed3
            etherType = 0xee9b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x2c576a10114f
            srcAddr = 0x55bff2950ed3
            etherType = 0xee9b
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x2c\x57\x6a\x10\x11\x4f',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x04),
                        action_color = hex_to_byte(0x01),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x2c\x57\x6a\x10\x11\x4f\x55\xbf\xf2\x95\x0e\xd3\xee\x9b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x2c\x57\x6a\x10\x11\x4f\x55\xbf\xf2\x95\x0e\xd3\xee\x9b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test289(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x4664e27969a3
            srcAddr = 0xb012b7ea9ffa
            etherType = 0xc261
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x46\x64\xe2\x79\x69\xa3',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x11),
                        action_color = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x46\x64\xe2\x79\x69\xa3\xb0\x12\xb7\xea\x9f\xfa\xc2\x61\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test290(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x548ba82dc121
            srcAddr = 0x128d59f48dad
            etherType = 0xc294
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x548ba82dc121
            srcAddr = 0x128d59f48dad
            etherType = 0xc294
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x54\x8b\xa8\x2d\xc1\x21',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x11),
                        action_color = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x54\x8b\xa8\x2d\xc1\x21\x12\x8d\x59\xf4\x8d\xad\xc2\x94\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x54\x8b\xa8\x2d\xc1\x21\x12\x8d\x59\xf4\x8d\xad\xc2\x94\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test291(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0xd572a6551179
            srcAddr = 0x406161b2f00d
            etherType = 0x0238
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 8:
        ethernet =
            dstAddr = 0xd572a6551179
            srcAddr = 0x406161b2f00d
            etherType = 0x0238
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xd5\x72\xa6\x55\x11\x79',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0008),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x10),
                        action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\xd5\x72\xa6\x55\x11\x79\x40\x61\x61\xb2\xf0\x0d\x02\x38\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 8
        exp_pkt = b'\xd5\x72\xa6\x55\x11\x79\x40\x61\x61\xb2\xf0\x0d\x02\x38\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test292(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x9f1596bf5db9
            srcAddr = 0x4c118ee16477
            etherType = 0x5e69
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x9f\x15\x96\xbf\x5d\xb9',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1f),
                        action_color = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x9f\x15\x96\xbf\x5d\xb9\x4c\x11\x8e\xe1\x64\x77\x5e\x69\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test293(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x43ef5bd6a78a
            srcAddr = 0x985d5608af5e
            etherType = 0x8dcc
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 0:
        ethernet =
            dstAddr = 0x43ef5bd6a78a
            srcAddr = 0x985d5608af5e
            etherType = 0x8dcc
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x43\xef\x5b\xd6\xa7\x8a',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0000),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x01),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1d),
                        action_color = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x43\xef\x5b\xd6\xa7\x8a\x98\x5d\x56\x08\xaf\x5e\x8d\xcc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 0
        exp_pkt = b'\x43\xef\x5b\xd6\xa7\x8a\x98\x5d\x56\x08\xaf\x5e\x8d\xcc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test294(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x22311f5ecc06
            srcAddr = 0xd2632339feea
            etherType = 0x5991
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x22311f5ecc06
            srcAddr = 0xd2632339feea
            etherType = 0x5991
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x22\x31\x1f\x5e\xcc\x06',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x02),
                        action_color = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x22\x31\x1f\x5e\xcc\x06\xd2\x63\x23\x39\xfe\xea\x59\x91\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x22\x31\x1f\x5e\xcc\x06\xd2\x63\x23\x39\xfe\xea\x59\x91\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test295(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0xb85b4f3ea9fe
            srcAddr = 0x733fee5a185c
            etherType = 0xd620
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    
    Egress packet on port 13:
        ethernet =
            dstAddr = 0xb85b4f3ea9fe
            srcAddr = 0x733fee5a185c
            etherType = 0xd620
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xb8\x5b\x4f\x3e\xa9\xfe',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000d),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x16),
                        action_color = hex_to_byte(0x02),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\xb8\x5b\x4f\x3e\xa9\xfe\x73\x3f\xee\x5a\x18\x5c\xd6\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 13
        exp_pkt = b'\xb8\x5b\x4f\x3e\xa9\xfe\x73\x3f\xee\x5a\x18\x5c\xd6\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test296(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x78f04bb1a18e
            srcAddr = 0x9f939c2e68ac
            etherType = 0x868b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x78\xf0\x4b\xb1\xa1\x8e',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x0f),
                        action_color = hex_to_byte(0x02),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x78\xf0\x4b\xb1\xa1\x8e\x9f\x93\x9c\x2e\x68\xac\x86\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test297(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0xc65de6fc0a80
            srcAddr = 0x7ac7d7813066
            etherType = 0x464c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xc65de6fc0a80
            srcAddr = 0x7ac7d7813066
            etherType = 0x464c
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xc6\x5d\xe6\xfc\x0a\x80',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x17),
                        action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\xc6\x5d\xe6\xfc\x0a\x80\x7a\xc7\xd7\x81\x30\x66\x46\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xc6\x5d\xe6\xfc\x0a\x80\x7a\xc7\xd7\x81\x30\x66\x46\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test298(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x88f9e5e35761
            srcAddr = 0x842a552f32f5
            etherType = 0x90af
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x88\xf9\xe5\xe3\x57\x61',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x08),
                        action_color = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x88\xf9\xe5\xe3\x57\x61\x84\x2a\x55\x2f\x32\xf5\x90\xaf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test299(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x71c7ce424c5a
            srcAddr = 0xbfb0a4eff764
            etherType = 0x851a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x71\xc7\xce\x42\x4c\x5a',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x16),
                        action_color = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x71\xc7\xce\x42\x4c\x5a\xbf\xb0\xa4\xef\xf7\x64\x85\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test300(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x93fec8302957
            srcAddr = 0x2e8ec7131820
            etherType = 0x0d70
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x93fec8302957
            srcAddr = 0x2e8ec7131820
            etherType = 0x0d70
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x93\xfe\xc8\x30\x29\x57',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x14),
                        action_color = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x93\xfe\xc8\x30\x29\x57\x2e\x8e\xc7\x13\x18\x20\x0d\x70\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x93\xfe\xc8\x30\x29\x57\x2e\x8e\xc7\x13\x18\x20\x0d\x70\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test301(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0xcd700b231e67
            srcAddr = 0x75137bf154a0
            etherType = 0x3327
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xcd700b231e67
            srcAddr = 0x75137bf154a0
            etherType = 0x3327
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xcd\x70\x0b\x23\x1e\x67',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x15),
                        action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\xcd\x70\x0b\x23\x1e\x67\x75\x13\x7b\xf1\x54\xa0\x33\x27\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xcd\x70\x0b\x23\x1e\x67\x75\x13\x7b\xf1\x54\xa0\x33\x27\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test302(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x46dd995863f3
            srcAddr = 0x9c8c0d6f1496
            etherType = 0xda46
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x46\xdd\x99\x58\x63\xf3',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1a),
                        action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x46\xdd\x99\x58\x63\xf3\x9c\x8c\x0d\x6f\x14\x96\xda\x46\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test303(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0xf8613cd4c764
            srcAddr = 0x8dbfc64aeb97
            etherType = 0xa1c3
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xf8613cd4c764
            srcAddr = 0x8dbfc64aeb97
            etherType = 0xa1c3
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf8\x61\x3c\xd4\xc7\x64',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x09),
                        action_color = hex_to_byte(0x02),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\xf8\x61\x3c\xd4\xc7\x64\x8d\xbf\xc6\x4a\xeb\x97\xa1\xc3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xf8\x61\x3c\xd4\xc7\x64\x8d\xbf\xc6\x4a\xeb\x97\xa1\xc3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test304(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x92de9e4de77a
            srcAddr = 0x49a8525df629
            etherType = 0xc603
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x92\xde\x9e\x4d\xe7\x7a',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x0b),
                        action_color = hex_to_byte(0x03),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x92\xde\x9e\x4d\xe7\x7a\x49\xa8\x52\x5d\xf6\x29\xc6\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test305(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x4ba87eeef62c
            srcAddr = 0xc2c62c89e208
            etherType = 0x5e2a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x4b\xa8\x7e\xee\xf6\x2c',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x0a),
                        action_color = hex_to_byte(0x03),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x4b\xa8\x7e\xee\xf6\x2c\xc2\xc6\x2c\x89\xe2\x08\x5e\x2a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test306(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0xf5c48af7810f
            srcAddr = 0xd4627395ae07
            etherType = 0x9a37
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xf5c48af7810f
            srcAddr = 0xd4627395ae07
            etherType = 0x9a37
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf5\xc4\x8a\xf7\x81\x0f',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1f),
                        action_color = hex_to_byte(0x03),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\xf5\xc4\x8a\xf7\x81\x0f\xd4\x62\x73\x95\xae\x07\x9a\x37\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xf5\xc4\x8a\xf7\x81\x0f\xd4\x62\x73\x95\xae\x07\x9a\x37\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test307(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x19ccd8469117
            srcAddr = 0x1972e3f70d1f
            etherType = 0x76ef
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 9:
        ethernet =
            dstAddr = 0x19ccd8469117
            srcAddr = 0x1972e3f70d1f
            etherType = 0x76ef
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x19\xcc\xd8\x46\x91\x17',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0009),)))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x19\xcc\xd8\x46\x91\x17\x19\x72\xe3\xf7\x0d\x1f\x76\xef\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 9
        exp_pkt = b'\x19\xcc\xd8\x46\x91\x17\x19\x72\xe3\xf7\x0d\x1f\x76\xef\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test308(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x3e7888a642ed
            srcAddr = 0xd9377520259a
            etherType = 0xa9c4
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 1:
        ethernet =
            dstAddr = 0x3e7888a642ed
            srcAddr = 0xd9377520259a
            etherType = 0xa9c4
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x3e\x78\x88\xa6\x42\xed',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0001),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x3e\x78\x88\xa6\x42\xed\xd9\x37\x75\x20\x25\x9a\xa9\xc4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 1
        exp_pkt = b'\x3e\x78\x88\xa6\x42\xed\xd9\x37\x75\x20\x25\x9a\xa9\xc4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test309(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0xd4bcf4eeb429
            srcAddr = 0x3049b7f18493
            etherType = 0x3cb1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xd4\xbc\xf4\xee\xb4\x29',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\xd4\xbc\xf4\xee\xb4\x29\x30\x49\xb7\xf1\x84\x93\x3c\xb1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test310(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x4f6e3d5e5b9f
            srcAddr = 0xf960cd74a7f5
            etherType = 0x00ad
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x4f\x6e\x3d\x5e\x5b\x9f',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x4f\x6e\x3d\x5e\x5b\x9f\xf9\x60\xcd\x74\xa7\xf5\x00\xad\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test311(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x25f002f49268
            srcAddr = 0x013bded51bf4
            etherType = 0x160b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x25f002f49268
            srcAddr = 0x013bded51bf4
            etherType = 0x160b
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x25\xf0\x02\xf4\x92\x68',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x25\xf0\x02\xf4\x92\x68\x01\x3b\xde\xd5\x1b\xf4\x16\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x25\xf0\x02\xf4\x92\x68\x01\x3b\xde\xd5\x1b\xf4\x16\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test312(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x5a65fb8697a2
            srcAddr = 0xde0352c74a3e
            etherType = 0x02e3
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x5a65fb8697a2
            srcAddr = 0xde0352c74a3e
            etherType = 0x02e3
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x5a\x65\xfb\x86\x97\xa2',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x5a\x65\xfb\x86\x97\xa2\xde\x03\x52\xc7\x4a\x3e\x02\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x5a\x65\xfb\x86\x97\xa2\xde\x03\x52\xc7\x4a\x3e\x02\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test313(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xefe0ddc53f40
            srcAddr = 0x015841dfbafe
            etherType = 0x3347
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xef\xe0\xdd\xc5\x3f\x40',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xef\xe0\xdd\xc5\x3f\x40\x01\x58\x41\xdf\xba\xfe\x33\x47\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test314(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x9ee8c045cc0e
            srcAddr = 0xb56ca3180bbf
            etherType = 0xc9bc
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (do_recirc)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x9ee8c045cc0e
            srcAddr = 0xb56ca3180bbf
            etherType = 0xc9bc
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x9e\xe8\xc0\x45\xcc\x0e',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x01),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x9e\xe8\xc0\x45\xcc\x0e\xb5\x6c\xa3\x18\x0b\xbf\xc9\xbc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x9e\xe8\xc0\x45\xcc\x0e\xb5\x6c\xa3\x18\x0b\xbf\xc9\xbc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test315(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0xadd77db72c57
            srcAddr = 0x91125f9329d6
            etherType = 0x2715
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (do_recirc)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 1:
        ethernet =
            dstAddr = 0xadd77db72c57
            srcAddr = 0x91125f9329d6
            etherType = 0x2715
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xad\xd7\x7d\xb7\x2c\x57',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0001),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\xad\xd7\x7d\xb7\x2c\x57\x91\x12\x5f\x93\x29\xd6\x27\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 1
        exp_pkt = b'\xad\xd7\x7d\xb7\x2c\x57\x91\x12\x5f\x93\x29\xd6\x27\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test316(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x8ddf696bce59
            srcAddr = 0x7b1f27acf234
            etherType = 0xadd1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (noop)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x8ddf696bce59
            srcAddr = 0x7b1f27acf234
            etherType = 0xadd1
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x8d\xdf\x69\x6b\xce\x59',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x8d\xdf\x69\x6b\xce\x59\x7b\x1f\x27\xac\xf2\x34\xad\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x8d\xdf\x69\x6b\xce\x59\x7b\x1f\x27\xac\xf2\x34\xad\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test317(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x8a92ea4c5c69
            srcAddr = 0x64925717155f
            etherType = 0xd76f
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (noop)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x8a92ea4c5c69
            srcAddr = 0x64925717155f
            etherType = 0xd76f
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x8a\x92\xea\x4c\x5c\x69',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x01),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x8a\x92\xea\x4c\x5c\x69\x64\x92\x57\x17\x15\x5f\xd7\x6f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x8a\x92\xea\x4c\x5c\x69\x64\x92\x57\x17\x15\x5f\xd7\x6f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test318(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0xf071ad174775
            srcAddr = 0x1eb1e4d18c73
            etherType = 0x37e5
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf0\x71\xad\x17\x47\x75',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\xf0\x71\xad\x17\x47\x75\x1e\xb1\xe4\xd1\x8c\x73\x37\xe5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test319(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0xdcba97101ff2
            srcAddr = 0xd5cfed690146
            etherType = 0xc7c1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <miss>
        [ Action ] egress_qos <miss>
    
    Egress packet on port 0:
        ethernet =
            dstAddr = 0xdcba97101ff2
            srcAddr = 0xd5cfed690146
            etherType = 0xc7c1
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xdc\xba\x97\x10\x1f\xf2',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0000),)))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\xdc\xba\x97\x10\x1f\xf2\xd5\xcf\xed\x69\x01\x46\xc7\xc1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 0
        exp_pkt = b'\xdc\xba\x97\x10\x1f\xf2\xd5\xcf\xed\x69\x01\x46\xc7\xc1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test320(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x9c0d92be67fc
            srcAddr = 0x9bb7ae9ebae1
            etherType = 0x602f
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <miss>
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 9:
        ethernet =
            dstAddr = 0x9c0d92be67fc
            srcAddr = 0x9bb7ae9ebae1
            etherType = 0x602f
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x9c\x0d\x92\xbe\x67\xfc',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0009),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x9c\x0d\x92\xbe\x67\xfc\x9b\xb7\xae\x9e\xba\xe1\x60\x2f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 9
        exp_pkt = b'\x9c\x0d\x92\xbe\x67\xfc\x9b\xb7\xae\x9e\xba\xe1\x60\x2f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test321(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0xf9898c5a3960
            srcAddr = 0x2c256a0fd953
            etherType = 0x1848
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf9\x89\x8c\x5a\x39\x60',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\xf9\x89\x8c\x5a\x39\x60\x2c\x25\x6a\x0f\xd9\x53\x18\x48\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test322(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x106537779f00
            srcAddr = 0xb632fe621aed
            etherType = 0x304e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] resubmit_tbl <default> (do_resubmit)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x106537779f00
            srcAddr = 0xb632fe621aed
            etherType = 0x304e
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x10\x65\x37\x77\x9f\x00',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x10\x65\x37\x77\x9f\x00\xb6\x32\xfe\x62\x1a\xed\x30\x4e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x10\x65\x37\x77\x9f\x00\xb6\x32\xfe\x62\x1a\xed\x30\x4e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test323(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0x6561691caeaa
            srcAddr = 0x171a28b3e1c8
            etherType = 0xa47e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] resubmit_tbl <default> (do_resubmit)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x6561691caeaa
            srcAddr = 0x171a28b3e1c8
            etherType = 0xa47e
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x65\x61\x69\x1c\xae\xaa',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\x65\x61\x69\x1c\xae\xaa\x17\x1a\x28\xb3\xe1\xc8\xa4\x7e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x65\x61\x69\x1c\xae\xaa\x17\x1a\x28\xb3\xe1\xc8\xa4\x7e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test324(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xb5257401e195
            srcAddr = 0x7b53da66ca6e
            etherType = 0x6e82
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_unicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xb5\x25\x74\x01\xe1\x95',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_unicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_unicast_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xb5\x25\x74\x01\xe1\x95\x7b\x53\xda\x66\xca\x6e\x6e\x82\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test325(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0xa40d7ef4e2a3
            srcAddr = 0x56eb9e29e6f0
            etherType = 0x5958
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xa4\x0d\x7e\xf4\xe2\xa3',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x6ada),)))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\xa4\x0d\x7e\xf4\xe2\xa3\x56\xeb\x9e\x29\xe6\xf0\x59\x58\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test326(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x7fd24315f6d0
            srcAddr = 0x12de5750a6ea
            etherType = 0x311c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x7fd24315f6d0
            srcAddr = 0x12de5750a6ea
            etherType = 0x311c
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x7f\xd2\x43\x15\xf6\xd0',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0xe4bd),)))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x7f\xd2\x43\x15\xf6\xd0\x12\xde\x57\x50\xa6\xea\x31\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x7f\xd2\x43\x15\xf6\xd0\x12\xde\x57\x50\xa6\xea\x31\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test327(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0xfe3280518cb9
            srcAddr = 0xe263743e453b
            etherType = 0xf448
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 15:
        ethernet =
            dstAddr = 0xfe3280518cb9
            srcAddr = 0xe263743e453b
            etherType = 0xf448
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xfe\x32\x80\x51\x8c\xb9',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000f),
                    action_mc_index = hex_to_i16(0xa0cd),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\xfe\x32\x80\x51\x8c\xb9\xe2\x63\x74\x3e\x45\x3b\xf4\x48\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 15
        exp_pkt = b'\xfe\x32\x80\x51\x8c\xb9\xe2\x63\x74\x3e\x45\x3b\xf4\x48\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test328(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0xd6cb9a949e05
            srcAddr = 0x59f2673684ef
            etherType = 0xea5b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <miss>
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xd6cb9a949e05
            srcAddr = 0x59f2673684ef
            etherType = 0xea5b
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xd6\xcb\x9a\x94\x9e\x05',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0xd886),)))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\xd6\xcb\x9a\x94\x9e\x05\x59\xf2\x67\x36\x84\xef\xea\x5b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xd6\xcb\x9a\x94\x9e\x05\x59\xf2\x67\x36\x84\xef\xea\x5b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test329(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x11266135e31c
            srcAddr = 0xeabe58ae5ab3
            etherType = 0x1dcb
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <miss>
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x11266135e31c
            srcAddr = 0xeabe58ae5ab3
            etherType = 0x1dcb
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x11\x26\x61\x35\xe3\x1c',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0xaef5),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x11\x26\x61\x35\xe3\x1c\xea\xbe\x58\xae\x5a\xb3\x1d\xcb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x11\x26\x61\x35\xe3\x1c\xea\xbe\x58\xae\x5a\xb3\x1d\xcb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test330(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0x48ea1981721f
            srcAddr = 0x199bb3a0cc3a
            etherType = 0xb01d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x48\xea\x19\x81\x72\x1f',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x18af),)))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\x48\xea\x19\x81\x72\x1f\x19\x9b\xb3\xa0\xcc\x3a\xb0\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test331(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x32224345fcfc
            srcAddr = 0x27249d7fa259
            etherType = 0x3853
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x32\x22\x43\x45\xfc\xfc',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x95df),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x32\x22\x43\x45\xfc\xfc\x27\x24\x9d\x7f\xa2\x59\x38\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test332(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xc7ff01c9d6bb
            srcAddr = 0x9c36a2246a15
            etherType = 0x344e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (do_recirc)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 1:
        ethernet =
            dstAddr = 0xc7ff01c9d6bb
            srcAddr = 0x9c36a2246a15
            etherType = 0x344e
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xc7\xff\x01\xc9\xd6\xbb',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0001),
                    action_mc_index = hex_to_i16(0x6ffe),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xc7\xff\x01\xc9\xd6\xbb\x9c\x36\xa2\x24\x6a\x15\x34\x4e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 1
        exp_pkt = b'\xc7\xff\x01\xc9\xd6\xbb\x9c\x36\xa2\x24\x6a\x15\x34\x4e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test333(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x7e9ecd24d5e6
            srcAddr = 0x9d7388e152bd
            etherType = 0xde2e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (do_recirc)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x7e9ecd24d5e6
            srcAddr = 0x9d7388e152bd
            etherType = 0xde2e
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x7e\x9e\xcd\x24\xd5\xe6',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0x4019),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x7e\x9e\xcd\x24\xd5\xe6\x9d\x73\x88\xe1\x52\xbd\xde\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x7e\x9e\xcd\x24\xd5\xe6\x9d\x73\x88\xe1\x52\xbd\xde\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test334(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0xa9e23457683e
            srcAddr = 0x07d40d3afa05
            etherType = 0xd13c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xa9\xe2\x34\x57\x68\x3e',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x3b57),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\xa9\xe2\x34\x57\x68\x3e\x07\xd4\x0d\x3a\xfa\x05\xd1\x3c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test335(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0xf9179ae78bac
            srcAddr = 0x56b4730a8124
            etherType = 0x466f
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (noop)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 5:
        ethernet =
            dstAddr = 0xf9179ae78bac
            srcAddr = 0x56b4730a8124
            etherType = 0x466f
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf9\x17\x9a\xe7\x8b\xac',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0005),
                    action_mc_index = hex_to_i16(0xf10b),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\xf9\x17\x9a\xe7\x8b\xac\x56\xb4\x73\x0a\x81\x24\x46\x6f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 5
        exp_pkt = b'\xf9\x17\x9a\xe7\x8b\xac\x56\xb4\x73\x0a\x81\x24\x46\x6f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test336(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x2caa7f65fab0
            srcAddr = 0x09b5f54665dc
            etherType = 0x7836
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (noop)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 6:
        ethernet =
            dstAddr = 0x2caa7f65fab0
            srcAddr = 0x09b5f54665dc
            etherType = 0x7836
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x2c\xaa\x7f\x65\xfa\xb0',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0006),
                    action_mc_index = hex_to_i16(0xd96c),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x2c\xaa\x7f\x65\xfa\xb0\x09\xb5\xf5\x46\x65\xdc\x78\x36\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 6
        exp_pkt = b'\x2c\xaa\x7f\x65\xfa\xb0\x09\xb5\xf5\x46\x65\xdc\x78\x36\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test337(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x9f12197b5ec1
            srcAddr = 0x551d00557e7e
            etherType = 0xe6ad
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x9f12197b5ec1
            srcAddr = 0x551d00557e7e
            etherType = 0xe6ad
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x9f\x12\x19\x7b\x5e\xc1',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0xeb40),)))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x9f\x12\x19\x7b\x5e\xc1\x55\x1d\x00\x55\x7e\x7e\xe6\xad\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x9f\x12\x19\x7b\x5e\xc1\x55\x1d\x00\x55\x7e\x7e\xe6\xad\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test338(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x5019464f77a6
            srcAddr = 0x6c18cf2fdb60
            etherType = 0x5d6a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x5019464f77a6
            srcAddr = 0x6c18cf2fdb60
            etherType = 0x5d6a
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x50\x19\x46\x4f\x77\xa6',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0x3561),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x50\x19\x46\x4f\x77\xa6\x6c\x18\xcf\x2f\xdb\x60\x5d\x6a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x50\x19\x46\x4f\x77\xa6\x6c\x18\xcf\x2f\xdb\x60\x5d\x6a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test339(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x72eb24461ec6
            srcAddr = 0x86fa17a40f05
            etherType = 0x17eb
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x72\xeb\x24\x46\x1e\xc6',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0xc268),)))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x72\xeb\x24\x46\x1e\xc6\x86\xfa\x17\xa4\x0f\x05\x17\xeb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test340(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0x6142d9e28f61
            srcAddr = 0x1fa43753a3cd
            etherType = 0x14c0
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x61\x42\xd9\xe2\x8f\x61',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x4255),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\x61\x42\xd9\xe2\x8f\x61\x1f\xa4\x37\x53\xa3\xcd\x14\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test341(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0xc5c004a62450
            srcAddr = 0x129b1298c410
            etherType = 0xa6b3
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] resubmit_tbl <default> (do_resubmit)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 12:
        ethernet =
            dstAddr = 0xc5c004a62450
            srcAddr = 0x129b1298c410
            etherType = 0xa6b3
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xc5\xc0\x04\xa6\x24\x50',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000c),
                    action_mc_index = hex_to_i16(0xeba2),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\xc5\xc0\x04\xa6\x24\x50\x12\x9b\x12\x98\xc4\x10\xa6\xb3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 12
        exp_pkt = b'\xc5\xc0\x04\xa6\x24\x50\x12\x9b\x12\x98\xc4\x10\xa6\xb3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test342(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x55f282d53c7f
            srcAddr = 0xa11d4e86ac21
            etherType = 0xa629
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] resubmit_tbl <default> (do_resubmit)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 4:
        ethernet =
            dstAddr = 0x55f282d53c7f
            srcAddr = 0xa11d4e86ac21
            etherType = 0xa629
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x55\xf2\x82\xd5\x3c\x7f',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0004),
                    action_mc_index = hex_to_i16(0xbbf4),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x55\xf2\x82\xd5\x3c\x7f\xa1\x1d\x4e\x86\xac\x21\xa6\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 4
        exp_pkt = b'\x55\xf2\x82\xd5\x3c\x7f\xa1\x1d\x4e\x86\xac\x21\xa6\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test343(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x983f748c4ff3
            srcAddr = 0x67e70d6cf02c
            etherType = 0xbb63
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x98\x3f\x74\x8c\x4f\xf3',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x1c9b),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x98\x3f\x74\x8c\x4f\xf3\x67\xe7\x0d\x6c\xf0\x2c\xbb\x63\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test344(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0x548b1a88e8ea
            srcAddr = 0xbb30fdab6de1
            etherType = 0xb52e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x548b1a88e8ea
            srcAddr = 0xbb30fdab6de1
            etherType = 0xb52e
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x54\x8b\x1a\x88\xe8\xea',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0xf4da),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\x54\x8b\x1a\x88\xe8\xea\xbb\x30\xfd\xab\x6d\xe1\xb5\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x54\x8b\x1a\x88\xe8\xea\xbb\x30\xfd\xab\x6d\xe1\xb5\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test345(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x39685bc6c952
            srcAddr = 0x78b9b4210bac
            etherType = 0x3ce4
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x39685bc6c952
            srcAddr = 0x78b9b4210bac
            etherType = 0x3ce4
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x39\x68\x5b\xc6\xc9\x52',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0x82b6),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x39\x68\x5b\xc6\xc9\x52\x78\xb9\xb4\x21\x0b\xac\x3c\xe4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x39\x68\x5b\xc6\xc9\x52\x78\xb9\xb4\x21\x0b\xac\x3c\xe4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test346(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0x348d3192578b
            srcAddr = 0x207bf6ecfdad
            etherType = 0x38e2
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x34\x8d\x31\x92\x57\x8b',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0xc949),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\x34\x8d\x31\x92\x57\x8b\x20\x7b\xf6\xec\xfd\xad\x38\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test347(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x760a7faf059b
            srcAddr = 0x694abc13b4f5
            etherType = 0x4f6e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (noop)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 7:
        ethernet =
            dstAddr = 0x760a7faf059b
            srcAddr = 0x694abc13b4f5
            etherType = 0x4f6e
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x76\x0a\x7f\xaf\x05\x9b',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0007),
                    action_mc_index = hex_to_i16(0x445d),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x76\x0a\x7f\xaf\x05\x9b\x69\x4a\xbc\x13\xb4\xf5\x4f\x6e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 7
        exp_pkt = b'\x76\x0a\x7f\xaf\x05\x9b\x69\x4a\xbc\x13\xb4\xf5\x4f\x6e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test348(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0xa07c1933cc27
            srcAddr = 0x069882958da1
            etherType = 0x9361
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (noop)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 11:
        ethernet =
            dstAddr = 0xa07c1933cc27
            srcAddr = 0x069882958da1
            etherType = 0x9361
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xa0\x7c\x19\x33\xcc\x27',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000b),
                    action_mc_index = hex_to_i16(0x5bdd),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\xa0\x7c\x19\x33\xcc\x27\x06\x98\x82\x95\x8d\xa1\x93\x61\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 11
        exp_pkt = b'\xa0\x7c\x19\x33\xcc\x27\x06\x98\x82\x95\x8d\xa1\x93\x61\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test349(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x4304abd2ef51
            srcAddr = 0x5ec5714a9bb4
            etherType = 0xd259
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x43\x04\xab\xd2\xef\x51',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x2cb2),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x43\x04\xab\xd2\xef\x51\x5e\xc5\x71\x4a\x9b\xb4\xd2\x59\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test350(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x8b4f82d7474e
            srcAddr = 0xa77a0f6d2fa8
            etherType = 0x6242
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (do_recirc)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 0:
        ethernet =
            dstAddr = 0x8b4f82d7474e
            srcAddr = 0xa77a0f6d2fa8
            etherType = 0x6242
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x8b\x4f\x82\xd7\x47\x4e',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0000),
                    action_mc_index = hex_to_i16(0xc1a2),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x8b\x4f\x82\xd7\x47\x4e\xa7\x7a\x0f\x6d\x2f\xa8\x62\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 0
        exp_pkt = b'\x8b\x4f\x82\xd7\x47\x4e\xa7\x7a\x0f\x6d\x2f\xa8\x62\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test351(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x40d17030047d
            srcAddr = 0xeae5d78256c1
            etherType = 0x0cee
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (do_recirc)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 10:
        ethernet =
            dstAddr = 0x40d17030047d
            srcAddr = 0xeae5d78256c1
            etherType = 0x0cee
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x40\xd1\x70\x30\x04\x7d',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000a),
                    action_mc_index = hex_to_i16(0x64f2),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x40\xd1\x70\x30\x04\x7d\xea\xe5\xd7\x82\x56\xc1\x0c\xee\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 10
        exp_pkt = b'\x40\xd1\x70\x30\x04\x7d\xea\xe5\xd7\x82\x56\xc1\x0c\xee\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test352(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xecb02ba64a52
            srcAddr = 0x4ecd0e2473b6
            etherType = 0x4480
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <miss>
        [ Action ] egress_qos <miss>
    
    Egress packet on port 3:
        ethernet =
            dstAddr = 0xecb02ba64a52
            srcAddr = 0x4ecd0e2473b6
            etherType = 0x4480
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xec\xb0\x2b\xa6\x4a\x52',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0003),
                    action_mc_index = hex_to_i16(0x1561),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xec\xb0\x2b\xa6\x4a\x52\x4e\xcd\x0e\x24\x73\xb6\x44\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 3
        exp_pkt = b'\xec\xb0\x2b\xa6\x4a\x52\x4e\xcd\x0e\x24\x73\xb6\x44\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test353(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0xede3b7ea8d47
            srcAddr = 0x1146837624fb
            etherType = 0x7ca1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <miss>
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 15:
        ethernet =
            dstAddr = 0xede3b7ea8d47
            srcAddr = 0x1146837624fb
            etherType = 0x7ca1
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xed\xe3\xb7\xea\x8d\x47',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000f),
                    action_mc_index = hex_to_i16(0xb61a),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x01),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\xed\xe3\xb7\xea\x8d\x47\x11\x46\x83\x76\x24\xfb\x7c\xa1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 15
        exp_pkt = b'\xed\xe3\xb7\xea\x8d\x47\x11\x46\x83\x76\x24\xfb\x7c\xa1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test354(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x14808a16a1c7
            srcAddr = 0x466800c12c41
            etherType = 0xc7ba
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x14\x80\x8a\x16\xa1\xc7',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x3acf),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x14\x80\x8a\x16\xa1\xc7\x46\x68\x00\xc1\x2c\x41\xc7\xba\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test355(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x3af0b88aad36
            srcAddr = 0xaf7d3fd7ed14
            etherType = 0x6480
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x3a\xf0\xb8\x8a\xad\x36',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0xea97),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x3a\xf0\xb8\x8a\xad\x36\xaf\x7d\x3f\xd7\xed\x14\x64\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test356(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0xb0d52b6f54e3
            srcAddr = 0x959382d6ab66
            etherType = 0x87c8
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xb0d52b6f54e3
            srcAddr = 0x959382d6ab66
            etherType = 0x87c8
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xb0\xd5\x2b\x6f\x54\xe3',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0x5ff8),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\xb0\xd5\x2b\x6f\x54\xe3\x95\x93\x82\xd6\xab\x66\x87\xc8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xb0\xd5\x2b\x6f\x54\xe3\x95\x93\x82\xd6\xab\x66\x87\xc8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test357(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0xcb59a74ad180
            srcAddr = 0x0a9245a6ac3f
            etherType = 0x5908
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 3:
        ethernet =
            dstAddr = 0xcb59a74ad180
            srcAddr = 0x0a9245a6ac3f
            etherType = 0x5908
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xcb\x59\xa7\x4a\xd1\x80',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0003),
                    action_mc_index = hex_to_i16(0x7f24),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\xcb\x59\xa7\x4a\xd1\x80\x0a\x92\x45\xa6\xac\x3f\x59\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 3
        exp_pkt = b'\xcb\x59\xa7\x4a\xd1\x80\x0a\x92\x45\xa6\xac\x3f\x59\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test358(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x4a5fcff74aa2
            srcAddr = 0x54cc9271d1dc
            etherType = 0xbba5
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] resubmit_tbl <default> (do_resubmit)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 5:
        ethernet =
            dstAddr = 0x4a5fcff74aa2
            srcAddr = 0x54cc9271d1dc
            etherType = 0xbba5
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x4a\x5f\xcf\xf7\x4a\xa2',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0005),
                    action_mc_index = hex_to_i16(0x9270),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x01),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x4a\x5f\xcf\xf7\x4a\xa2\x54\xcc\x92\x71\xd1\xdc\xbb\xa5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 5
        exp_pkt = b'\x4a\x5f\xcf\xf7\x4a\xa2\x54\xcc\x92\x71\xd1\xdc\xbb\xa5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test359(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0x6918aa9afed8
            srcAddr = 0x1022bc8ada80
            etherType = 0x9f1b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] resubmit_tbl <default> (do_resubmit)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 14:
        ethernet =
            dstAddr = 0x6918aa9afed8
            srcAddr = 0x1022bc8ada80
            etherType = 0x9f1b
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x69\x18\xaa\x9a\xfe\xd8',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000e),
                    action_mc_index = hex_to_i16(0xa99d),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\x69\x18\xaa\x9a\xfe\xd8\x10\x22\xbc\x8a\xda\x80\x9f\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 14
        exp_pkt = b'\x69\x18\xaa\x9a\xfe\xd8\x10\x22\xbc\x8a\xda\x80\x9f\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test360(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x93d79547a030
            srcAddr = 0x289ce09c8a86
            etherType = 0x815b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x93\xd7\x95\x47\xa0\x30',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x4364),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x93\xd7\x95\x47\xa0\x30\x28\x9c\xe0\x9c\x8a\x86\x81\x5b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test361(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x242ea8b529b6
            srcAddr = 0xcf1308b30b05
            etherType = 0xe2d9
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x242ea8b529b6
            srcAddr = 0xcf1308b30b05
            etherType = 0xe2d9
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x24\x2e\xa8\xb5\x29\xb6',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0x675c),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x11),
                        action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x24\x2e\xa8\xb5\x29\xb6\xcf\x13\x08\xb3\x0b\x05\xe2\xd9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x24\x2e\xa8\xb5\x29\xb6\xcf\x13\x08\xb3\x0b\x05\xe2\xd9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test362(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0xc7ff76f1f5f9
            srcAddr = 0x2c8888970ba8
            etherType = 0x29cf
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xc7\xff\x76\xf1\xf5\xf9',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x9ab5),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1b),
                        action_color = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\xc7\xff\x76\xf1\xf5\xf9\x2c\x88\x88\x97\x0b\xa8\x29\xcf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test363(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0x032b88160141
            srcAddr = 0x62802b682679
            etherType = 0x26b1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x032b88160141
            srcAddr = 0x62802b682679
            etherType = 0x26b1
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x03\x2b\x88\x16\x01\x41',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0x6732),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x05),
                        action_color = hex_to_byte(0x02),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\x03\x2b\x88\x16\x01\x41\x62\x80\x2b\x68\x26\x79\x26\xb1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x03\x2b\x88\x16\x01\x41\x62\x80\x2b\x68\x26\x79\x26\xb1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test364(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0xc4241e0814c8
            srcAddr = 0x282dbe4b76fa
            etherType = 0xf48b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xc4\x24\x1e\x08\x14\xc8',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0xcd30),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x07),
                        action_color = hex_to_byte(0x02),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\xc4\x24\x1e\x08\x14\xc8\x28\x2d\xbe\x4b\x76\xfa\xf4\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test365(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0xe717a57ca510
            srcAddr = 0x83b6b0a2719a
            etherType = 0x2ea9
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xe7\x17\xa5\x7c\xa5\x10',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0xa9cd),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1f),
                        action_color = hex_to_byte(0x01),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\xe7\x17\xa5\x7c\xa5\x10\x83\xb6\xb0\xa2\x71\x9a\x2e\xa9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test366(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0xe65f0f57284e
            srcAddr = 0xf23d638715cc
            etherType = 0xe5dc
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    
    Egress packet on port 3:
        ethernet =
            dstAddr = 0xe65f0f57284e
            srcAddr = 0xf23d638715cc
            etherType = 0xe5dc
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xe6\x5f\x0f\x57\x28\x4e',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0003),
                    action_mc_index = hex_to_i16(0xc39e),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x03),
                        action_color = hex_to_byte(0x02),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\xe6\x5f\x0f\x57\x28\x4e\xf2\x3d\x63\x87\x15\xcc\xe5\xdc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 3
        exp_pkt = b'\xe6\x5f\x0f\x57\x28\x4e\xf2\x3d\x63\x87\x15\xcc\xe5\xdc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test367(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xdddfad824484
            srcAddr = 0x724dbaa71c3a
            etherType = 0xd9df
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
    
    Egress packet on port 0:
        ethernet =
            dstAddr = 0xdddfad824484
            srcAddr = 0x724dbaa71c3a
            etherType = 0xd9df
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xdd\xdf\xad\x82\x44\x84',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0000),
                    action_mc_index = hex_to_i16(0x3064),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x12),
                        action_color = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xdd\xdf\xad\x82\x44\x84\x72\x4d\xba\xa7\x1c\x3a\xd9\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 0
        exp_pkt = b'\xdd\xdf\xad\x82\x44\x84\x72\x4d\xba\xa7\x1c\x3a\xd9\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test368(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x5c9bb1e07fa5
            srcAddr = 0xa85d5af83728
            etherType = 0xde6b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x5c\x9b\xb1\xe0\x7f\xa5',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x7ae4),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x0a),
                        action_color = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x5c\x9b\xb1\xe0\x7f\xa5\xa8\x5d\x5a\xf8\x37\x28\xde\x6b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test369(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0xdf8408211c99
            srcAddr = 0xc48fc99077ea
            etherType = 0x390d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    
    Egress packet on port 2:
        ethernet =
            dstAddr = 0xdf8408211c99
            srcAddr = 0xc48fc99077ea
            etherType = 0x390d
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xdf\x84\x08\x21\x1c\x99',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0002),
                    action_mc_index = hex_to_i16(0x06a2),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1a),
                        action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\xdf\x84\x08\x21\x1c\x99\xc4\x8f\xc9\x90\x77\xea\x39\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 2
        exp_pkt = b'\xdf\x84\x08\x21\x1c\x99\xc4\x8f\xc9\x90\x77\xea\x39\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test370(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x31f8c683f0d2
            srcAddr = 0x783425d1cabb
            etherType = 0x914b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x31\xf8\xc6\x83\xf0\xd2',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x43d7),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x0a),
                        action_color = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x31\xf8\xc6\x83\xf0\xd2\x78\x34\x25\xd1\xca\xbb\x91\x4b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test371(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x390a3df3b4da
            srcAddr = 0x2bf835ce730c
            etherType = 0xae32
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    
    Egress packet on port 3:
        ethernet =
            dstAddr = 0x390a3df3b4da
            srcAddr = 0x2bf835ce730c
            etherType = 0xae32
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x39\x0a\x3d\xf3\xb4\xda',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0003),
                    action_mc_index = hex_to_i16(0x86fe),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1f),
                        action_color = hex_to_byte(0x00),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x39\x0a\x3d\xf3\xb4\xda\x2b\xf8\x35\xce\x73\x0c\xae\x32\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 3
        exp_pkt = b'\x39\x0a\x3d\xf3\xb4\xda\x2b\xf8\x35\xce\x73\x0c\xae\x32\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test372(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x6b0c81c5d9ec
            srcAddr = 0xc59c1bdeaea3
            etherType = 0xd2e5
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x6b\x0c\x81\xc5\xd9\xec',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x9b83),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x13),
                        action_color = hex_to_byte(0x00),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x6b\x0c\x81\xc5\xd9\xec\xc5\x9c\x1b\xde\xae\xa3\xd2\xe5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test373(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x5ee997f91831
            srcAddr = 0x0a17149d69ae
            etherType = 0xe49d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 11:
        ethernet =
            dstAddr = 0x5ee997f91831
            srcAddr = 0x0a17149d69ae
            etherType = 0xe49d
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x5e\xe9\x97\xf9\x18\x31',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000b),
                    action_mc_index = hex_to_i16(0x9f8c),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x03),
                        action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x5e\xe9\x97\xf9\x18\x31\x0a\x17\x14\x9d\x69\xae\xe4\x9d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 11
        exp_pkt = b'\x5e\xe9\x97\xf9\x18\x31\x0a\x17\x14\x9d\x69\xae\xe4\x9d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test374(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x860f0f2a6153
            srcAddr = 0x36bfb8c6d76a
            etherType = 0xe268
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x860f0f2a6153
            srcAddr = 0x36bfb8c6d76a
            etherType = 0xe268
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x86\x0f\x0f\x2a\x61\x53',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0x8edd),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1b),
                        action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x86\x0f\x0f\x2a\x61\x53\x36\xbf\xb8\xc6\xd7\x6a\xe2\x68\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x86\x0f\x0f\x2a\x61\x53\x36\xbf\xb8\xc6\xd7\x6a\xe2\x68\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test375(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x7fcbffbe7981
            srcAddr = 0xafc2066b2621
            etherType = 0x2b8e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x7f\xcb\xff\xbe\x79\x81',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x246f),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1b),
                        action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x7f\xcb\xff\xbe\x79\x81\xaf\xc2\x06\x6b\x26\x21\x2b\x8e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test376(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x91d1666c6464
            srcAddr = 0x70f1dfcf9374
            etherType = 0x337e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x91\xd1\x66\x6c\x64\x64',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x7495),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x0a),
                        action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x91\xd1\x66\x6c\x64\x64\x70\xf1\xdf\xcf\x93\x74\x33\x7e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test377(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x0363acc1a3f5
            srcAddr = 0x9876a8690c04
            etherType = 0x8dee
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0x0363acc1a3f5
            srcAddr = 0x9876a8690c04
            etherType = 0x8dee
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x03\x63\xac\xc1\xa3\xf5',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0xd6f6),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1e),
                        action_color = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x03\x63\xac\xc1\xa3\xf5\x98\x76\xa8\x69\x0c\x04\x8d\xee\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\x03\x63\xac\xc1\xa3\xf5\x98\x76\xa8\x69\x0c\x04\x8d\xee\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test378(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0xe0ae6b7609c0
            srcAddr = 0x62e2582079fe
            etherType = 0x25cc
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 6:
        ethernet =
            dstAddr = 0xe0ae6b7609c0
            srcAddr = 0x62e2582079fe
            etherType = 0x25cc
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xe0\xae\x6b\x76\x09\xc0',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0006),
                    action_mc_index = hex_to_i16(0xc23a),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1b),
                        action_color = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\xe0\xae\x6b\x76\x09\xc0\x62\xe2\x58\x20\x79\xfe\x25\xcc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 6
        exp_pkt = b'\xe0\xae\x6b\x76\x09\xc0\x62\xe2\x58\x20\x79\xfe\x25\xcc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test379(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x0f4d4ddbae73
            srcAddr = 0x31a78d0b43c5
            etherType = 0x45db
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 13:
        ethernet =
            dstAddr = 0x0f4d4ddbae73
            srcAddr = 0x31a78d0b43c5
            etherType = 0x45db
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x0f\x4d\x4d\xdb\xae\x73',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000d),
                    action_mc_index = hex_to_i16(0x6e98),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x09),
                        action_color = hex_to_byte(0x00),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x0f\x4d\x4d\xdb\xae\x73\x31\xa7\x8d\x0b\x43\xc5\x45\xdb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 13
        exp_pkt = b'\x0f\x4d\x4d\xdb\xae\x73\x31\xa7\x8d\x0b\x43\xc5\x45\xdb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test380(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xc3715e0b9fb1
            srcAddr = 0xbf034ca809e6
            etherType = 0x8da5
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 64:
        ethernet =
            dstAddr = 0xc3715e0b9fb1
            srcAddr = 0xbf034ca809e6
            etherType = 0x8da5
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xc3\x71\x5e\x0b\x9f\xb1',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0040),
                    action_mc_index = hex_to_i16(0x5199),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x01),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x01),
                        action_color = hex_to_byte(0x02),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xc3\x71\x5e\x0b\x9f\xb1\xbf\x03\x4c\xa8\x09\xe6\x8d\xa5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 64
        exp_pkt = b'\xc3\x71\x5e\x0b\x9f\xb1\xbf\x03\x4c\xa8\x09\xe6\x8d\xa5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test381(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x0ccc3587d2f7
            srcAddr = 0x88fe7cfa6b12
            etherType = 0x8ce6
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x0c\xcc\x35\x87\xd2\xf7',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x3a69),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x16),
                        action_color = hex_to_byte(0x02),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x0c\xcc\x35\x87\xd2\xf7\x88\xfe\x7c\xfa\x6b\x12\x8c\xe6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test382(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x6b18997707e5
            srcAddr = 0x869ee0246697
            etherType = 0xddfc
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 4:
        ethernet =
            dstAddr = 0x6b18997707e5
            srcAddr = 0x869ee0246697
            etherType = 0xddfc
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x6b\x18\x99\x77\x07\xe5',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0004),
                    action_mc_index = hex_to_i16(0x3244),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x01),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x11),
                        action_color = hex_to_byte(0x00),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x6b\x18\x99\x77\x07\xe5\x86\x9e\xe0\x24\x66\x97\xdd\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 4
        exp_pkt = b'\x6b\x18\x99\x77\x07\xe5\x86\x9e\xe0\x24\x66\x97\xdd\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test383(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x815c1ca9ef2b
            srcAddr = 0xb900b037519c
            etherType = 0x716c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 1:
        ethernet =
            dstAddr = 0x815c1ca9ef2b
            srcAddr = 0xb900b037519c
            etherType = 0x716c
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x81\x5c\x1c\xa9\xef\x2b',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0001),
                    action_mc_index = hex_to_i16(0x985a),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x11),
                        action_color = hex_to_byte(0x03),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x81\x5c\x1c\xa9\xef\x2b\xb9\x00\xb0\x37\x51\x9c\x71\x6c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 1
        exp_pkt = b'\x81\x5c\x1c\xa9\xef\x2b\xb9\x00\xb0\x37\x51\x9c\x71\x6c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test384(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x73f1e343fb09
            srcAddr = 0x6516388e9983
            etherType = 0x6b51
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x73\xf1\xe3\x43\xfb\x09',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x35c6),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x14),
                        action_color = hex_to_byte(0x03),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x73\xf1\xe3\x43\xfb\x09\x65\x16\x38\x8e\x99\x83\x6b\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test385(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x46abde8cc1af
            srcAddr = 0x70e0e05e113d
            etherType = 0x1f31
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
        [ Action ] egress_qos <miss>
    
    Egress packet on port 5:
        ethernet =
            dstAddr = 0x46abde8cc1af
            srcAddr = 0x70e0e05e113d
            etherType = 0x1f31
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x46\xab\xde\x8c\xc1\xaf',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0005),
                    action_mc_index = hex_to_i16(0x516a),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x07),
                        action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x46\xab\xde\x8c\xc1\xaf\x70\xe0\xe0\x5e\x11\x3d\x1f\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 5
        exp_pkt = b'\x46\xab\xde\x8c\xc1\xaf\x70\xe0\xe0\x5e\x11\x3d\x1f\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test386(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x59b70ef50bd3
            srcAddr = 0xf55bc1342074
            etherType = 0x8a1a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 9:
        ethernet =
            dstAddr = 0x59b70ef50bd3
            srcAddr = 0xf55bc1342074
            etherType = 0x8a1a
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x59\xb7\x0e\xf5\x0b\xd3',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0009),
                    action_mc_index = hex_to_i16(0xf703),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x0b),
                        action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x59\xb7\x0e\xf5\x0b\xd3\xf5\x5b\xc1\x34\x20\x74\x8a\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 9
        exp_pkt = b'\x59\xb7\x0e\xf5\x0b\xd3\xf5\x5b\xc1\x34\x20\x74\x8a\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test387(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0xa2e0752a115e
            srcAddr = 0x09623667e6e2
            etherType = 0xe6fe
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xa2\xe0\x75\x2a\x11\x5e',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x729b),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x18),
                        action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\xa2\xe0\x75\x2a\x11\x5e\x09\x62\x36\x67\xe6\xe2\xe6\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test388(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x939eaf1cb202
            srcAddr = 0xb2e9f5c253de
            etherType = 0x2b55
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x93\x9e\xaf\x1c\xb2\x02',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x70cf),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x15),
                        action_color = hex_to_byte(0x03),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x93\x9e\xaf\x1c\xb2\x02\xb2\xe9\xf5\xc2\x53\xde\x2b\x55\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test389(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x2b2713ef1448
            srcAddr = 0x00cdee36ea6d
            etherType = 0x5c20
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
        [ Action ] egress_qos <hit> (qos_hit_e2e_mirror)
    
    Egress packet on port 8:
        ethernet =
            dstAddr = 0x2b2713ef1448
            srcAddr = 0x00cdee36ea6d
            etherType = 0x5c20
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x2b\x27\x13\xef\x14\x48',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0008),
                    action_mc_index = hex_to_i16(0x4888),)))
        # Table egress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_egress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['egress_qos'].append(
                self.client.egress_qos_table_add_with_qos_hit_e2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_e2e_mirror_action_spec_t(
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x14),
                        action_color = hex_to_byte(0x03),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x2b\x27\x13\xef\x14\x48\x00\xcd\xee\x36\xea\x6d\x5c\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 8
        exp_pkt = b'\x2b\x27\x13\xef\x14\x48\x00\xcd\xee\x36\xea\x6d\x5c\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test390(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0xe915a4eae8ad
            srcAddr = 0x3e2ce98e336c
            etherType = 0xf6d1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
        [ Action ] egress_qos <miss>
    
    Egress packet on port 10:
        ethernet =
            dstAddr = 0xe915a4eae8ad
            srcAddr = 0x3e2ce98e336c
            etherType = 0xf6d1
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xe9\x15\xa4\xea\xe8\xad',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000a),
                    action_mc_index = hex_to_i16(0xef3a),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x05),
                        action_color = hex_to_byte(0x02),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\xe9\x15\xa4\xea\xe8\xad\x3e\x2c\xe9\x8e\x33\x6c\xf6\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 10
        exp_pkt = b'\xe9\x15\xa4\xea\xe8\xad\x3e\x2c\xe9\x8e\x33\x6c\xf6\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test391(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x4f8d94d9059c
            srcAddr = 0x726df5ddd4be
            etherType = 0xf500
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x4f\x8d\x94\xd9\x05\x9c',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x5051),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x07),
                        action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x4f\x8d\x94\xd9\x05\x9c\x72\x6d\xf5\xdd\xd4\xbe\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test392(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0xf7b2d259fa37
            srcAddr = 0xc7ae9f527243
            etherType = 0x2823
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    
    Egress packet on port 15:
        ethernet =
            dstAddr = 0xf7b2d259fa37
            srcAddr = 0xc7ae9f527243
            etherType = 0x2823
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf7\xb2\xd2\x59\xfa\x37',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000f),
                    action_mc_index = hex_to_i16(0x0143),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x18),
                        action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\xf7\xb2\xd2\x59\xfa\x37\xc7\xae\x9f\x52\x72\x43\x28\x23\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 15
        exp_pkt = b'\xf7\xb2\xd2\x59\xfa\x37\xc7\xae\x9f\x52\x72\x43\x28\x23\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test393(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x07b98976949a
            srcAddr = 0x1f37ebff0c4c
            etherType = 0x4f04
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
    
    Egress packet on port 1:
        ethernet =
            dstAddr = 0x07b98976949a
            srcAddr = 0x1f37ebff0c4c
            etherType = 0x4f04
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x07\xb9\x89\x76\x94\x9a',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0001),
                    action_mc_index = hex_to_i16(0xaf98),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x05),
                        action_mirror_id = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x07\xb9\x89\x76\x94\x9a\x1f\x37\xeb\xff\x0c\x4c\x4f\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 1
        exp_pkt = b'\x07\xb9\x89\x76\x94\x9a\x1f\x37\xeb\xff\x0c\x4c\x4f\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test394(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0xf5204f71261c
            srcAddr = 0xc9f298c1fee4
            etherType = 0x0125
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf5\x20\x4f\x71\x26\x1c',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0xfe6d),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1c),
                        action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\xf5\x20\x4f\x71\x26\x1c\xc9\xf2\x98\xc1\xfe\xe4\x01\x25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test395(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0xc2b0cfaa6d0a
            srcAddr = 0x889ca4af36f2
            etherType = 0xd707
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xc2\xb0\xcf\xaa\x6d\x0a',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x6e55),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x04),
                        action_mirror_id = hex_to_byte(0x01),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\xc2\xb0\xcf\xaa\x6d\x0a\x88\x9c\xa4\xaf\x36\xf2\xd7\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test396(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0xd696442bbfc2
            srcAddr = 0x7c95cac3a0b8
            etherType = 0x52b9
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    
    Egress packet on port 8:
        ethernet =
            dstAddr = 0xd696442bbfc2
            srcAddr = 0x7c95cac3a0b8
            etherType = 0x52b9
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xd6\x96\x44\x2b\xbf\xc2',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x0008),
                    action_mc_index = hex_to_i16(0x18a4),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1c),
                        action_mirror_id = hex_to_byte(0x01),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\xd6\x96\x44\x2b\xbf\xc2\x7c\x95\xca\xc3\xa0\xb8\x52\xb9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 8
        exp_pkt = b'\xd6\x96\x44\x2b\xbf\xc2\x7c\x95\xca\xc3\xa0\xb8\x52\xb9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test397(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0xa635e9e6f26e
            srcAddr = 0x2d5aef7685a2
            etherType = 0xfc25
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xa6\x35\xe9\xe6\xf2\x6e',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x7c9e),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1a),
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\xa6\x35\xe9\xe6\xf2\x6e\x2d\x5a\xef\x76\x85\xa2\xfc\x25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test398(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xf50bd4bf2ce2
            srcAddr = 0x77436b848ecb
            etherType = 0x6206
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    
    Egress packet on port 15:
        ethernet =
            dstAddr = 0xf50bd4bf2ce2
            srcAddr = 0x77436b848ecb
            etherType = 0x6206
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf5\x0b\xd4\xbf\x2c\xe2',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000f),
                    action_mc_index = hex_to_i16(0x134d),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x0d),
                        action_mirror_id = hex_to_byte(0x01),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xf5\x0b\xd4\xbf\x2c\xe2\x77\x43\x6b\x84\x8e\xcb\x62\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 15
        exp_pkt = b'\xf5\x0b\xd4\xbf\x2c\xe2\x77\x43\x6b\x84\x8e\xcb\x62\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test399(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0xa6d571c9c3e8
            srcAddr = 0x5481e7c85db5
            etherType = 0x8cc6
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xa6\xd5\x71\xc9\xc3\xe8',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0xd963),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x02),
                        action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\xa6\xd5\x71\xc9\xc3\xe8\x54\x81\xe7\xc8\x5d\xb5\x8c\xc6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test400(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x984b9144eb3b
            srcAddr = 0x1e64be079e2f
            etherType = 0x1cae
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <miss>
    
    Egress packet on port 15:
        ethernet =
            dstAddr = 0x984b9144eb3b
            srcAddr = 0x1e64be079e2f
            etherType = 0x1cae
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x98\x4b\x91\x44\xeb\x3b',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000f),
                    action_mc_index = hex_to_i16(0x25c9),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x04),
                        action_mirror_id = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x98\x4b\x91\x44\xeb\x3b\x1e\x64\xbe\x07\x9e\x2f\x1c\xae\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 15
        exp_pkt = b'\x98\x4b\x91\x44\xeb\x3b\x1e\x64\xbe\x07\x9e\x2f\x1c\xae\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test401(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x458bd6ac3686
            srcAddr = 0x369df219b9d9
            etherType = 0x20dd
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    
    Egress packet on port 10:
        ethernet =
            dstAddr = 0x458bd6ac3686
            srcAddr = 0x369df219b9d9
            etherType = 0x20dd
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x45\x8b\xd6\xac\x36\x86',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x000a),
                    action_mc_index = hex_to_i16(0xac5a),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1d),
                        action_mirror_id = hex_to_byte(0x01),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x45\x8b\xd6\xac\x36\x86\x36\x9d\xf2\x19\xb9\xd9\x20\xdd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    def verifyPackets(self):
        eg_port = 10
        exp_pkt = b'\x45\x8b\xd6\xac\x36\x86\x36\x9d\xf2\x19\xb9\xd9\x20\xdd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        verify_packet(self, exp_pkt, eg_port)
    
    def runTest(self):
        self.runTestImpl()

class Test402(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0xf831f708c521
            srcAddr = 0xa031bb354445
            etherType = 0x799c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_uc_mc_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf8\x31\xf7\x08\xc5\x21',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_uc_mc_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_uc_mc_hit_action_spec_t(
                    action_egress_port = hex_to_i16(0x01ff),
                    action_mc_index = hex_to_i16(0x0795),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x05),
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\xf8\x31\xf7\x08\xc5\x21\xa0\x31\xbb\x35\x44\x45\x79\x9c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test403(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x140d41773a0d
            srcAddr = 0x17ab0a30c5cd
            etherType = 0x4458
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x14\x0d\x41\x77\x3a\x0d',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x3406),)))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x14\x0d\x41\x77\x3a\x0d\x17\xab\x0a\x30\xc5\xcd\x44\x58\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test404(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0xdb29f94a655d
            srcAddr = 0x1f96432f2e6a
            etherType = 0x00be
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xdb\x29\xf9\x4a\x65\x5d',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xe274),)))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\xdb\x29\xf9\x4a\x65\x5d\x1f\x96\x43\x2f\x2e\x6a\x00\xbe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test405(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x7a49aff99d22
            srcAddr = 0xf08511d2cc36
            etherType = 0x8170
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x7a\x49\xaf\xf9\x9d\x22',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x1e18),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x7a\x49\xaf\xf9\x9d\x22\xf0\x85\x11\xd2\xcc\x36\x81\x70\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test406(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x7a49aff99d22
            srcAddr = 0xf08511d2cc36
            etherType = 0x8170
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x7a\x49\xaf\xf9\x9d\x22',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x1e18),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x7a\x49\xaf\xf9\x9d\x22\xf0\x85\x11\xd2\xcc\x36\x81\x70\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test407(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x7a49aff99d22
            srcAddr = 0xf08511d2cc36
            etherType = 0x8170
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x7a\x49\xaf\xf9\x9d\x22',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x1e18),)))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x7a\x49\xaf\xf9\x9d\x22\xf0\x85\x11\xd2\xcc\x36\x81\x70\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test408(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0xb8a3edd1c3b3
            srcAddr = 0x7d57a0b97a3f
            etherType = 0x14e4
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <miss>
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xb8\xa3\xed\xd1\xc3\xb3',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xe628),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\xb8\xa3\xed\xd1\xc3\xb3\x7d\x57\xa0\xb9\x7a\x3f\x14\xe4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test409(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x689a1deb841b
            srcAddr = 0x5ddf34375513
            etherType = 0xbb4b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x68\x9a\x1d\xeb\x84\x1b',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x1842),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x68\x9a\x1d\xeb\x84\x1b\x5d\xdf\x34\x37\x55\x13\xbb\x4b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test410(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x0714b3dd58f8
            srcAddr = 0x0bffc751f8fe
            etherType = 0xb6c5
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x07\x14\xb3\xdd\x58\xf8',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xb0ab),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x07\x14\xb3\xdd\x58\xf8\x0b\xff\xc7\x51\xf8\xfe\xb6\xc5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test411(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x0714b3dd58f8
            srcAddr = 0x0bffc751f8fe
            etherType = 0xb6c5
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x07\x14\xb3\xdd\x58\xf8',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xb0ab),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x07\x14\xb3\xdd\x58\xf8\x0b\xff\xc7\x51\xf8\xfe\xb6\xc5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test412(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x0714b3dd58f8
            srcAddr = 0x0bffc751f8fe
            etherType = 0xb6c5
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x07\x14\xb3\xdd\x58\xf8',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xb0ab),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x07\x14\xb3\xdd\x58\xf8\x0b\xff\xc7\x51\xf8\xfe\xb6\xc5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test413(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xa69d70e015df
            srcAddr = 0x6edac4eb2cf7
            etherType = 0xb66b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xa6\x9d\x70\xe0\x15\xdf',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xb7bc),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xa6\x9d\x70\xe0\x15\xdf\x6e\xda\xc4\xeb\x2c\xf7\xb6\x6b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test414(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0xecef23eb4339
            srcAddr = 0x5b7c41cc5096
            etherType = 0xad08
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xec\xef\x23\xeb\x43\x39',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x1dbf),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\xec\xef\x23\xeb\x43\x39\x5b\x7c\x41\xcc\x50\x96\xad\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test415(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x0a4d8e063812
            srcAddr = 0xcf612766cb54
            etherType = 0x918b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x0a\x4d\x8e\x06\x38\x12',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x32ed),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x18),
                        action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x0a\x4d\x8e\x06\x38\x12\xcf\x61\x27\x66\xcb\x54\x91\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test416(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0xe81d43486d37
            srcAddr = 0xaa8fc2087ed5
            etherType = 0xb176
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xe8\x1d\x43\x48\x6d\x37',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x4ebb),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x06),
                        action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\xe8\x1d\x43\x48\x6d\x37\xaa\x8f\xc2\x08\x7e\xd5\xb1\x76\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test417(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0xe81d43486d37
            srcAddr = 0xaa8fc2087ed5
            etherType = 0xb176
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xe8\x1d\x43\x48\x6d\x37',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x4ebb),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x06),
                        action_color = hex_to_byte(0x03),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\xe8\x1d\x43\x48\x6d\x37\xaa\x8f\xc2\x08\x7e\xd5\xb1\x76\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test418(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0xe81d43486d37
            srcAddr = 0xaa8fc2087ed5
            etherType = 0xb176
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xe8\x1d\x43\x48\x6d\x37',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x4ebb),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x06),
                        action_color = hex_to_byte(0x03),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\xe8\x1d\x43\x48\x6d\x37\xaa\x8f\xc2\x08\x7e\xd5\xb1\x76\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test419(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x7357c3323dc2
            srcAddr = 0x2ddecf3a1ac4
            etherType = 0x0d27
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x73\x57\xc3\x32\x3d\xc2',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x64c7),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1f),
                        action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x73\x57\xc3\x32\x3d\xc2\x2d\xde\xcf\x3a\x1a\xc4\x0d\x27\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test420(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0x77a94d01ff87
            srcAddr = 0x7e42a960d2ab
            etherType = 0xb18c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x77\xa9\x4d\x01\xff\x87',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x1f3b),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x04),
                        action_color = hex_to_byte(0x03),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\x77\xa9\x4d\x01\xff\x87\x7e\x42\xa9\x60\xd2\xab\xb1\x8c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test421(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x594a0d0d0446
            srcAddr = 0x47469e983670
            etherType = 0x09fa
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x59\x4a\x0d\x0d\x04\x46',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xd137),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x08),
                        action_color = hex_to_byte(0x00),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x59\x4a\x0d\x0d\x04\x46\x47\x46\x9e\x98\x36\x70\x09\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test422(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xd776ff243767
            srcAddr = 0x81f657b01027
            etherType = 0x3340
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xd7\x76\xff\x24\x37\x67',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x4260),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1b),
                        action_color = hex_to_byte(0x03),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xd7\x76\xff\x24\x37\x67\x81\xf6\x57\xb0\x10\x27\x33\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test423(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xd776ff243767
            srcAddr = 0x81f657b01027
            etherType = 0x3340
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xd7\x76\xff\x24\x37\x67',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x4260),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1b),
                        action_color = hex_to_byte(0x03),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xd7\x76\xff\x24\x37\x67\x81\xf6\x57\xb0\x10\x27\x33\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test424(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0xd776ff243767
            srcAddr = 0x81f657b01027
            etherType = 0x3340
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xd7\x76\xff\x24\x37\x67',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x4260),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1b),
                        action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\xd7\x76\xff\x24\x37\x67\x81\xf6\x57\xb0\x10\x27\x33\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test425(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x216f212ebd03
            srcAddr = 0x28e48fe78007
            etherType = 0x5ad1
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x21\x6f\x21\x2e\xbd\x03',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x5400),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x00),
                        action_color = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x21\x6f\x21\x2e\xbd\x03\x28\xe4\x8f\xe7\x80\x07\x5a\xd1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test426(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x9359edf6b8b7
            srcAddr = 0x52ac808c8eb2
            etherType = 0x71b3
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x93\x59\xed\xf6\xb8\xb7',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x46b9),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x07),
                        action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x93\x59\xed\xf6\xb8\xb7\x52\xac\x80\x8c\x8e\xb2\x71\xb3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test427(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0xf7381a83b36a
            srcAddr = 0xebd84647f471
            etherType = 0x5ee7
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf7\x38\x1a\x83\xb3\x6a',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0xea63),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x0d),
                        action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\xf7\x38\x1a\x83\xb3\x6a\xeb\xd8\x46\x47\xf4\x71\x5e\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test428(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x42d9564d589d
            srcAddr = 0xbaf860d41aac
            etherType = 0x12b7
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x42\xd9\x56\x4d\x58\x9d',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x9813),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x12),
                        action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x42\xd9\x56\x4d\x58\x9d\xba\xf8\x60\xd4\x1a\xac\x12\xb7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test429(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x42d9564d589d
            srcAddr = 0xbaf860d41aac
            etherType = 0x12b7
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x42\xd9\x56\x4d\x58\x9d',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x9813),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x12),
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x42\xd9\x56\x4d\x58\x9d\xba\xf8\x60\xd4\x1a\xac\x12\xb7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test430(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x42d9564d589d
            srcAddr = 0xbaf860d41aac
            etherType = 0x12b7
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x42\xd9\x56\x4d\x58\x9d',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x9813),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x12),
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x42\xd9\x56\x4d\x58\x9d\xba\xf8\x60\xd4\x1a\xac\x12\xb7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test431(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0xc32cd94511d8
            srcAddr = 0x9e24e029788e
            etherType = 0x697d
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xc3\x2c\xd9\x45\x11\xd8',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x6194),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x03),
                        action_mirror_id = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\xc3\x2c\xd9\x45\x11\xd8\x9e\x24\xe0\x29\x78\x8e\x69\x7d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test432(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x077acdf0b6ed
            srcAddr = 0xf70a9a6b622f
            etherType = 0x83e8
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_multicast_hit)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x07\x7a\xcd\xf0\xb6\xed',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_multicast_hit(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_multicast_hit_action_spec_t(
                    action_mc_index = hex_to_i16(0x085e),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x0a),
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x07\x7a\xcd\xf0\xb6\xed\xf7\x0a\x9a\x6b\x62\x2f\x83\xe8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test433(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x348aff17e71b
            srcAddr = 0x9b2479b4f91a
            etherType = 0x8dda
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x34\x8a\xff\x17\xe7\x1b',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x6de2),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x34\x8a\xff\x17\xe7\x1b\x9b\x24\x79\xb4\xf9\x1a\x8d\xda\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test434(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x1d9c3dd89172
            srcAddr = 0xe0c19b5b826e
            etherType = 0x955e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_miss)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x1d\x9c\x3d\xd8\x91\x72',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x9c2c),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x1d\x9c\x3d\xd8\x91\x72\xe0\xc1\x9b\x5b\x82\x6e\x95\x5e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test435(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0xfb50cfd5bc76
            srcAddr = 0x40a66d0dfa4a
            etherType = 0x9edc
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xfb\x50\xcf\xd5\xbc\x76',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x6099),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\xfb\x50\xcf\xd5\xbc\x76\x40\xa6\x6d\x0d\xfa\x4a\x9e\xdc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test436(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0xfb50cfd5bc76
            srcAddr = 0x40a66d0dfa4a
            etherType = 0x9edc
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xfb\x50\xcf\xd5\xbc\x76',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x6099),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\xfb\x50\xcf\xd5\xbc\x76\x40\xa6\x6d\x0d\xfa\x4a\x9e\xdc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test437(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0xfb50cfd5bc76
            srcAddr = 0x40a66d0dfa4a
            etherType = 0x9edc
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xfb\x50\xcf\xd5\xbc\x76',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x6099),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\xfb\x50\xcf\xd5\xbc\x76\x40\xa6\x6d\x0d\xfa\x4a\x9e\xdc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test438(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x65ed3497fd79
            srcAddr = 0xa36bf9ff5aa0
            etherType = 0x4d33
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x65\xed\x34\x97\xfd\x79',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x2727),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x65\xed\x34\x97\xfd\x79\xa3\x6b\xf9\xff\x5a\xa0\x4d\x33\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test439(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0xf43ad7ff5b7c
            srcAddr = 0x3588c88f471c
            etherType = 0x6321
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xf4\x3a\xd7\xff\x5b\x7c',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x7ddc),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1e),
                        action_mirror_id = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\xf4\x3a\xd7\xff\x5b\x7c\x35\x88\xc8\x8f\x47\x1c\x63\x21\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test440(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x09f5e710bb6b
            srcAddr = 0x2d94ab025133
            etherType = 0x1422
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x09\xf5\xe7\x10\xbb\x6b',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x0858),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x10),
                        action_mirror_id = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x09\xf5\xe7\x10\xbb\x6b\x2d\x94\xab\x02\x51\x33\x14\x22\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test441(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0x7466e8efb94e
            srcAddr = 0x736fd2d7ed25
            etherType = 0x2065
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x74\x66\xe8\xef\xb9\x4e',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0xf8c7),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x16),
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\x74\x66\xe8\xef\xb9\x4e\x73\x6f\xd2\xd7\xed\x25\x20\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test442(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0x7466e8efb94e
            srcAddr = 0x736fd2d7ed25
            etherType = 0x2065
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x74\x66\xe8\xef\xb9\x4e',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0xf8c7),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x16),
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\x74\x66\xe8\xef\xb9\x4e\x73\x6f\xd2\xd7\xed\x25\x20\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test443(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0x7466e8efb94e
            srcAddr = 0x736fd2d7ed25
            etherType = 0x2065
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x74\x66\xe8\xef\xb9\x4e',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0xf8c7),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x16),
                        action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\x74\x66\xe8\xef\xb9\x4e\x73\x6f\xd2\xd7\xed\x25\x20\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test444(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x548427785db2
            srcAddr = 0x7c2fc337b838
            etherType = 0x5181
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x54\x84\x27\x78\x5d\xb2',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0xfabe),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x10),
                        action_mirror_id = hex_to_byte(0x01),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x54\x84\x27\x78\x5d\xb2\x7c\x2f\xc3\x37\xb8\x38\x51\x81\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test445(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x4cd68ba4f8dc
            srcAddr = 0x375a5f0e9bd5
            etherType = 0x4e77
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x4c\xd6\x8b\xa4\xf8\xdc',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0xaf69),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x0a),
                        action_color = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x4c\xd6\x8b\xa4\xf8\xdc\x37\x5a\x5f\x0e\x9b\xd5\x4e\x77\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test446(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0xb76a4fd760cb
            srcAddr = 0xbbd0f44b4fe9
            etherType = 0xd6c0
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xb7\x6a\x4f\xd7\x60\xcb',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x0597),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x0c),
                        action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\xb7\x6a\x4f\xd7\x60\xcb\xbb\xd0\xf4\x4b\x4f\xe9\xd6\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test447(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0xb76a4fd760cb
            srcAddr = 0xbbd0f44b4fe9
            etherType = 0xd6c0
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xb7\x6a\x4f\xd7\x60\xcb',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x0597),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x0c),
                        action_color = hex_to_byte(0x03),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\xb7\x6a\x4f\xd7\x60\xcb\xbb\xd0\xf4\x4b\x4f\xe9\xd6\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test448(AbstractTest):
    """
    Ingress packet on port 2:
        ethernet =
            dstAddr = 0xb76a4fd760cb
            srcAddr = 0xbbd0f44b4fe9
            etherType = 0xd6c0
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xb7\x6a\x4f\xd7\x60\xcb',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x0597),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x0c),
                        action_color = hex_to_byte(0x03),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 2
        pkt = b'\xb7\x6a\x4f\xd7\x60\xcb\xbb\xd0\xf4\x4b\x4f\xe9\xd6\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test449(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0xb8b6f3c710d3
            srcAddr = 0xd33a3361bb41
            etherType = 0x922c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xb8\xb6\xf3\xc7\x10\xd3',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0xb4e4),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x00),
                        action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\xb8\xb6\xf3\xc7\x10\xd3\xd3\x3a\x33\x61\xbb\x41\x92\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test450(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x0bd346efdff7
            srcAddr = 0x12ca475455b1
            etherType = 0xe8e9
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x0b\xd3\x46\xef\xdf\xf7',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x058a),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x14),
                        action_color = hex_to_byte(0x00),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x0b\xd3\x46\xef\xdf\xf7\x12\xca\x47\x54\x55\xb1\xe8\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test451(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x2f1ea2993b3b
            srcAddr = 0xb53ed3e93d91
            etherType = 0xd184
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x2f\x1e\xa2\x99\x3b\x3b',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0xe22f),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x06),
                        action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x2f\x1e\xa2\x99\x3b\x3b\xb5\x3e\xd3\xe9\x3d\x91\xd1\x84\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test452(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x2f1ea2993b3b
            srcAddr = 0xb53ed3e93d91
            etherType = 0xd184
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x2f\x1e\xa2\x99\x3b\x3b',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0xe22f),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x06),
                        action_color = hex_to_byte(0x02),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x2f\x1e\xa2\x99\x3b\x3b\xb5\x3e\xd3\xe9\x3d\x91\xd1\x84\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test453(AbstractTest):
    """
    Ingress packet on port 5:
        ethernet =
            dstAddr = 0x2f1ea2993b3b
            srcAddr = 0xb53ed3e93d91
            etherType = 0xd184
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x2f\x1e\xa2\x99\x3b\x3b',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0xe22f),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x06),
                        action_color = hex_to_byte(0x02),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 5
        pkt = b'\x2f\x1e\xa2\x99\x3b\x3b\xb5\x3e\xd3\xe9\x3d\x91\xd1\x84\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test454(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0xb6752f302705
            srcAddr = 0x9f02344cfb84
            etherType = 0x4cf3
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xb6\x75\x2f\x30\x27\x05',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x3eb6),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x14),
                        action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\xb6\x75\x2f\x30\x27\x05\x9f\x02\x34\x4c\xfb\x84\x4c\xf3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test455(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x556de99d4256
            srcAddr = 0xa4a52e13bffe
            etherType = 0xbad5
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x55\x6d\xe9\x9d\x42\x56',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x3832),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x07),
                        action_color = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x55\x6d\xe9\x9d\x42\x56\xa4\xa5\x2e\x13\xbf\xfe\xba\xd5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test456(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0xafcd06018e2a
            srcAddr = 0x5b9b48849a81
            etherType = 0xa058
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xaf\xcd\x06\x01\x8e\x2a',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x7ebc),)))
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x00),
                        action_color = hex_to_byte(0x03),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\xaf\xcd\x06\x01\x8e\x2a\x5b\x9b\x48\x84\x9a\x81\xa0\x58\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test457(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0xc3864fbae2e1
            srcAddr = 0x4b1e9d2a701e
            etherType = 0x0390
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <miss>
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xc3\x86\x4f\xba\xe2\xe1',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0xbfa6),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\xc3\x86\x4f\xba\xe2\xe1\x4b\x1e\x9d\x2a\x70\x1e\x03\x90\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test458(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0xb32aca9c6010
            srcAddr = 0x9f1b2f97bf70
            etherType = 0x2c61
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <miss>
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\xb3\x2a\xca\x9c\x60\x10',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x674a),)))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\xb3\x2a\xca\x9c\x60\x10\x9f\x1b\x2f\x97\xbf\x70\x2c\x61\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test459(AbstractTest):
    """
    Ingress packet on port 8:
        ethernet =
            dstAddr = 0x1851c6a6ee57
            srcAddr = 0x45298b109fa0
            etherType = 0xaa54
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x18\x51\xc6\xa6\xee\x57',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0x13ef),)))
    
    def sendPacket(self):
        ig_port = 8
        pkt = b'\x18\x51\xc6\xa6\xee\x57\x45\x29\x8b\x10\x9f\xa0\xaa\x54\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test460(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x3c00b16e776b
            srcAddr = 0x344590614b4e
            etherType = 0x4c26
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x3c\x00\xb1\x6e\x77\x6b',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0xdca7),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x3c\x00\xb1\x6e\x77\x6b\x34\x45\x90\x61\x4b\x4e\x4c\x26\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test461(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x3c00b16e776b
            srcAddr = 0x344590614b4e
            etherType = 0x4c26
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x3c\x00\xb1\x6e\x77\x6b',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0xdca7),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x3c\x00\xb1\x6e\x77\x6b\x34\x45\x90\x61\x4b\x4e\x4c\x26\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test462(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x3c00b16e776b
            srcAddr = 0x344590614b4e
            etherType = 0x4c26
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <hit> (dmac_miss)
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table dmac
        match_spec = emulation_dmac_match_spec_t(
            ethernet_dstAddr = b'\x3c\x00\xb1\x6e\x77\x6b',)
        self.match_entries['dmac'].append(
            self.client.dmac_table_add_with_dmac_miss(
                self.sess_hdl, self.dev_tgt, match_spec,
                emulation_dmac_miss_action_spec_t(
                    action_flood_mc_index = hex_to_i16(0xdca7),)))
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x3c\x00\xb1\x6e\x77\x6b\x34\x45\x90\x61\x4b\x4e\x4c\x26\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test463(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x1d11ca4529e2
            srcAddr = 0x83278b32be3b
            etherType = 0xfc7f
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <miss>
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x1d\x11\xca\x45\x29\xe2\x83\x27\x8b\x32\xbe\x3b\xfc\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test464(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x751a76f30f05
            srcAddr = 0x19d89050cbc1
            etherType = 0x471c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <miss>
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x75\x1a\x76\xf3\x0f\x05\x19\xd8\x90\x50\xcb\xc1\x47\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test465(AbstractTest):
    """
    Ingress packet on port 0:
        ethernet =
            dstAddr = 0x432908d52dcd
            srcAddr = 0xcb11a831a961
            etherType = 0x0e0c
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        pass
    
    def sendPacket(self):
        ig_port = 0
        pkt = b'\x43\x29\x08\xd5\x2d\xcd\xcb\x11\xa8\x31\xa9\x61\x0e\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test466(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x7f159b747d4e
            srcAddr = 0x5fcd2e73075d
            etherType = 0xcca6
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x7f\x15\x9b\x74\x7d\x4e\x5f\xcd\x2e\x73\x07\x5d\xcc\xa6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test467(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x7f159b747d4e
            srcAddr = 0x5fcd2e73075d
            etherType = 0xcca6
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x7f\x15\x9b\x74\x7d\x4e\x5f\xcd\x2e\x73\x07\x5d\xcc\xa6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test468(AbstractTest):
    """
    Ingress packet on port 13:
        ethernet =
            dstAddr = 0x7f159b747d4e
            srcAddr = 0x5fcd2e73075d
            etherType = 0xcca6
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <miss>
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        pass
    
    def sendPacket(self):
        ig_port = 13
        pkt = b'\x7f\x15\x9b\x74\x7d\x4e\x5f\xcd\x2e\x73\x07\x5d\xcc\xa6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test469(AbstractTest):
    """
    Ingress packet on port 14:
        ethernet =
            dstAddr = 0x25619af7e45f
            srcAddr = 0x21924eda3cf6
            etherType = 0xfdf4
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x0c),
                        action_color = hex_to_byte(0x02),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 14
        pkt = b'\x25\x61\x9a\xf7\xe4\x5f\x21\x92\x4e\xda\x3c\xf6\xfd\xf4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test470(AbstractTest):
    """
    Ingress packet on port 6:
        ethernet =
            dstAddr = 0x9f7dd8ff607b
            srcAddr = 0xd3fd0408c583
            etherType = 0xc16b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x1c),
                        action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 6
        pkt = b'\x9f\x7d\xd8\xff\x60\x7b\xd3\xfd\x04\x08\xc5\x83\xc1\x6b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test471(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0xc2888e3d3211
            srcAddr = 0xff2e3591a4f1
            etherType = 0x7c8b
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x06),
                        action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\xc2\x88\x8e\x3d\x32\x11\xff\x2e\x35\x91\xa4\xf1\x7c\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test472(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x433b321262e1
            srcAddr = 0x09cc6be54831
            etherType = 0xa436
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x0b),
                        action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x43\x3b\x32\x12\x62\xe1\x09\xcc\x6b\xe5\x48\x31\xa4\x36\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test473(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x433b321262e1
            srcAddr = 0x09cc6be54831
            etherType = 0xa436
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x0b),
                        action_color = hex_to_byte(0x02),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x43\x3b\x32\x12\x62\xe1\x09\xcc\x6b\xe5\x48\x31\xa4\x36\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test474(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0x433b321262e1
            srcAddr = 0x09cc6be54831
            etherType = 0xa436
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_no_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_no_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_no_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x0b),
                        action_color = hex_to_byte(0x02),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\x43\x3b\x32\x12\x62\xe1\x09\xcc\x6b\xe5\x48\x31\xa4\x36\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test475(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x683a3690b910
            srcAddr = 0x6b6b22a3ff23
            etherType = 0x58b0
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x11),
                        action_color = hex_to_byte(0x02),)))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x68\x3a\x36\x90\xb9\x10\x6b\x6b\x22\xa3\xff\x23\x58\xb0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test476(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x966e26bb1d75
            srcAddr = 0x71fb8b24086e
            etherType = 0x7db6
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x15),
                        action_color = hex_to_byte(0x00),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x96\x6e\x26\xbb\x1d\x75\x71\xfb\x8b\x24\x08\x6e\x7d\xb6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test477(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x966e26bb1d75
            srcAddr = 0x71fb8b24086e
            etherType = 0x7db6
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x15),
                        action_color = hex_to_byte(0x00),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x96\x6e\x26\xbb\x1d\x75\x71\xfb\x8b\x24\x08\x6e\x7d\xb6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test478(AbstractTest):
    """
    Ingress packet on port 3:
        ethernet =
            dstAddr = 0x966e26bb1d75
            srcAddr = 0x71fb8b24086e
            etherType = 0x7db6
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x15),
                        action_color = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 3
        pkt = b'\x96\x6e\x26\xbb\x1d\x75\x71\xfb\x8b\x24\x08\x6e\x7d\xb6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test479(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x97e5c7b465e6
            srcAddr = 0xf3b993e49154
            etherType = 0xaf11
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x09),
                        action_color = hex_to_byte(0x03),)))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x97\xe5\xc7\xb4\x65\xe6\xf3\xb9\x93\xe4\x91\x54\xaf\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test480(AbstractTest):
    """
    Ingress packet on port 1:
        ethernet =
            dstAddr = 0x643edaeef5d3
            srcAddr = 0x06e454ec7bb5
            etherType = 0x000a
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_no_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_no_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_no_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x04),
                        action_color = hex_to_byte(0x00),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 1
        pkt = b'\x64\x3e\xda\xee\xf5\xd3\x06\xe4\x54\xec\x7b\xb5\x00\x0a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test481(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x4b59ecbef543
            srcAddr = 0xc0ae5de5e7f8
            etherType = 0xd438
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x02),
                        action_mirror_id = hex_to_byte(0x01),)))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x4b\x59\xec\xbe\xf5\x43\xc0\xae\x5d\xe5\xe7\xf8\xd4\x38\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test482(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x4b59ecbef543
            srcAddr = 0xc0ae5de5e7f8
            etherType = 0xd438
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x02),
                        action_mirror_id = hex_to_byte(0x01),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x4b\x59\xec\xbe\xf5\x43\xc0\xae\x5d\xe5\xe7\xf8\xd4\x38\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test483(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0x4b59ecbef543
            srcAddr = 0xc0ae5de5e7f8
            etherType = 0xd438
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x02),
                        action_mirror_id = hex_to_byte(0x01),)))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\x4b\x59\xec\xbe\xf5\x43\xc0\xae\x5d\xe5\xe7\xf8\xd4\x38\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test484(AbstractTest):
    """
    Ingress packet on port 11:
        ethernet =
            dstAddr = 0x9500867b3587
            srcAddr = 0x7947f08ef6d4
            etherType = 0x1106
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x09),
                        action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 11
        pkt = b'\x95\x00\x86\x7b\x35\x87\x79\x47\xf0\x8e\xf6\xd4\x11\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test485(AbstractTest):
    """
    Ingress packet on port 10:
        ethernet =
            dstAddr = 0x8a24ec9933d3
            srcAddr = 0x3279088e56c3
            etherType = 0xc9d3
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x16),
                        action_mirror_id = hex_to_byte(0x00),)))
    
    def sendPacket(self):
        ig_port = 10
        pkt = b'\x8a\x24\xec\x99\x33\xd3\x32\x79\x08\x8e\x56\xc3\xc9\xd3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test486(AbstractTest):
    """
    Ingress packet on port 12:
        ethernet =
            dstAddr = 0x2730165a492d
            srcAddr = 0xe5a5da5b2950
            etherType = 0x322e
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_hit_eg_bypass_i2e_mirror)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_hit_eg_bypass_i2e_mirror(
                    self.sess_hdl, self.dev_tgt, match_spec,
                    emulation_qos_hit_eg_bypass_i2e_mirror_action_spec_t(
                        action_qid = hex_to_byte(0x16),
                        action_mirror_id = hex_to_byte(0x00),)))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 12
        pkt = b'\x27\x30\x16\x5a\x49\x2d\xe5\xa5\xda\x5b\x29\x50\x32\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test487(AbstractTest):
    """
    Ingress packet on port 9:
        ethernet =
            dstAddr = 0xfb13f55c191f
            srcAddr = 0xbe65a49aa63f
            etherType = 0xc6d8
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] deflect_on_drop_tbl <default> (do_deflect_on_drop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table deflect_on_drop_tbl
        self.client.deflect_on_drop_tbl_set_default_action_do_deflect_on_drop(
            self.sess_hdl, self.dev_tgt)
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 9
        pkt = b'\xfb\x13\xf5\x5c\x19\x1f\xbe\x65\xa4\x9a\xa6\x3f\xc6\xd8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test488(AbstractTest):
    """
    Ingress packet on port 15:
        ethernet =
            dstAddr = 0x263ffbf97331
            srcAddr = 0x4edfe68327d1
            etherType = 0xe8eb
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_miss)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 15
        pkt = b'\x26\x3f\xfb\xf9\x73\x31\x4e\xdf\xe6\x83\x27\xd1\xe8\xeb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test489(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x099c7c616caa
            srcAddr = 0xaa1f399b1624
            etherType = 0xb589
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <miss>
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x09\x9c\x7c\x61\x6c\xaa\xaa\x1f\x39\x9b\x16\x24\xb5\x89\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test490(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x099c7c616caa
            srcAddr = 0xaa1f399b1624
            etherType = 0xb589
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (do_recirc)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_do_recirc(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x09\x9c\x7c\x61\x6c\xaa\xaa\x1f\x39\x9b\x16\x24\xb5\x89\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test491(AbstractTest):
    """
    Ingress packet on port 7:
        ethernet =
            dstAddr = 0x099c7c616caa
            srcAddr = 0xaa1f399b1624
            etherType = 0xb589
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] recirc_tbl <hit> (noop)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table recirc_tbl
        for ig_intr_md_ingress_port in range(0x000, 0x1ff+1):
            match_spec = emulation_recirc_tbl_match_spec_t(
                ig_intr_md_ingress_port = hex_to_i16(ig_intr_md_ingress_port),)
            self.match_entries['recirc_tbl'].append(
                self.client.recirc_tbl_table_add_with_noop(
                    self.sess_hdl, self.dev_tgt, match_spec))
    
    def sendPacket(self):
        ig_port = 7
        pkt = b'\x09\x9c\x7c\x61\x6c\xaa\xaa\x1f\x39\x9b\x16\x24\xb5\x89\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

class Test492(AbstractTest):
    """
    Ingress packet on port 4:
        ethernet =
            dstAddr = 0xf5177f70013b
            srcAddr = 0x7d93bb5ce9e9
            etherType = 0x8eb8
    
    Trace:
        [ Parser ] start
        [ Parser ] _parse_ethernet
        [ Action ] dmac <miss>
        [ Action ] ingress_qos <hit> (qos_miss)
        [ Action ] resubmit_tbl <default> (do_resubmit)
    No egress: packet dropped.
    """
    
    def setupCtrlPlane(self):
        # Table ingress_qos
        for vlan_tag__vid in range(0x000, 0xfff+1):
            match_spec = emulation_ingress_qos_match_spec_t(
                vlan_tag__valid = 0,
                vlan_tag__vid = hex_to_i16(vlan_tag__vid),)
            self.match_entries['ingress_qos'].append(
                self.client.ingress_qos_table_add_with_qos_miss(
                    self.sess_hdl, self.dev_tgt, match_spec))
        # Table resubmit_tbl
        self.client.resubmit_tbl_set_default_action_do_resubmit(
            self.sess_hdl, self.dev_tgt)
    
    def sendPacket(self):
        ig_port = 4
        pkt = b'\xf5\x17\x7f\x70\x01\x3b\x7d\x93\xbb\x5c\xe9\xe9\x8e\xb8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        send_packet(self, ig_port, pkt)
    
    
    def runTest(self):
        self.runTestImpl()

# Covered 40 of 42 branches (95.2%).
# Note: not all branches may be feasible.
