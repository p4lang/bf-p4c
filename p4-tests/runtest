#!/bin/bash

set -o pipefail

# On macOS, 'timeout' is not installed by default, and 'brew install coreutils'
# prefixes all of the standard GNU utilities with 'g', so 'timeout' is
# 'gtimeout' on that plaform. 'readlink' also needs this treatment because the
# BSD version accepts different options.
TIMEOUT_COMMAND=$(which gtimeout || which timeout)
READLINK_COMMAND=$(which greadlink || which readlink)

# set the debugger based on platform: lldb on MacOS, gdb everywhere else
if [ $(uname -s) == 'Darwin' ]; then
    DEBUGGER_COMMAND="lldb --"
else
    DEBUGGER_COMMAND="gdb --args"
fi

TIMEOUT=${P4C_TIMEOUT:-500}
TIME_COMMAND="" # don't time commands
verbose=false
debug=false
debug_bfas=false
debug_p4c=false
run_stf=true
run_stf2ptf=false
run_ptf=false
ptftestdir=""
device="tofino"

die() {
    if [ $# -gt 0 ]; then
        echo >&2 "$@"
    fi
    exit 1
}

run() {
    if $verbose; then
        echo "$@"
    fi
    $TIME_COMMAND $TIMEOUT_COMMAND --foreground $TIMEOUT "$@"
    status=$?
    if [ $status -eq 124 ]; then
        echo >&2 $1 TIMEOUT
    elif [ $status -gt 128 ]; then
        echo >&2 $1 CRASH with signal $(expr $status - 128)
    elif [ $status -gt 0 ]; then
        echo >&2 $1 FAILED
    fi
    return $status
}

srcdir=${1%/}
if [ ! -d "$srcdir" ]; then
    die "Usage: $0 <srcdir> <test-source>"
fi
shift

# Find the root of the cmake build directory, where the cache is located
findcmakecache() {
    dir=$(pwd -P)
    while [ "$dir" != "/" ]; do
        if [ -f "$dir/CMakeCache.txt" ]; then
            echo $dir
            return
        fi
        dir=$(dirname $dir)
    done
    echo >&2 "Cmake cache not found"
    exit 1
}

findbin() {
    bin=$(cmake -L -N $(findcmakecache) | grep "^$1" | cut -d "=" -f 2)
    if [ "$bin" = "" ]; then
        echo >&2 "Could not find $1 in cmake cache"
        exit 1
    fi
    echo $bin
}

P4C=./p4c
testdir=tofino
filter_P4C_ARGS=""
for p4c_arg in $P4C_ARGS; do
    if [ "$p4c_arg" = "-norun" ]; then
        run_stf=false
    elif [ "$p4c_arg" = "-ptf" ]; then
        run_ptf=true
    elif [ "$p4c_arg" = "-time" ]; then
        TIME_COMMAND="time"
    elif [ "$p4c_arg" = "-v" ]; then
        if $verbose; then
            filter_P4C_ARGS="$filter_P4C_ARGS $p4c_arg"
        fi
        verbose=true
    else
        filter_P4C_ARGS="$filter_P4C_ARGS $p4c_arg"
    fi
done
P4C_ARGS="$filter_P4C_ARGS"
out_ext=""

while [ $# -gt 1 ]; do
    case $1 in
    -h|-help|--help)
        echo >&2 "p4c test runner options"
        echo >&2 "   -v             verbose -- print commands before running them"
        echo >&2 "   -gdb           run p4c-barefoot under gdb"
        echo >&2 "   -time          time commands as they run"
        echo >&2 "   -to <sec>      timeout programs after <sec> seconds (default 30)"
        echo >&2 "   -ptf           run PTF tests if available"
        echo >&2 "   -ptfdir <dir>  directory containing PTF tests"
        echo >&2 "   -tofino        target tofino"
        echo >&2 "   -jbay          target jbay"
        echo >&2 "other arguments passed to p4c-barefoot:"
        $P4C --help
        exit 0
        ;;
    -db|-gdb)
        if $verbose && ! $debug; then
            P4C_ARGS="$P4C_ARGS -v"
        fi
        debug=true
        debug_p4c=true
        ;;
    -dbas)
        if $verbose && ! $debug; then
            P4C_ARGS="$P4C_ARGS -v"
        fi
        debug=true
        debug_bfas=true
        ;;
    -to)
        TIMEOUT=$2
        shift
        ;;
    -time)
        TIME_COMMAND="time"
        ;;
    -norun)
        run_stf=false
        ;;
    -ptf)
        run_ptf=true
        ;;
    -ptfdir)
        ptftestdir=$2
        shift
        ;;
    -tofino)
        device="tofino"
        testdir=tofino
        ;;
    -jbay)
        device="jbay"
        testdir=jbay
        ;;
    -stf2ptf)
        run_stf2ptf=true
        run_ptf=true
        run_stf=false
        ;;
    -v) if $verbose || $debug; then
            P4C_ARGS="$P4C_ARGS $1"
        fi
        verbose=true
        ;;
    --*)
        if [ -d $testdir${1#-} ]; then
            testdir="$testdir${1#-}"
        fi
        P4C_ARGS="$P4C_ARGS $1"
        ;;
    -D*)
        out_ext=$out_ext$1
        P4C_ARGS="$P4C_ARGS $1"
        ;;
    *)  P4C_ARGS="$P4C_ARGS $1"
        ;;
    esac
    shift
done

if [ ! -r $1 ]; then
    die "Can't read $1"
fi
file=$1

if [[ "$file" =~ ^"$srcdir/" || "$srcdir" == "." ]]; then
    testdir=$testdir/$(dirname ${file#$srcdir/})
elif [[ "$file" =~ ^/ ]]; then
    testdir=$(dirname $file)
else
    die "$file is not under $srcdir"
fi

name=$(basename $file .p4)

# turn on compiler debug info, regardless
P4C_ARGS="$P4C_ARGS -g"

if $debug; then
    # we need to invoke the debugger directly on the backend executable
    P4C=./p4c-barefoot
    uppercase_device=$(echo $device | tr '[:lower:]' '[:upper:]')
    P4C_ARGS="$P4C_ARGS -D__TARGET_${uppercase_device}__"
fi

if [ $(expr "$file" : ".*v1_2") -gt 0 -o $(expr "$file" : ".*p4_16") -gt 0 ]; then
    # XXX(cole): This is a hack.  There are some P4_16 tests written against the
    # v1model architecture; in the future, this will be deprecated, and only
    # translated P4_14 programs will use the v1model architecture.  Even better,
    # eventually architecture files might include enough information to uniquely
    # identify the target, making the "--target" flag obsolete.  For the time
    # being, we grep for "v1model.p4" to determine whether a test uses the v1model
    # or TNA architecture.
    # XXX(zma) assuming tofino and jbay have same arch for now
    if grep -q "tofino.p4" "$file"; then
        P4C_ARGS="$P4C_ARGS --target ${device}-native-barefoot"
    else
        P4C_ARGS="$P4C_ARGS --target ${device}-v1model-barefoot"
    fi

    if $debug; then
        P4C_ARGS="$P4C_ARGS --p4v 16"
    else
        P4C_ARGS="$P4C_ARGS -x p4-16"
    fi
else
     P4C_ARGS="$P4C_ARGS --target ${device}-v1model-barefoot"

    if $debug; then
        P4C_ARGS="$P4C_ARGS --p4v 14"
    else
        P4C_ARGS="$P4C_ARGS -x p4-14"
    fi
fi

if [ "$ptftestdir" != "" ] && [ ! -d ${ptftestdir} ]; then
    die "Invalid -ptfdir: $ptftestdir does not exist"
fi
if [ "$ptftestdir" = "" ]; then
    ptftestdir=${file%.p4}.ptf
    if [ ! -d ${ptftestdir} ] && ! $run_stf2ptf; then
        # no ptf to run
        run_ptf=false
    fi
fi

p4runtime_out=$testdir/${name}${out_ext}.out/p4info.proto.txt
P4C_ARGS="$P4C_ARGS --p4runtime-file $p4runtime_out --p4runtime-format text"

if $run_ptf || $run_stf2ptf; then
    P4C_ARGS="$P4C_ARGS -DCPU_PORT=320 -Xlinker='--singlepipe'"
    NUM_IFACES=8
    for ifaceIdx in $(seq 0 $(($NUM_IFACES-1))); do
        PORT_NAME="FP_PORT_${ifaceIdx}"
        P4C_ARGS="$P4C_ARGS -D${PORT_NAME}=${ifaceIdx}"
    done
fi

if [ ! -x $P4C ]; then
    die "Can't find $P4C"
fi

if $debug; then
    if $verbose; then
        echo "$DEBUGGER_COMMAND $P4C $P4C_ARGS $file -o $testdir/$name${out_ext}.bfa"
    fi
    if $debug_p4c; then
        $DEBUGGER_COMMAND $P4C $P4C_ARGS $file -o $testdir/$name${out_ext}.bfa
    else
        $P4C $P4C_ARGS $file -o $testdir/$name${out_ext}.bfa
    fi

    BFAS=../bf-asm/bfas
    if [ ! -x $BFAS ]; then
        die "Can't find $BFAS"
    fi
    if $debug_bfas; then
        exec $DEBUGGER_COMMAND $BFAS $testdir/$name${out_ext}.bfa
    else
        exec $BFAS $testdir/$name${out_ext}.bfa
    fi
fi

if [ $(expr "$file" : ".*_errors") -gt 0 ]; then
    if run $P4C $P4C_ARGS $file -o $testdir/${name}${out_ext}.out; then
        echo >&2 "$P4C did not give an error when expected"
        exit 1
    fi
    exit 0
fi

# delete old outputs so we don't get confused if they're not overwritten
rm -f $testdir/$name${out_ext}.bfa
rm -f $testdir/$name${out_ext}.out/${device}.bin
rm -f $testdir/$name${out_ext}.out/${device}.bin.gz
run $P4C $P4C_ARGS $file -o $testdir/${name}${out_ext}.out || die
# FIXME -- p4c should not leave these laying about.  Should also compress tofino.bin?
rm -f $testdir/$name${out_ext}.out/*.cfg.json
if [ -r $testdir/$name${out_ext}.out/${device}.bin ]; then
    if $run_ptf; then
        true # ptf requires uncompressed binary
    elif $run_stf; then
        # stf can run compressed binaries with recent updates
        gzip -f $testdir/$name${out_ext}.out/${device}.bin
    else
        #binary not needed
        rm $testdir/$name${out_ext}.out/${device}.bin
    fi
fi
for f in $testdir/$name${out_ext}.out/*.log; do
    if [ -r $f ]; then
        gzip -f $f
    fi
done

if [ ! -r $testdir/$name${out_ext}.out/$name.bfa ]; then
    echo >&2 "$P4C did not give an error but did not generate output either"
    exit 1
fi

if $run_stf && [ -r ${file%.p4}.stf ]; then
    STF=$(findbin HARLYN_STF_${device})

    if [[ "$file" =~ ^/ ]]; then
        test=${file%.p4}.stf
    else
        test=`pwd`/${file%.p4}.stf
    fi
    cd $testdir
    mkdir -p $name${out_ext}.out
    obsLog=$name.p4.obs

    rm -f $name${out_ext}.out/*.cfg.json
    run $STF -l $name${out_ext}.out --observation-log $obsLog $test | \
        grep -v 'WARN MAU::[a-z_]* Time gone backwards!' \
        || die
fi

if $run_ptf ; then
    PTF_RUNNER=$(findbin HARLYN_PTF_DRIVER_WRAPPER)
    if [ -d ${ptftestdir} ]; then
        PTF_CMD="$PTF_RUNNER --testdir $testdir/$name${out_ext}.out --name $name \
                --ptfdir ${ptftestdir} --top-builddir $(findcmakecache)"
    elif $run_stf2ptf && [ -r ${file%.p4}.stf ]; then
        mydir=$(dirname $0)
        export PYTHONPATH=${PYTHONPATH}:${mydir}/tools/stf
        if [[ "$file" =~ ^/ ]]; then
            stftest=${file%.p4}.stf
        else
            stftest=`pwd`/${file%.p4}.stf
        fi
        PTF_CMD="$PTF_RUNNER --testdir $testdir/$name${out_ext}.out --name $name \
                --stftest ${stftest} \
                --ptfdir ${mydir}/tools/stf --top-builddir $(findcmakecache)"
    fi
    if [ -n "$PTF_CMD" ]; then
        run $PTF_CMD || die
    fi
fi

# cleanup
rm -f $testdir/$name${out_ext}.out/${device}.bin
rm -f $testdir/$name${out_ext}.out/*.cfg.json

if [[ " $IFAIL_TESTS " =~ " $testdir/$name.p4.test " ]]; then
    echo "intermittent test PASSED"
    exit 1
fi
