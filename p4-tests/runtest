#!/bin/bash

set -o pipefail

# On macOS, 'timeout' is not installed by default, and 'brew install coreutils'
# prefixes all of the standard GNU utilities with 'g', so 'timeout' is
# 'gtimeout' on that plaform. 'readlink' also needs this treatment because the
# BSD version accepts different options.
TIMEOUT_COMMAND=$(which gtimeout || which timeout)
READLINK_COMMAND=$(which greadlink || which readlink)

TIMEOUT=${P4C_TIMEOUT:-120}
TIME_COMMAND="" # don't time commands
verbose=false
debug=false
run_stf=true
run_ptf=false

die() {
    if [ $# -gt 0 ]; then
        echo >&2 "$@"
    fi
    exit 1
}

run() {
    if $verbose; then
        echo "$@"
    fi
    $TIME_COMMAND $TIMEOUT_COMMAND --foreground $TIMEOUT "$@"
    status=$?
    if [ $status -eq 124 ]; then
        echo >&2 $1 TIMEOUT
    elif [ $status -gt 128 ]; then
        echo >&2 $1 CRASH with signal $(expr $status - 128)
    elif [ $status -gt 0 ]; then
        echo >&2 $1 FAILED
    fi
    return $status
}

srcdir=${1%/}
if [ ! -d "$srcdir" ]; then
    die "Usage: $0 <srcdir> <test-source>"
fi
shift

# Find the root of the cmake build directory, where the cache is located
findcmakecache() {
    dir=$(pwd -P)
    while [ "$dir" != "/" ]; do
        if [ -f "$dir/CMakeCache.txt" ]; then
            echo $dir
            return
        fi
        dir=$(dirname $dir)
    done
    echo >&2 "Cmake cache not found"
    exit 1
}

findbin() {
    bin=$(cmake -L -N $(findcmakecache) | grep "^$1" | cut -d "=" -f 2)
    if [ "$bin" = "" ]; then
        echo >&2 "Could not find $1 in cmake cache"
        exit 1
    fi
    echo $bin
}

# Looks for path to simple_test_harness in cmake cache
findstfbin() {
    echo $(findbin HARLYN_STF)
}

P4C=./p4c
testdir=tofino
filter_P4C_ARGS=""
for p4c_arg in $P4C_ARGS; do
    if [ "$p4c_arg" = "-norun" ]; then
        run_stf=false
    elif [ "$p4c_arg" = "-ptf" ]; then
        run_ptf=true
    elif [ "$p4c_arg" = "-time" ]; then
        TIME_COMMAND="time"
    elif [ "$p4c_arg" = "-v" ]; then
        if $verbose; then
            filter_P4C_ARGS="$filter_P4C_ARGS $p4c_arg"
        fi
        verbose=true
    else
        filter_P4C_ARGS="$filter_P4C_ARGS $p4c_arg"
    fi
done
P4C_ARGS="$filter_P4C_ARGS"

while [ $# -gt 1 ]; do
    case $1 in
    -h|-help|--help)
        echo >&2 "p4c tofino test runner options"
        echo >&2 "   -v             verbose -- print commands before running them"
        echo >&2 "   -gdb           run p4c-tofino under gdb"
        echo >&2 "   -time          time commands as they run"
        echo >&2 "   -to <sec>      timeout programs after <sec> seconds (default 30)"
        echo >&2 "   -ptf           run PTF tests if available"
        echo >&2 "other arguments passed to p4c-tofino:"
        $P4C --help
        exit 0
        ;;
    -db|-gdb)
        debug=true
        if $verbose; then
            P4C_ARGS="$P4C_ARGS -v"
        fi
        ;;
    -to)
        TIMEOUT=$2
        shift
        ;;
    -time)
        TIME_COMMAND="time"
        ;;
    -norun)
        run_stf=false
        ;;
    -ptf)
        run_ptf=true
        ;;
    -v) if $verbose || $debug; then
            P4C_ARGS="$P4C_ARGS $1"
        fi
        verbose=true
        ;;
    --*)
        if [ -d $testdir${1#-} ]; then
            testdir="$testdir${1#-}"
        fi
        P4C_ARGS="$P4C_ARGS $1"
        ;;
    *)  P4C_ARGS="$P4C_ARGS $1"
        ;;
    esac
    shift
done

if [ ! -r $1 ]; then
    die "Can't read $1"
fi
file=$1

if [[ "$file" =~ ^"$srcdir/" || "$srcdir" == "." ]]; then
    testdir=$testdir/$(dirname ${file#$srcdir/})
elif [[ "$file" =~ ^/ ]]; then
    testdir=$(dirname $file)
else
    die "$file is not under $srcdir"
fi

name=$(basename $file .p4)

if $debug; then
    # we need to invoke the debugger directly on the backend executable
    P4C=./p4c-tofino
    P4C_ARGS="$P4C_ARGS -D__TARGET_TOFINO__"
else
    P4C_ARGS="$P4C_ARGS --target tofino-v1model-barefoot"
fi
if [ $(expr "$file" : ".*v1_2") -gt 0 -o $(expr "$file" : ".*p4_16") -gt 0 ]; then
    if $debug; then
        P4C_ARGS="$P4C_ARGS --p4v 16"
    else
        P4C_ARGS="$P4C_ARGS -x p4-16"
    fi
else
    if $debug; then
        P4C_ARGS="$P4C_ARGS --p4v 14"
    else
        P4C_ARGS="$P4C_ARGS -x p4-14"
    fi
fi

if $run_ptf && [ -d ${file%.p4}.ptf ]; then
    p4runtime_out=$testdir/${name}.out/p4info.proto.txt
    P4C_ARGS="$P4C_ARGS --p4runtime-file $p4runtime_out --p4runtime-format text"
fi

if [ ! -x $P4C ]; then
    die "Can't find $P4C"
fi

if $debug; then
    if $verbose; then
        echo "gdb --args $P4C $P4C_ARGS $file -o $testdir/$name.tfa"
    fi
    exec gdb --args $P4C $P4C_ARGS $file -o $testdir/$name.tfa
fi

if [ $(expr "$file" : ".*_errors") -gt 0 ]; then
    if run $P4C $P4C_ARGS $file -o $testdir/${name}.out; then
        echo >&2 "$P4C did not give an error when expected"
        exit 1
    fi
    exit 0
fi

rm -f $testdir/$name.tfa
run $P4C $P4C_ARGS $file -o $testdir/${name}.out || die

if [ ! -r $testdir/$name.out/$name.tfa ]; then
    echo >&2 "$P4C did not give an error but did not generate output either"
    exit 1
fi

if $run_stf && [ -r ${file%.p4}.stf ]; then
    STF=$(findstfbin)

    if [[ "$file" =~ ^/ ]]; then
        test=${file%.p4}.stf
    else
        test=`pwd`/${file%.p4}.stf
    fi
    cd $testdir
    mkdir -p $name.out
    obsLog=$name.p4.obs

    rm -f $name.out/*.cfg.json
    run $STF -l $name.out --observation-log $obsLog $test | \
        grep -v 'WARN MAU::[a-z_]* Time gone backwards!' \
        || die
fi

if $run_ptf && [ -d ${file%.p4}.ptf ]; then
    PTF_RUNNER=$(findbin HARLYN_PTF_DRIVER_WRAPPER)
    $PTF_RUNNER --testdir $testdir --name $name --ptfdir ${file%.p4}.ptf \
                --top-builddir $(findcmakecache)
fi

if [[ " $IFAIL_TESTS " =~ " $testdir/$name.p4.test " ]]; then
    echo "intermittent test PASSED"
    exit 1
fi
