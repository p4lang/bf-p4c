# Copyright 2013-present Barefoot Networks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

MESSAGE("-- Adding BFN Compiler test suite")
OPTION(ENABLE_STF2PTF "Run STF tests as PTF" OFF)
OPTION(TEST_ALT_PHV_ALLOC "Enable the alternative PHV allocator in ctest-based tests" OFF)

if (ENABLE_TEST_ISOLATION)
    set (P4C_RUNTEST ${CMAKE_CURRENT_SOURCE_DIR}/internal/runtest-isolated)
else()
    set (P4C_RUNTEST ${CMAKE_CURRENT_SOURCE_DIR}/runtest)
endif()

set(RUNTEST_ENV ${P4C_BINARY_DIR}/runtest.env)
file(WRITE ${RUNTEST_ENV}
     "# Evironment file for bf-p4c's runtest test runner. Generated by ${CMAKE_CURRENT_LIST_FILE}\n")

# mode is either APPEND or SET
function(add_runtest_env var mode val)
    if (${mode} STREQUAL "APPEND")
        message("runtest.env: append ${var} += ${val}")
        file(APPEND ${RUNTEST_ENV} "${var}+=(\"${val}\")\n")
    else()
        message("runtest.env: set ${var} = ${val}")
        file(APPEND ${RUNTEST_ENV} "${var}=\"${val}\"\n")
    endif()
    file(APPEND ${RUNTEST_ENV} "export ${var}\n")
endfunction()

if (TEST_ALT_PHV_ALLOC)
    add_runtest_env("P4C_ARGS" APPEND "-Xp4c=--alt-phv-alloc")
endif()

set (HARLYN_PTF_DRIVER ${CMAKE_CURRENT_SOURCE_DIR}/ptf_runner.py
  CACHE FILEPATH "Path to PTF Harlyn runner")
set (HARLYN_PTF_DRIVER_WRAPPER ${CMAKE_CURRENT_BINARY_DIR}/ptf_runner_wrapper
  CACHE FILEPATH "Path to PTF Harlyn runner wrapper")

configure_file ("src/ptf_runner_wrapper.c.in"
  "${P4C_BINARY_DIR}/ptf_runner_wrapper.c" @ONLY)

if(NOT P414_TEST_ARCH)
    set(P414_TEST_ARCH "v1model")
endif()
if(NOT TOFINO_P414_TEST_ARCH)
    set(TOFINO_P414_TEST_ARCH ${P414_TEST_ARCH})
endif()
if(NOT JBAY_P414_TEST_ARCH)
    set(JBAY_P414_TEST_ARCH ${P414_TEST_ARCH})
endif()
if(NOT CLOUDBREAK_P414_TEST_ARCH)
    set(CLOUDBREAK_P414_TEST_ARCH ${P414_TEST_ARCH})
endif()

# Set PTF arg that specifies pkt_size in all tests. The wrapper makes sure it
# gets forwarded to ptf it applicable.
# This option is added to more and more tests coming from bf-switch & p4-tests
# repositories so it makes sense to preset in for all tests.
set(ptfPktSize 100)
set(testExtraArgs "-Xptf=--test-params=pkt_size=${ptfPktSize}")

# common test utils
include(TestUtils.cmake)

#include(Switch.cmake)
if (ENABLE_TESTING)
  # add tofino tests and xfails with reasons
  include(TofinoTests.cmake)
  if (CLOSED_SOURCE)
    include(internal/TofinoTests.cmake)
  endif (CLOSED_SOURCE)

  # tofino2 variants -- to be enabled when support is added in the model and p4-build
  # include(Tofino2Tests.cmake)
  # add jbay tests and xfails with reasons
  include(JBayTests.cmake)
  if (CLOSED_SOURCE)
    include(internal/JBayTests.cmake)
  endif (CLOSED_SOURCE)
  if (ENABLE_CLOUDBREAK)
    include(internal/CloudbreakTests.cmake)
  endif()
  if (ENABLE_FLATROCK)
    include(internal/FlatrockTests.cmake)
  endif()

  # We have additional test inputs that are used to test the other
  # (standard) back-ends These test input programs depend on Tofino in
  # some way.

  # Exercise v12 back-end on Tofino-specific programs
  include (P14Tests.cmake)

  # P4_16 tests
  include (P16Tests.cmake)

  # Exercise bmv2 back-end on Tofino-specific programs
  include (BMV2Tests.cmake)


if (CLOSED_SOURCE)
  # Test code generation (check assembler output)
  include (internal/CodeGenTests.cmake)
endif (CLOSED_SOURCE)

  if (ENABLE_STF2PTF)
    # test STF lexing and parsing by running the stf2ptf_pd generator on
    # all existing STF files in the tree
    set (STF2PD_CMD "${CMAKE_CURRENT_SOURCE_DIR}/tools/stf/stf2ptf_pd")
    file (GLOB_RECURSE __stftestfiles FOLLOW_SYMLINKS
      RELATIVE ${CMAKE_CURRENT_BINARY_DIR}
      "${BFN_P4C_SOURCE_DIR}/*.stf")
    foreach (__t ${__stftestfiles})
      set (__testname "stf2pd_${__t}")
      add_test (NAME ${__testname} COMMAND ${STF2PD_CMD} ${__t}
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
      set_tests_properties (${__testname} PROPERTIES LABELS "TEST_STF2PTF_GEN")
      # and make sure we cleanup the generated files
      string (REGEX REPLACE ".stf$" "_ptf.py" __ptffile ${__testname})
      set_source_files_properties(${__ptffile} PROPERTIES GENERATED TRUE)
    endforeach()

    add_custom_target(check-stf2ptf-gen
      COMMAND ${CMAKE_CTEST_COMMAND} -L TEST_STF2PTF
      COMMENT "Running tests for STF2PTF generation"
      WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
  endif(ENABLE_STF2PTF)
endif(ENABLE_TESTING)
