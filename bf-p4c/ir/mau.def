

#emit
struct TableResourceAlloc;
#include "bf-p4c/mau/hash_function.h"
#end
#emit_impl
#include "bf-p4c/mau/resource.h"
#end

#emit
#include "bf-p4c/ir/ir_enums.h"
#end

#emit
#include "bf-p4c/ir/unique_id.h"
#end

namespace MAU {

/** A Tofino logical table (group) -- a gateway and/or match table
 * along with whatever attached tables are run.  The basic scheduling
 * unit for tofino; there are 16 such 'logical' tables available in
 * each stage, which will run simultaneously and have their results
 * predicated by the predicate mask calculated from the next tables */
class Table : BFN::Unit {
    cstring                                     name;
    gress_t                                     gress;
    cstring                                     gateway_name;
    cstring                                     gateway_cond;
    /** Each stage has 16 slots for tables.  Logical IDs are numbered from 0
     * (Stage 0, Slot 0) to N * 16 + 15 (Stage N, Slot 15).  The @logical_id is
     * where this table has been assigned, or -1 if it has not yet been
     * assigned.
     *
     * If @logical_id is not -1, the stage this table is assigned to is
     * `(int)(logical_id/16)`.
     */
    int                                         logical_id = -1;
    // The split within the stage for an atcam/dleft table
    int                                         stage_split = -1;
    int                                         logical_split = -1;
    int                                         logical_tables_in_stage = -1;
    safe_vector<std::pair<Expression, cstring>> gateway_rows;
    /** each gateway_row is a an expression for a single row of the gateway,
     * with the string being a tag to run in 'next' for next table, or null
     * if the match_table should run.  The last row (only) may have a NULL
     * expression for 'always' -- corresponding to the gateway miss action
     * (taken if no gateway rows match).  If this last row NULL expression
     * is not present, the default action is to run the table. */
    NullOK Action                               gateway_payload;
    // match_table never visited, keys are in match_key, default action also in action
    NullOK IR::P4Table                          match_table;
    inline Vector<BackendAttached>              attached;
    // ordered_map is used because assembly assumes the order of actions
    // matches to the next table name in the hit list.
    inline ordered_map<cstring, Action>         actions;
    // std::map is used because using ordered_map fails stful.p4 by generating
    // stful alu that are supposed to be in the same stage to different stages.
    // XXX(hanw): we should get to the bottom of this issue.
    inline std::map<cstring, TableSeq>          next;
    inline Vector<TableKey>                match_key;
    int                                         random_seed = -1;
    bool                                        dynamic_key_masks = false;
    NullOK EntriesList                          entries_list;
    bool                                        created_during_tp = false;
    // Flag to indicate the table is compiler generated. This flag is passed on
    // the assembly and context json as 'p4_hidden' to disable PD API generation
    // on this table
    bool                                        is_compiler_generated = false;

    class IndirectAddress {
        bool shifter_enabled = false;
        int address_bits = 0;
        bool per_flow_enable = false;
        int meter_type_bits = 0;
        IndirectAddress() { memset(this, 0, sizeof(*this)); }
        operator== { return memcmp(this, &a, sizeof(IndirectAddress)) == 0; }
        toJSON {
            json << json.indent << "\"shifter_enabled\" : " << shifter_enabled << ",\n"
                 << json.indent << "\"address_bits\" : " << address_bits << ",\n"
                 << json.indent << "\"per_flow_enble\" : " << per_flow_enable << ",\n"
                 << json.indent << "\"meter_type_bits\" : " << meter_type_bits;
        }
        fromJSON {
            if (!json.json) return nullptr;
            IndirectAddress *rv = new IndirectAddress();
            json.load("shifter_enabled", rv->shifter_enabled);
            json.load("address_bits", rv->address_bits);
            json.load("per_flow_enable", rv->per_flow_enable);
            json.load("meter_type_bits", rv->meter_type_bits);
            return rv;
        }
#emit
        IndirectAddress &operator+=(const IndirectAddress &a);
#end
        int total_bits() const {
           int rv = address_bits + meter_type_bits;
           rv = per_flow_enable ? rv + 1 : rv;
           return rv;
        }
    }

    class Layout {
        /* POD type */
        int             entries = 0;
        bool            pre_classifier = false;
        bool            gateway = false;
        bool            exact = false;
        bool            ternary = false;
        bool            hash_action = false;
        bool            atcam = false;
        bool            alpm = false;
        bool            has_range = false;
        bool            proxy_hash = false;
        int             ixbar_bytes = 0;
        int             match_bytes = 0;
        int             ixbar_width_bits = 0;
        int             match_width_bits = 0;
        int             ghost_bytes = 0;
        int             action_data_bytes = 0;
        int             action_data_bytes_in_table = 0;
        int             overhead_bits = 0;
        inline IndirectAddress meter_addr;
        inline IndirectAddress stats_addr;
        inline IndirectAddress action_addr;
        int             immediate_bits = 0;
        int             partition_bits = 0;
        int             partition_count = 0;
        int             pre_classifer_number_entries = 0;
        int             subtrees_per_partition = 0;
        int             total_actions = 0;
        int             sel_len_bits = 0;
        int             proxy_hash_width = 0;
        Layout() { memset(this, 0, sizeof(*this)); }
        operator== { return memcmp(this, &a, sizeof(Layout)) == 0; }
        toJSON {
            json << json.indent << "\"entries\" : " << entries << ",\n"
                 << json.indent << "\"gateway\" : " << gateway << ",\n"
                 << json.indent << "\"ternary\" : " << ternary << ",\n"
                 << json.indent << "\"ixbar_bytes\" : " << ixbar_bytes << ",\n"
                 << json.indent << "\"match_width_bits\" : " << match_width_bits << ",\n"
                 << json.indent << "\"action_data_bytes_in_table\" : "
                                << action_data_bytes_in_table << ",\n"
                 << json.indent << "\"immediate_bits\" : " << immediate_bits << ",\n"
                 << json.indent << "\"overhead_bits\" : " << overhead_bits; }
        fromJSON {
            if (!json.json) return nullptr;
            Layout *rv = new Layout();
            json.load("entries", rv->entries);
            json.load("gateway", rv->gateway);
            json.load("ternary", rv->ternary);
            json.load("ixbar_bytes", rv->ixbar_bytes);
            json.load("match_width_bits", rv->match_width_bits);
            json.load("action_data_bytes_in_table", rv->action_data_bytes_in_table);
            json.load("immediate_bits", rv->immediate_bits);
            json.load("overhead_bits", rv->overhead_bits);
            return rv; }

        bool direct_ad_required() const {
            if (action_addr.address_bits > 0)
                return false;
            if (action_data_bytes == 0)
                return false;
            return action_data_bytes_in_table > 0;
        }
        bool ternary_indirect_required() const { return ternary; }
        bool no_match_data() const {
            return ixbar_width_bits == 0;
        }
        bool no_match_rams() const {
            return no_match_data() || hash_action;
        }
        /** Currently hash action tables and default action tables that cannot be adapted by
         *  runtime go through the hit pathway in Glass, so allocating accordingly.
         */
        bool no_match_hit_path() const {
            return no_match_rams() &&
                   ((no_match_data() && overhead_bits == 0 && action_data_bytes == 0
                                    && total_actions <= 1)
                   || hash_action);
        }
        /** Any keyless table that has parameters that can be adjusted during runtime, such
         *  as action or action data must go through the miss pathway, as those are the registers
         *  configured by the driver when the control plane requests a change
         */
        bool no_match_miss_path() const {
            return no_match_rams() && !no_match_hit_path();
        }



#emit
        Layout &operator+=(const Layout &a);
#end
    }
#emit
    Layout layout;  // need Layout operator<< or dbprint to remove #emit here.
#end
    class Way {
        /* POD type */
        int             match_groups = 0;
        int             entries = 0;
        int             width = 0;
        Way() { memset(this, 0, sizeof(*this)); }
        operator== { return memcmp(this, &a, sizeof(Way)) == 0; }
        toJSON {
            json << json.indent << "\"match_groups\" : " << match_groups << ",\n"
                 << json.indent << "\"entries\" : " << entries << ",\n"
                 << json.indent << "\"width\" : " << width; }
        fromJSON {
            if (!json.json) return nullptr;
            Way* way = new Way();
            json.load("match_groups", way->match_groups);
            json.load("entries", way->entries);
            json.load("width", way->width);
            return way; }
    }
    safe_vector<Way>    ways;
    const TableResourceAlloc            *resources = nullptr;
    bool is_placed() const { return resources != nullptr; }
    bool hit_miss_p4() const;
    bool action_chain() const;
    bool has_default_path() const;
    int action_next_paths() const;
    int get_provided_stage() const;
    int hit_actions() const;
    int get_random_seed() const;
    int get_pragma_max_actions() const;
    bool is_force_immediate() const;
    bool for_dleft() const;

    UniqueId pp_unique_id(AttachedMemory at = nullptr,
       bool is_gw = false, int stage_table = -1, int logical_table = -1,
       UniqueAttachedId::pre_placed_type_t ppt = UniqueAttachedId::NO_PP) const;

    UniqueId unique_id(AttachedMemory at = nullptr, bool is_gw = false) const;
    BackendAttached get_attached(UniqueId id) const;

#noconstructor
    Table(cstring n, gress_t gr) : name(n), gress(gr) {}
    Table(cstring n, gress_t gr, IR::P4Table t)
    : BFN::Unit(t->srcInfo), name(n), gress(gr), match_table(t) {}
#emit
    Table(cstring n, gress_t gr, const Expression *gw)
    : BFN::Unit(gw->srcInfo), name(n), gress(gr),
      gateway_rows{ std::make_pair(gw, "$true"), std::make_pair(nullptr, "$false") } {}
    // ir-generator can't parse {}-initializer (thinks it is the ctor body
#end

    int logical_order() const { return logical_id + gress * 4096; }
    Table *clone_rename(cstring ext) const {
        Table *rv = clone();
        rv->name += ext;
        return rv; }
#nooperator==
#emit
    bool operator==(const Table &a) const override;
#end
    bool uses_gateway() const { return !gateway_rows.empty(); }
    bool gateway_only() const { return match_key.empty() && actions.empty(); }
    cstring build_gateway_name() const {
        auto gName = gateway_name.isNullOrEmpty() ? name : gateway_name;
        // Add '-gateway' suffix to table name if gateway_name is not unique
        if (!gName.startsWith("cond")) gName = gName + "-gateway";
        return gName; }
    int stage() const override {
        return logical_id < 0 ? -1 : logical_id / StageUse::MAX_LOGICAL_IDS; }
    gress_t thread() const override { return gress; }
    toString { return "table " + (match_table ? match_table->name.toString() : name); }
    validate {
        std::set<cstring> gw_next;
        for (auto &gw : gateway_rows) {
            if (&gw != &gateway_rows.back())
                CHECK_NULL(gw.first);
            else if (gw.first)
                gw_next.emplace(cstring());
            gw_next.emplace(gw.second); }
        if (gateway_only() && !uses_gateway() && !created_during_tp)
            BUG("table with no gateway or match table");
        if (gateway_only() && gw_next.count(cstring()))
            BUG("gateway with no match table wants to run match table");
        if (!gateway_only() && uses_gateway() && !gw_next.count(cstring()))
            BUG("gateway always overrides match table");
        for (auto &nxt : next) {
            if (nxt.first == "$default") {
            } else if (nxt.first == "$hit" || nxt.first == "$miss"
                       || nxt.first == "$try_next_stage") {
                if (!match_table)
                    BUG("%s next on table with no match_table", nxt.first);
            } else if (!gw_next.count(nxt.first) && !actions.count(nxt.first)) {
                BUG("%s next on table with no such action or gw result", nxt.first);
            }
            if (!gateway_only()) {
                if (next.count("$hit") || next.count("$miss")) {
                    size_t valid_next_table_size = next.count("$hit") + next.count("$miss")
                                                   + next.count("$try_next_stage");
                    BUG_CHECK(valid_next_table_size == next.size(),
                              "Somehow have a hit/miss table combined with an action chain");
                }
            }
        }
        for (auto &act : actions)
            BUG_CHECK(act.first == act.second->name.originalName,
                      "name mismatch '%s' != '%s' for action %s",
                      act.first, act.second->name.originalName, act.second->name.name);
    }
    visit_children {
        for (auto &gw : gateway_rows)
            v.visit(gw.first, "gateway_row");
        auto &gateway_inhibit(v.flow_clone());
        gateway_inhibit.visit(gateway_payload, "gateway_payload");
        match_key.visit_children(v);
        Visitor *current = &v;
        if (!gateway_only()) {
            Visitor *before_action = &v.flow_clone();
            // Can separate table using hit/miss from tables using action chaining,
            // as in P4 semantically, a table can not use both hit/miss and action chaining
            // Potentially if that changes, we will have to support it with a layered approach
            // to the next table propagation
            if (!next.count("$hit") && !next.count("$miss")) {
                Visitor *default_action = nullptr;
                for (auto &action : actions) {
                    if (!current) current = &before_action->flow_clone();
                    current->visit(action.second);
                    if (next.count(action.first)) {
                        current->visit(next.at(action.first), action.first);
                        if (current != &v)
                            v.flow_merge(*current);
                    } else {
                        if (default_action)
                            default_action->flow_merge(*current);
                        else if (current == &v)
                            default_action = &current->flow_clone();
                        else
                            default_action = current; }
                    current = nullptr; }
                if (next.count("$default")) {
                    // if there are no actions that use the $default next, use a nop action
                    if (!default_action) default_action = &before_action->flow_clone();
                    default_action->visit(next.at("$default"), "$default"); }
                if (default_action) {
                    v.flow_merge(*default_action); }
            } else {
                Visitor *hit_actions = nullptr, *miss_actions = nullptr;
                for (auto &action : Values(actions)) {
                    if (!current) current = &before_action->flow_clone();
                    current->visit(action);
                    if (!action->hit_only()) {
                        if (miss_actions)
                            miss_actions->flow_merge(*current);
                        else
                            miss_actions = current; }
                    if (!action->miss_only()) {
                        if (hit_actions)
                            hit_actions->flow_merge(*current);
                        else if (current != miss_actions)
                            hit_actions = current;
                        else
                            hit_actions = &current->flow_clone(); }
                    current = nullptr; }

                if (next.count("$hit")) {
                    if (!hit_actions) hit_actions = &before_action->flow_clone();
                    hit_actions->visit(next.at("$hit"), "$hit"); }
                if (next.count("$miss")) {
                    if (!miss_actions) miss_actions = &before_action->flow_clone();
                    miss_actions->visit(next.at("$miss"), "$miss"); }
                if (hit_actions && hit_actions != &v)
                    v.flow_merge(*hit_actions);
                if (miss_actions && miss_actions != &v)
                    v.flow_merge(*miss_actions);
            }
            if (next.count("$try_next_stage")) {
                before_action->visit(next.at("$try_next_stage"), "$try_next_stage");
                v.flow_merge(*before_action);
                before_action = nullptr; } }
        std::set<cstring> gw_next;
        for (auto &gw : gateway_rows) {
            if (gw.second && !gw_next.count(gw.second)) {
                if (next.count(gw.second)) {
                    if (!current) current = &gateway_inhibit.flow_clone();
                    current->visit(next.at(gw.second), gw.second);
                    if (current != &v)
                        v.flow_merge(*current);
                } else {
                    v.flow_merge(gateway_inhibit); }
                current = nullptr;
                gw_next.emplace(gw.second); } }
        // FIXME -- attached tables are not properly visited here in the control-flow order,
        // FIXME -- because we don't really know which actions will trigger them.  They
        // FIXME -- should be visited after the action(s) that trigger them and before
        // FIXME -- the next tables that happen after those actions?
        // FIXME -- If the actions contain references to them, then they'll be visited when
        // FIXME -- the action is visited, and this will be a 'revisit'
        attached.visit_children(v);
    }
#apply
}


// attachement of an AttachedMemory table to a match table -- different match tables
// may attach the same AttachedMemory table with different BackendAttached, as long as
// the match tables are mutually exclusive
class BackendAttached {
    NullOK HashDist hash_dist = nullptr;
    StatefulUse use = StatefulUse::NO_USE;
    AddrLocation addr_location = AddrLocation::NOT_SET;
    PfeLocation pfe_location = PfeLocation::NOT_SET;
    TypeLocation type_location = TypeLocation::NOT_SET;
    AttachedMemory attached;
}


abstract AttachedMemory : Attached {
    bool direct = false;
    int size = 0;
    virtual bool indexed() const override { return !direct; }
    virtual UniqueAttachedId::type_t get_id_type() const = 0;
    UniqueAttachedId unique_id() const { return UniqueAttachedId(name, direct, get_id_type()); }
}

/** Any attached table that has a keeps stateful information about flows.
 */
abstract Synth2Port : AttachedMemory {
    ID table = {};
    bool saturating = false;
    int width = 0;
    DataAggregation type = DataAggregation::NONE;
    void settype(cstring t) {
        if (strcasecmp(t.c_str(), "packets") == 0) type = DataAggregation::PACKETS;
        else if (strcasecmp(t.c_str(), "bytes") == 0) type = DataAggregation::BYTES;
        else if (strcasecmp(t.c_str(), "packets_and_bytes") == 0 ||
                 strcasecmp(t.c_str(), "packetsandbytes") == 0) type = DataAggregation::BOTH;
        else error("%s: Unknown type %s", srcInfo, t); }  // NOLINT
}

class Counter : Synth2Port {
    int min_width = -1;
    int max_width = -1; // Perhaps to play with a range of widths
    int threshold = -1;
    int interval = -1;
    const char *kind() const override { return "stats"; }
#nodbprint
    const Type *getType() const override { return Type_Counter::get(); }
    UniqueAttachedId::type_t get_id_type() const override { return UniqueAttachedId::COUNTER; }
}

class Meter : Synth2Port {
    int red_drop_value = -1;
    int red_nodrop_value = -1;
    int green_value = -1;
    int yellow_value = -1;
    int red_value = -1;
    int profile = -1;
    int sweep_interval = -1;
    NullOK Expression  result = nullptr;     // Field which meter writes, eventually be deprecated
                                             // as it should be contained in AttachedOutput
    NullOK HashDist    pre_color = nullptr;  // Field to pre-color the meter.  Eventually
                                             // brought through hash distribution
    NullOK Expression  input = nullptr;      // LPF and WRED have 32 bit inputs
    ID                 implementation = {};  // Normal, LPF, WRED
    unsigned           possible_mapram_address = 0;

    const char *kind() const override { return "meter"; }
    const Type *getType() const override { return Type_Meter::get(); }
    UniqueAttachedId::type_t get_id_type() const override { return UniqueAttachedId::METER; }
    bool alu_output() const { return implementation.name == "lpf"
                               || implementation.name == "wred"; }
    bool color_output() const { return implementation.name == "normal"
                                 || implementation.name.isNull(); }
    bool mapram_possible(IR::MAU::ColorMapramAddress cma) const {
        return possible_mapram_address & (1U << static_cast<int>(cma));
    }

#nodbprint
}

/** Configuration for a stateful table -- a register object (for the memory) plus
 * the associated stateful alu instructions and config */
class StatefulAlu : Synth2Port {
    // The single register or action_selector extern used in this stateful alu
    optional NullOK Declaration_Instance                reg = nullptr;
    optional NullOK Selector                            selector = nullptr;
    bool                                                dual = false;  // dual mode
        // if dual is true, the ALU width is half the Register width (field)
        // if dual is false, the ALU width is equal to the Register width
        // this means that ALU width can be calculated as `width >> dual`
    // The possible stateful_alu externs executed in this table
    inline NameMap<SaluAction, ordered_map>             instruction = {};
    // The stateful_alu externs executed for each table-action pair string in
    // the match table We make table-action pairs to distinguish action calls
    // from same vs different tables
    ordered_map<cstring, cstring>  action_map = {};
    // overflow and underflow actions, if any
    cstring                                             overflow = {};
    cstring                                             underflow = {};
    // chain to subsequent stage  FIXME -- do we need more info here -- the field used to chain
    // the address?  Or perhaps put this in Synth2Port if other such tables can also chain
    bool                                                chain_vpn = false;
    int                                                 chain_total_size = size;
    int                                                 init_reg_lo = 0;
    int                                                 init_reg_hi = 0;
    cstring                                             reduction_or_group = {};
    bool        learn_action = false;  // if any action is a LearnAction
    bool        synthetic_for_selector = false;  // created for the driver to set selector
    int         pred_shift = -1;
    int         pred_comb_shift = -1;

    class MathUnit {
        bool            valid = false;
        bool            exp_invert = false;
        int             exp_shift = 0;
        int             scale = 0;
        int[16]         table = { 0 };
        MathUnit() { memset(this, 0, sizeof(*this)); }
        operator== { return memcmp(this, &a, sizeof(*this)) == 0; }
        dbprint { out << valid; }
        toJSON {
            json << json.indent << "\"valid\" : " << valid << ",\n"
                 << json.indent << "\"exp_invert\" : " << exp_invert << ",\n"
                 << json.indent << "\"exp_shift\" : " << exp_shift << ",\n"
                 << json.indent << "\"scale\" : " << scale << ",\n"
                 << json.indent << "\"table\" : " << table; }
        fromJSON {
            if (!json.json) return nullptr;
            MathUnit* mu = new MathUnit();
            json.load("valid", mu->valid);
            json.load("exp_invert", mu->exp_invert);
            json.load("exp_shift", mu->exp_shift);
            json.load("scale", mu->scale);
            json.load("table", mu->table);
            return mu; }
    }
    MathUnit            math = MathUnit();

    const char *kind() const override { return "stateful"; }
    const Type *getType() const override { return Type_Register::get(); }
    UniqueAttachedId::type_t get_id_type() const override { return UniqueAttachedId::STATEFUL_ALU; }
    bool alu_output() const;   // has output to VLIW alus via action data bus

    int source_width() const {
        if (dual)
            return width / 2;
        return width;
    }
    int alu_width() const { return std::min(32, source_width()); }
}

class Selector : AttachedMemory {
    ID type = {};
    ID mode = {};
    HashFunction algorithm = {};
    const char *kind() const override { return "selector"; }
    UniqueAttachedId::type_t get_id_type() const override { return UniqueAttachedId::SELECTOR; }
    int num_pools = 0;
    int max_pool_size = 0;
    NullOK HashDist hash_mod = nullptr;
#nodbprint
}


/** Tofino-specific attached table type **/

/** Ternary indirect table used to hold overhead (adressing pointers and next table info)
 * of ternary match tables */
class TernaryIndirect : AttachedMemory {
#noconstructor
#nodbprint
    TernaryIndirect(cstring tbl_name) { name = IR::ID(tbl_name + "$tind"); direct = true; }
    const char *kind() const override { return "indirect"; }
    UniqueAttachedId::type_t get_id_type() const override {
        return UniqueAttachedId::TERNARY_INDIRECT;
    }
}

/** Action data table used to hold action parameters */
class ActionData : AttachedMemory {
#nodbprint
    const char *kind() const override { return "action"; }
    bool indexed() const override { return !direct; }
    UniqueAttachedId::type_t get_id_type() const override {
        return UniqueAttachedId::ACTION_DATA;
    }
}

/** Idletime table **/
class IdleTime : AttachedMemory {
    int precision = 3;
    int interval = 7;
    cstring two_way_notification = "enable";
    bool per_flow_idletime = true;
#noconstructor
#nodbprint
    IdleTime(cstring tbl_name) { name = IR::ID(tbl_name + "$idletime"); direct = true; }
    const char *kind() const override { return "idletime"; }
    UniqueAttachedId::type_t get_id_type() const override {
        return UniqueAttachedId::IDLETIME;
    }
}

// a sequence of tables -- may be reordered if deps allow.
// deps(i,j) is true iff tables[i] is dependent on tables[j]
// (so must have j < i) */
class TableSeq {
    inline Vector<Table>        tables;
    LTBitMatrix                 deps;
#noconstructor
    TableSeq() = default;
    TableSeq(Table a) { if (a) tables.push_back(a); }
    TableSeq(Table a, Table b) {
        if (a) tables.push_back(a);
        if (b) tables.push_back(b); }
    TableSeq(TableSeq a, Table b) {
        if (a) tables.insert(tables.end(), a->tables.begin(), a->tables.end());
        if (b) tables.push_back(b); }
    bool empty() const { return tables.empty(); }
    Table front() const { return tables.empty() ? nullptr : tables.front(); }
    Table back() const { return tables.empty() ? nullptr : tables.back(); }
    size_t size() const { return tables.size(); }
    validate {
        bool first = true;
        gress_t gress;
        for (auto t : tables) {
            if (first) { gress = t->gress; first = false; }
            else if (t->gress != gress) BUG("TableSeq consists of tables of different gress?"); }
    }

#apply
}

/// A primitive function, optionally annotated with its front end type.
class TypedPrimitive : Primitive {
#nodbprint
#noconstructor
    IR::Type method_type;

    TypedPrimitive(cstring name)
    : Primitive(name), method_type(nullptr) { }
    TypedPrimitive(Util::SourceInfo srcInfo, const IR::Type* return_type, const IR::Type* m_type, cstring name)
    : Primitive(srcInfo, return_type, name), method_type(m_type) { }

    visit_children { Primitive::visit_children(v); }
}

/// A single MAU instruction.  For the most part instructions look exactly like Primitives,
/// just with more constraints applied.  For example, an "add" instruction has the same
/// destination and two sources as an "add" primitive, with the additional constraints that
/// the dest and first source are PHV while second source can be PHV, action bus, or constant.
/// We convert the primitive into an instruction when we check those constraints
// TODO(cdodd) -- stateful ALU has its own disctinct instruction set -- should use a different
// class for those or reuse this?  Currently reusing this.
class Instruction : Primitive {
#nodbprint
#emit
    using Primitive::Primitive;
#end
    // This is a vector, filled after BackendCopyPropagation, indicating which operands
    // have been copy propagated from an earlier instruction.  Copy propagated operands
    // don't have to be checked in order to guarantee parallelism
    safe_vector<bool> copy_propagated = {};
    Instruction(const Primitive &p) : Primitive(p) {}
    Instruction(cstring op, const std::vector<Expression> &args) : Primitive(op) {
        for (auto a : args) operands.push_back(a); }
    bool isOutput(int operand_index) const override { return operand_index == 0; }
    validate { BUG_CHECK(name, "empty name in instruction"); }
}

/// The IR::MAU::Action argument.
class ActionArg : Expression {
    cstring     action_name;
    ID          name;
    ActionArg { if (!srcInfo) srcInfo = name.srcInfo; }
    dbprint { out << action_name << ':' << name; }
    toString { return name.toString(); }
}

class StatefulCounter : Expression {
    AttachedMemory     attached;
    dbprint { out << "stful_cnt(" << type << ")"; }
}

class StatefulCall {
    // This will always be null after InstructionSelection is complete.  Everything
    // currently used for DefUse analysis is saved within the rest of the call
    NullOK Primitive prim;
    AttachedMemory  attached_callee;
    NullOK Expression index = nullptr;
}

/// The base class for MAU::Action and MAU::SaluAction, both represent a wide VLIW action.
abstract VLIWInstruction {
}

/// The Action part of an action table -- basically a single VLIW instruction, which is a
/// set of instructions on different PHV containers that all run simultaneously
class Action : VLIWInstruction {
    optional ID                 name;
    unsigned                    handle = 0;
    inline Vector<Primitive>    action = {};
    safe_vector<ActionArg>      args = {};
    optional Annotations        annotations = Annotations::empty;
    bool miss_action_only = false;
    bool init_default = false;
    bool default_allowed = false;
    // Currently if a table used hash distribution or the RNG, then the table must go
    // go through the hit pathway.  However, due to different driver implementation, this
    // could be different than being table_only, and thus it is left out of the
    // visit_children of the table.
    bool hit_path_imp_only = false;
    cstring disallowed_reason = "none";
    inline Vector<Argument> default_params = {};

    // Separate stateful primitives from actions, as they aren't instructions
    // as such.

    std::set<UniqueAttachedId> per_flow_enables = {};
    std::map<UniqueAttachedId, MeterType> meter_types = {};

    inline Vector<StatefulCall>    stateful_calls = {};

    cstring externalName() const;
    bool hit_only() const { return default_allowed == false; }
    bool miss_only() const { return miss_action_only == true; }

    toString { return name.toString(); }
    validate {
        ERROR_CHECK(!(hit_only() && miss_only()), "Action %s cannot be both a hit only and a "
                    "miss only action.  Can only be at most one of those categories", name);
    }
}

/// A stateful ALU VLIW instruction -- multiple instructions that all run together
/// "simultaneously" in different ALUs (certain ALUs are actually later in the pipeline)
/// in the stateful ALU block (there are 2 comparison, 4 "normal" and 1 output alus)
class SaluAction : VLIWInstruction {
    cstring                     name;
    inline Vector<Primitive>    action = {};
    safe_vector<ActionArg>      args = {};
    optional Annotations        annotations = Annotations::empty;
    NullOK Expression  output_dst = nullptr;  // implicit write of output to this lvalue

    // The original P4 function that underwent SaluAction translation. Not
    // visited. This is here so that a higher level representation of the
    // function is available to tools that consume the JSON representation of
    // the back-end IR.
    optional NullOK Function p4func = nullptr;

    visit_children {
        VLIWInstruction::visit_children(v);
        action.visit_children(v);
        v.visit(annotations, "annotations");
        v.visit(output_dst, "output_dst");
    }

    toString {
        return cstring("action ") + name + " {\n" +
                 cstring::join(action.begin(), action.end(), ";\n") +
                 " }"; }
}


/** Tofino-specific expressions that may be present in various places */

/** Hash Distribution Unit, used to bring PHV information directly into Match Central for
 *  action data lookup or action data itself.  Uses include addressing a table by a PHV field
 *  as well as a calculated hash to be used by PHV
 */
class HashDist : Expression {

    dbprint {
        out << "hash_dist(" << field_list << ", " << algorithm << ", " << bit_width << ")";
    }
    // Fields read by this HashDist
    Expression           field_list;
    HashFunction         algorithm;
    int                  bit_width = 0;
}

/** Expression computed in the input xbar, generally in the GF matrix
 * These can be used in VLIW instructions, passed to the VLIW alus via the immediate path
 * and the Action Data bus, or in SaluAction instructions.  They are useful for 'breaking'
 * constraint violations on fields that are needed in two different sized MAU PHV groups, as
 * well as computing various things (concatenations, sign extension, bit twiddling) that
 * can't be easily done in an ALU.  They can also be used for things that could be in an ALU,
 * but doing so would require an extra stage of dependency.
 */
class IXBarExpression : Expression {
    Expression          expr;
    int                 bit;    // where in the ixbar output

#noconstructor
    IXBarExpression(Expression e) : Expression(e->srcInfo, e->type), expr(e) {}
    dbprint { out << "ixbar(" << expr << ")"; }
}

class ActionDataConstant : Expression {
    cstring name;
    Constant constant;

    ActionDataConstant { type = constant->type; }
    dbprint { out << "action data constant " << constant; }
}

class RandomNumber : Expression {
    dbprint { out << "rng(" << type << ")"; }
}

/// A use of an attached table output; an operand of an instruction
class AttachedOutput : Expression {
    AttachedMemory     attached;
    dbprint { out << attached->name; }
}

/// reference to a fixed Stateful ALU resource -- these can only appear in SALU Instructions
class SaluReg : Expression {
    cstring                name;
    bool                   hi;     // corresponds to the high half of the alus
    NullOK Expression      phv_src = nullptr;
    dbprint { out << name << (hi ? " {hi}" : ""); }
    toString { return name; }
}
class SaluCmpReg : SaluReg {
    int         index;
    SaluCmpReg(cstring name, int idx) : SaluReg(Type::Bits::get(1), name, idx & 1), index(idx) {}
    #nodbprint
}

class SaluFunction : Operation_Unary {
    cstring             name;
    stringOp = "function";  // unused
    dbprint { out << name << "(" << expr << ")"; }
}

class MultiOperand : ListExpression {
     dbprint { out << name; }
     cstring name;
     bool is_phv;
     MultiOperand(ListExpression &le, cstring n, bool ip)
        : ListExpression(le), name(n), is_phv(ip) {}
}

class WrappedSlice : Operation_Ternary {
    precedence = DBPrint::Prec_Postfix;
    stringOp = "[:]";
    validate {
        if (e1 && e2 && e1->is<IR::Constant>() && e2->is<IR::Constant>()) {
            BUG_CHECK(e1->is<IR::Constant>() && e2->is<IR::Constant>(),
                      "Wrapped Slices must have constants as slice portion");
            BUG_CHECK(e1->to<IR::Constant>()->asUnsigned() < e2->to<IR::Constant>()->asUnsigned(),
                      "Wrapped Slices must have a higher lo than hi");
            BUG_CHECK(e0->is<IR::MAU::MultiOperand>(), "Wrapped Slices only make sense on "
                      "wrapped values");
        }
    }
    WrappedSlice(Expression a, int hi, int lo, int wrap_size)
    : Operation_Ternary(IR::Type::Bits::get(wrap_size - (lo - hi) + 1), a, new Constant(hi),
                       new Constant(lo)) {}
    int getL() const { return e2->to<IR::Constant>()->asInt(); }
    dbprint { out << e0 << "(" << e1 << ".." << e2 << ")"; }
}

class TableKey : Expression, IAnnotated {
    Expression expr;
    ID match_type;
    int p4_param_order = -1;
    bool from_mask = false;
    bool partition_index = false;

    bool for_selection() const { return match_type.name == "selector"; }
    bool for_dleft() const { return match_type.name == "dleft_hash"; }
    bool for_match() const { return !for_selection() && !for_dleft(); }

    dbprint { out << expr << ": " << match_type.name; }

    optional Annotations        annotations = Annotations::empty;
    Annotations getAnnotations() const override { return annotations; }
}

}  // end namespace MAU

class RangeMatch : Operation_Unary {
    // range match -- use operand (up to 4 bits) as index into constant (up to 16 bits)
    // to extract a single bit.  Result is boolean.
    unsigned    data;
    RangeMatch { type = Type::Boolean::get(); }
    precedence = DBPrint::Prec_Equ;
    stringOp = " in ";
}
