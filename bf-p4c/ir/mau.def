/* -*-c++-*- */

#emit
struct TableResourceAlloc;
#end
#emit_impl
#include "tofino/mau/resource.h"
#end

#emit_impl
#include "extensions/tofino/mau/resource.h"
#end

namespace MAU {

/** A Tofino logical table (group) -- a gateway and/or match table
 * along with whatever attached tables are run.  The basic scheduling
 * unit for tofino; there are 16 such 'logical' tables available in
 * each stage, which will run simultaneously and have their results
 * predicated by the predicate mask calculated from the next tables */
class Table : Tofino::Unit {
    cstring                                     name;
    gress_t                                     gress;
    /** Each stage has 16 slots for tables.  Logical IDs are numbered from 0
     * (Stage 0, Slot 0) to N * 16 + 15 (Stage N, Slot 15).  The @logical_id is
     * where this table has been assigned, or -1 if it has not yet been
     * assigned.
     *
     * If @logical_id is not -1, the stage this table is assigned to is
     * `(int)(logical_id/16)`.
     */
    int                                         logical_id = -1;
    vector<std::pair<Expression, cstring>>      gateway_rows;
    /** each gateway_row is a an expression for a single row of the gateway,
     * with the string being a tag to run in 'next' for next table, or null
     * if the match_table should run.  The last row (only) may have a NULL
     * expression for 'always' -- corresponding to the gateway miss action
     * (taken if no gateway rows match).  If this last row NULL expression
     * is not present, the default action is to run the table. */
    NullOK Action                               gateway_payload;
    NullOK IR::P4Table                          match_table;
    inline Vector<Attached>                     attached;
    inline NameMap<Action, ordered_map>         actions;
    inline NameMap<TableSeq>                    next;

    class Layout {
        /* POD type */
        int             entries = 0;
        bool            gateway = false;
        bool            ternary = false;
        bool            hash_action = false;
        int             ixbar_bytes = 0;
        int             match_bytes = 0;
        int             match_width_bits = 0;
        int             action_data_bytes = 0;
        int             action_data_bytes_in_overhead = 0;
        int             overhead_bits = 0;
        int             meter_addr_bits = 0;
        int             counter_addr_bits = 0;
        int             indirect_action_addr_bits = 0;
        Layout() { memset(this, 0, sizeof(*this)); }
        operator== { return memcmp(this, &a, sizeof(Layout)) == 0; }
        toJSON {
            json << json.indent << "\"entries\" : " << entries << ",\n"
                 << json.indent << "\"gateway\" : " << gateway << ",\n"
                 << json.indent << "\"ternary\" : " << ternary << ",\n"
                 << json.indent << "\"ixbar_bytes\" : " << ixbar_bytes << ",\n"
                 << json.indent << "\"match_width_bits\" : " << match_width_bits << ",\n"
                 << json.indent << "\"action_data_bytes\" : " << action_data_bytes << ",\n"
                 << json.indent << "\"action_data_bytes_in_overhead\" : "
                                << action_data_bytes_in_overhead << ",\n"
                 << json.indent << "\"overhead_bits\" : " << overhead_bits; }
        fromJSON {
            if (!json.json) return nullptr;
            Layout *rv = new Layout();
            json.load("entries", rv->entries);
            json.load("gateway", rv->gateway);
            json.load("ternary", rv->ternary);
            json.load("ixbar_bytes", rv->ixbar_bytes);
            json.load("match_width_bits", rv->match_width_bits);
            json.load("action_data_bytes", rv->action_data_bytes);
            json.load("action_data_bytes_in_overhead", rv->action_data_bytes_in_overhead);
            json.load("overhead_bits", rv->overhead_bits);
            return rv; }

        bool action_data_required() const {
            if (indirect_action_addr_bits > 0)
                return false;
            if (action_data_bytes == 0)
                return false;
            return action_data_bytes != action_data_bytes_in_overhead;
        }
        bool ternary_indirect_required() const { return ternary && overhead_bits > 0; }
        bool no_match_data() const { return match_width_bits == 0; }
#emit
        Layout &operator+=(const Layout &a);
#end
    }
#emit
    Layout layout;  // need Layout operator<< or dbprint to remove #emit here.
#end
    class Way {
        /* POD type */
        int             match_groups = 0;
        int             entries = 0;
        int             width = 0;
        Way() { memset(this, 0, sizeof(*this)); }
        operator== { return memcmp(this, &a, sizeof(Way)) == 0; }
        toJSON {
            json << json.indent << "\"match_groups\" : " << match_groups << ",\n"
                 << json.indent << "\"entries\" : " << entries << ",\n"
                 << json.indent << "\"width\" : " << width; }
        fromJSON {
            if (!json.json) return nullptr;
            Way* way = new Way();
            json.load("match_groups", way->match_groups);
            json.load("entries", way->entries);
            json.load("width", way->width);
            return way; }
    }
    vector<Way>    ways;
    const TableResourceAlloc            *resources = nullptr;

#emit
    static constexpr int TIND_NAME = 1;
    static constexpr int AD_NAME = 2;
#end
    cstring get_use_name(const IR::Attached *at = nullptr, bool is_gw = false, int type = 0) const {
        if (is_gw) {
            return name + "$gw";
        } else if (at == nullptr) {
            if (type == IR::MAU::Table::TIND_NAME)
                return name + "$tind";
            else if (type == IR::MAU::Table::AD_NAME)
                return name + "$action";
            else
                return name;
        } else if (at->is<IR::Counter>()) {
            return name + "$counter." + at->name;
        } else if (at->is<IR::Meter>()) {
            return name + "$meter." + at->name;
        } else if (at->is<IR::Register>()) {
            return name + "$register." + at->name;
        } else if (at->is<IR::ActionProfile>()) {
            return name + "$act_prof." + at->name;
        } else if (at->is<IR::ActionSelector>()) {
            return name + "$act_sel." + at->name;
        } else if (at->is<IR::MAU::ActionData>()) {
            return name + "$action";
        } else if (at->is<IR::MAU::TernaryIndirect>()) {
            return name + "$tind";
        } else {
            BUG("Unrecgonized attached table %s", at->name);
            return "";
        }
    }

#noconstructor
    Table(cstring n, gress_t gr) : name(n), gress(gr) {}
    Table(cstring n, gress_t gr, IR::P4Table t)
    : Tofino::Unit(t->srcInfo), name(n), gress(gr), match_table(t) {}
#emit
    Table(cstring n, gress_t gr, const Expression *gw)
    : Tofino::Unit(gw->srcInfo), name(n), gress(gr),
      gateway_rows{ std::make_pair(gw, "$true"), std::make_pair(nullptr, "$false") } {}
    // ir-generator can't parse {}-initializer (thinks it is the ctor body
#end

    int logical_order() const { return logical_id + gress * 4096; }
    Table *clone_rename(const char *ext) const {
        Table *rv = clone();
        rv->name += ext;
        return rv; }
#nooperator==
#emit
    bool operator==(const Table &a) const override;
#end
    bool uses_gateway() const { return !gateway_rows.empty(); }
    int stage() const override {
        return logical_id < 0 ? -1 : logical_id / StageUse::MAX_LOGICAL_IDS; }
    gress_t thread() const override { return gress; }
    validate {
        std::set<cstring> gw_next;
        for (auto &gw : gateway_rows) {
            if (&gw != &gateway_rows.back())
                CHECK_NULL(gw.first);
            else if (gw.first)
                gw_next.emplace(cstring());
            gw_next.emplace(gw.second); }
        if (!match_table && !uses_gateway())
            BUG("table with no gateway or match table");
        if (!match_table && gw_next.count(cstring()))
            BUG("gateway with no match table wants to run match table");
        if (match_table && uses_gateway() && !gw_next.count(cstring()))
            BUG("gateway always overrides match table");
        for (auto &nxt : next) {
            if (nxt.first == "$default") {
            } else if (nxt.first == "$hit" || nxt.first == "$miss") {
                if (!match_table)
                    BUG("%s next on table with no match_table", nxt.first);
            } else if (!gw_next.count(nxt.first) && !actions.count(nxt.first)) {
                BUG("%s next on table with no such action or gw result", nxt.first); } } }
    visit_children {
        for (auto &gw : gateway_rows)
            v.visit(gw.first, "gateway_row");
        auto &gateway_inhibit(v.flow_clone());
        gateway_inhibit.visit(gateway_payload, "gateway_payload");
        v.visit(match_table, "match_table");
        if (match_table) {
            auto &clone(v.flow_clone());
            v.flow_dead();
            auto &default_action(clone.flow_clone());
            for (auto &action : Values(actions)) {
                auto &clone2(clone.flow_clone());
                clone2.visit(action);
                if (next.count(action->name)) {
                    clone2.visit(next.at(action->name), action->name.name);
                    v.flow_merge(clone2);
                } else {
                    default_action.flow_merge(clone2); } }
            if (next.count("$default"))
                default_action.visit(next.at("$default"), "$default");
            else if (next.count("$hit"))
                default_action.visit(next.at("$hit"), "$hit");
            v.flow_merge(default_action);
            if (next.count("$miss")) {
                auto &clone2(clone.flow_clone());
                clone2.visit(next.at("$miss"), "$miss");
                v.flow_merge(clone2); }
        } else {
            v.flow_dead(); }
        std::set<cstring> gw_next;
        for (auto &gw : gateway_rows) {
            if (gw.second && next.count(gw.second) && !gw_next.count(gw.second)) {
                auto &clone2(gateway_inhibit.flow_clone());
                clone2.visit(next.at(gw.second), gw.second);
                v.flow_merge(clone2);
                gw_next.emplace(gw.second); } }
        attached.visit_children(v);
    }
#apply
}

/** Tofino-specific attached table type **/

/** Ternary indirect table used to hold overhead (adressing pointers and next table info)
 * of ternary match tables */
class TernaryIndirect : Attached {
#noconstructor
#nodbprint
    TernaryIndirect(cstring tbl_name) { name = IR::ID(tbl_name + "$tind"); }
    const char *kind() const override { return "indirect"; }
}

/** Action data table used to hold action parameters */
class ActionData : Attached {
    bool        direct = true;
#noconstructor
#nodbprint
    ActionData(cstring tbl_name) { name = IR::ID(tbl_name + "$action"); }
    const char *kind() const override { return "action"; }
    bool indexed() const override { return !direct; }
}

/** Confugration for a stateful table -- a register object (for the memory) plus
 * the associated stateful alu instructions and config */
class StatefulAlu : Register {
    // The single register extern used in this stateful alu
    Declaration_Instance                                reg;
    bool                                                dual = false;  // dual mode
    // The possible stateful_alu externs executed in this table
    inline NameMap<SaluAction, ordered_map>             instruction = {};
    // The stateful_alu externs executed for each action in the match table
    ordered_map<cstring, cstring>                       action_map = {};

    class MathUnit {
        bool            valid = false;
        bool            exp_invert = false;
        int             exp_shift = 0;
        int             scale = 0;
        int[16]         table = { 0 };
        MathUnit() { memset(this, 0, sizeof(*this)); }
        operator== { return memcmp(this, &a, sizeof(*this)) == 0; }
        dbprint { out << valid; }
    }
    MathUnit            math = MathUnit();

    const char *kind() const override { return "stateful"; }
}

// a sequence of tables -- may be reordered if deps allow.
// deps(i,j) is true iff tables[i] is dependent on tables[j]
// (so must have j < i) */
class TableSeq {
    inline Vector<Table>        tables;
    LTBitMatrix                 deps;
#noconstructor
    TableSeq() = default;
    TableSeq(Table a) { if (a) tables.push_back(a); }
    TableSeq(Table a, Table b) {
        if (a) tables.push_back(a);
        if (b) tables.push_back(b); }
    TableSeq(TableSeq a, Table b) {
        if (a) tables.insert(tables.end(), a->tables.begin(), a->tables.end());
        if (b) tables.push_back(b); }
    bool empty() const { return tables.empty(); }
    Table front() const { return tables.empty() ? nullptr : tables.front(); }
#apply
}

/// A primitive function, optionally annotated with its front end type.
class TypedPrimitive : Primitive {
#nodbprint
#noconstructor
    IR::Type method_type;

    TypedPrimitive(cstring name)
    : Primitive(name), method_type(nullptr) { }
    TypedPrimitive(Util::SourceInfo srcInfo, const IR::Type* return_type, const IR::Type* m_type, cstring name)
    : Primitive(srcInfo, return_type, name), method_type(m_type) { }

    visit_children { Primitive::visit_children(v); }
}

/// A single MAU instruction.  For the most part instructions look exactly like Primitives,
/// just with more constraints applied.  For example, an "add" instruction has the same
/// destination and two sources as an "add" primitive, with the additional constraints that
/// the dest and first source are PHV while second source can be PHV, action bus, or constant.
/// We convert the primitive into an instruction when we check those constraints
// TODO(cdodd) -- stateful ALU has its own disctinct instruction set -- should use a different
// class for those or reuse this?  Currently reusing this.
class Instruction : Primitive {
#nodbprint
#emit
    using Primitive::Primitive;
#end
    Instruction(const Primitive &p) : Primitive(p) {}
    Instruction(cstring op, const std::vector<Expression> &args) : Primitive(op) {
        for (auto a : args) operands.push_back(a); }
    bool isOutput(int operand_index) const override { return operand_index == 0; }
}

/// The Action part of an action table -- basically a single VLIW instruction, which is a
/// set of instructions on different PHV containers that all run simultaneously
class Action : ActionFunction {
    // Separate stateful primitives from actions, as they aren't instructions
    // as such.
    inline Vector<Primitive>    stateful = {};
}
/// A stateful ALU VLIW instruction -- multiple instructions that all run together
/// "simultanesouly" in different ALUs (certain ALUs are actually later in the pipeline)
/// in the stateful ALU block (there are 2 comparison, 4 "normal" and 1 output alus)
class SaluAction : ActionFunction {
    NullOK Expression  output_dst = nullptr;  // implicit write of output to this lvalue
}


/** Tofino-specific expressions that may be present in various places */

/// A use of one or two hash distribution units; an operand of an instruction
class HashDist : Expression {
#nodbprint
    // Fields read by this HashDist
    Expression           field_list;

    // Pointer to the IR::Primitive that was used to generate this HashDist
    // (and then removed).  This is not visited as part of IR traversal.
    Primitive            prim;

    visit_children {
        Expression::visit_children(v);
        v.visit(field_list, "field_list"); }
// FIXME -- what info goes here?
// Currently we reconstruct the unit id(s) in MauAsmOutput::EmitAction
}

class ActionDataConstant : Expression {
#nodbprint
    cstring name;
    Constant constant;

    ActionDataConstant { type = constant->type; }
}

/// A use of an attached table output; an operand of an instruction
class AttachedOutput : Expression {
    Attached    attached;
    dbprint { out << attached->name; }
}

/// reference to a fixed Stateful ALU resource -- these can only appear in SALU Instructions
class SaluReg : Expression {
    cstring     name;
    dbprint { out << name; }
}
class SaluMathFunction : Operation_Unary {
    stringOp = "math_unit";
    dbprint { out << "math_unit (" << expr << ")"; }
}

class MultiOperand : ListExpression {
#nodbprint
     cstring name;
     bool is_phv;
     MultiOperand(ListExpression &le, cstring n, bool ip)
        : ListExpression(le), name(n), is_phv(ip) {}
}

}  // end namespace MAU

class RangeMatch : Operation_Unary {
    // range match -- use operand (up to 4 bits) as index into constant (up to 16 bits)
    // to extract a single bit.  Result is boolean.
    unsigned    data;
    RangeMatch { type = Type::Boolean::get(); }
    precedence = DBPrint::Prec_Equ;
    stringOp = " in ";
}
