#emit
#include "bf-p4c/ir/gress.h"
#include "lib/ordered_map.h"
#end

namespace BFN {

/// A P4Control produced by TNA translation; contains some additional useful
/// metadata.
class TranslatedP4Control : P4Control {
    toString { return P4Control::toString() + " on " + cstring::to_cstring(thread); }
    dbprint { out << toString(); }

    /// A map from standard TNA parameter names to the names actually used in
    /// the P4 program. For example, a TNA control prototype may include a
    /// parameter "inout M ig_md", but the user program instantiating the
    /// control may use "inout M user_metadata"; this map would include a
    /// mapping from "ig_md" to "user_metadata".
    ordered_map<cstring, cstring> tnaParams;

    /// The thread this control is associated with.
    gress_t thread;
}

/// A P4Deparser produced by TNA translation; contains some additional useful
/// metadata.
class TranslatedP4Deparser : P4Control {
    toString { return P4Control::toString() + " on " + cstring::to_cstring(thread); }
    dbprint { out << toString(); }

    /// A map from standard TNA parameter names to the names actually used in
    /// the P4 program. For example, a TNA control prototype may include a
    /// parameter "inout M ig_md", but the user program instantiating the
    /// control may use "inout M user_metadata"; this map would include a
    /// mapping from "ig_md" to "user_metadata".
    ordered_map<cstring, cstring> tnaParams;

    /// The thread this control is associated with.
    gress_t thread;
}

/// A P4Parser produced by TNA translation; contains some additional useful
/// metadata.
class TranslatedP4Parser : P4Parser {
    toString { return P4Parser::toString() + " on " + cstring::to_cstring(thread); }
    dbprint { out << toString(); }

    /// A map from standard TNA parameter names to the names actually used in
    /// the P4 program. @see TranslatedP4Control::tnaParams.
    ordered_map<cstring, cstring> tnaParams;

    /// The thread this parser is associated with.
    gress_t thread;
}

}  // end namespace BFN
