# -*- Python -*-

import os
import os.path
import sys

def find_file(directory, filename, binary=True):
    '''
    Searches up the directory hierarchy for filename with prefix directory
    starting from the current working directory.
    If directory is an absolute path, just check for the file.
    If binary == true, then check permissions that the file is executable
    '''
    def check_file(f):
        if os.path.isfile(f):
            if binary:
                if os.access(f, os.X_OK): return True
            else:
                return True
        return False

    executable = ""
    if directory.startswith('/'):
        executable = os.path.normpath(os.path.join(directory, filename))
        if check_file(executable): return executable

    # find the file up the hierarchy
    dir	= os.path.abspath(os.getcwd())
    if os.path.basename(filename) != filename:
        directory = os.path.join(directory, os.path.dirname(filename))
        filename = os.path.basename(filename)
    while dir != "/":
        path_to_file = os.path.join(dir, directory)
        if os.path.isdir(path_to_file):
	    files = os.listdir(path_to_file)
            if filename in files:
                executable = os.path.join(path_to_file, filename)
                if check_file(executable): return executable

	dir = os.path.dirname(dir)
    print 'File', filename, 'Not found'
    sys.exit(1)

# Search the environment for assets
if os.environ['P4C_BUILD_TYPE'] == "DEVELOPER":
    walle = find_file('bf-asm', 'walle/walle.py')
    schema = find_file('bf-asm', 'tofino/chip.schema', binary=False)
    tfas = find_file('bf-asm', 'tfas')
    tflink = find_file('bf-asm', 'tflink')
else:
    walle = find_file(os.environ['P4C_BIN_DIR'], 'walle')
    schema = find_file(os.environ['P4C_CFG_PATH'], '../tofino/chip.schema', binary=False)
    tfas = find_file(os.environ['P4C_BIN_DIR'], 'tfas')
    tflink = find_file(os.environ['P4C_BIN_DIR'], 'tflink')


# Tofino Native Architecture
tofino_target = 'tofino-native-barefoot'
def config_preprocessor():
    config.add_preprocessor_option(tofino_target, "-E -x c")
    config.add_preprocessor_option(tofino_target, "-D__TARGET_TOFINO__")
    if source_basename is not None:
        config.add_preprocessor_option(tofino_target, "-o")
        config.add_preprocessor_option(tofino_target, "{}/{}.p4i".format(output_dir, source_basename))
        config.add_preprocessor_option(tofino_target, source_fullname)

def config_compiler():
    config.add_compiler_option(tofino_target, "--nocpp")
    config.add_compiler_option(tofino_target, "-D__TARGET_TOFINO__")
    if source_basename is not None:
        config.add_compiler_option(tofino_target, "-o")
        config.add_compiler_option(tofino_target, "{}/{}.tfa".format(output_dir, source_basename))
        config.add_compiler_option(tofino_target, "{}/{}.p4i".format(output_dir, source_basename))

def config_assembler():
    config.add_assembler_option(tofino_target, "-vvvl")
    if source_basename is not None:
        config.add_assembler_option(tofino_target, "{}/tfas.config.log".format(output_dir))
        config.add_assembler_option(tofino_target, "-o {}".format(output_dir))
        config.add_assembler_option(tofino_target, "{}/{}.tfa".format(output_dir, source_basename))

def config_linker():
    config.add_linker_option(tofino_target, "--walle " + walle)
    config.add_linker_option(tofino_target, "--schema " + schema)
    if source_basename is not None:
        config.add_linker_option(tofino_target, "-o {}/tofino.bin".format(output_dir))
        config.add_linker_option(tofino_target, "{}/*.cfg.json".format(output_dir))

config_preprocessor()
config_compiler()
config_assembler()
config_linker()

config.add_toolchain(tofino_target, {
    'preprocessor': 'cc',
    'compiler': os.path.join(os.environ['P4C_BIN_DIR'], 'p4c-tofino'),
    'assembler': tfas,
    'linker': tflink})
config.add_compilation_steps(tofino_target,
                             ['preprocessor', 'compiler', 'assembler', 'linker'])
config.target.append(tofino_target)


# PSA implementation on Tofino
psa_target = 'tofino-psa-barefoot'
config.add_linker_option(psa_target, "")
config.add_toolchain(psa_target, {
    'linker': 'echo "target ' + psa_target + ' not yet implemented"'
})
config.add_compilation_steps(psa_target, ['linker'])
config.target.append(psa_target)
